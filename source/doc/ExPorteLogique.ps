%!PS-Adobe-2.0
%%Creator: dvips(k) 2020.1 Copyright 2020 Radical Eye Software
%%Title: ExPorteLogique.dvi
%%CreationDate: Sat Oct 02 17:37:56 2021
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: SFBX2488 SFRM2074 SFBX1440 SFRM1095 SFBX1095 CMR10
%%+ CMMI10 CMSY10
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -Pdownload35 -o ExPorteLogique.ps
%+ ExPorteLogique.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2021.10.02:1937
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 4 2020-06-09 08:32:19Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.30, 2018/12/17
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/addCoors { 
  3 -1 roll 		% xA xB yB yA
  add			% xA xB yB+yA
  3 1 roll 		% yB+yA xA xB
  add			% yB+yA xA+xB
  exch                  % xA+xB yA+yB
} def
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (original)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul         %	\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  dup % run loop two times: lines and labels
  { i dx mul dup xGridOffset add y0 moveto % draw the lines
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  /i x1 def 
  GridDX div ceiling cvi 
  { i dx mul GridDX mul dup xGridOffset add y0 moveto % plot the labels
    b 0 gt 
      { gsave c i GridDX mul a cvs dup stringwidth pop /z2 ED  
        w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse exch GridDX div z2 2 div sub exch 
        rmoveto show grestore } if 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  dup % run loop two times: lines and labels
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  /i y1 def 
  GridDY div ceiling cvi
  { newpath i dy mul GridDY mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i GridDY mul a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse GridDY div b 2 div sub
      rmoveto show grestore } if 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 4 2020-06-09 08:32:19Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 4 2020-06-09 08:32:19Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2018/12/16 $
% Version         : 0.65 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: l3backend-dvips.pro 0 0
%%
%% This is file `l3backend-dvips.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% l3backend-header.dtx  (with options: `header,dvips')
%% 
%% Copyright (C) 1990-2020 The LaTeX3 Project
%% 
%% It may be distributed and/or modified under the conditions of
%% the LaTeX Project Public License (LPPL), either version 1.3c of
%% this license or (at your option) any later version.  The latest
%% version of this license is in the file:
%% 
%%    https://www.latex-project.org/lppl.txt
%% 
%% This file is part of the "l3backend bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%% 
%% File: l3backend-header.dtx
true setglobal
/pdf.globaldict 4 dict def
false setglobal

/pdf.cvs { 65534 string cvs } def
/pdf.dvi.pt { 72.27 mul Resolution div } def
/pdf.pt.dvi { 72.27 div Resolution mul } def
/pdf.rect.ht { dup 1 get neg exch 3 get add } def
/pdf.linkmargin { 1 pdf.pt.dvi } def
/pdf.linkdp.pad { 0 } def
/pdf.linkht.pad { 0 } def
/pdf.rect
  { /Rect [ pdf.llx pdf.lly pdf.urx pdf.ury ] } def
/pdf.save.ll
  {
    currentpoint
    /pdf.lly exch def
    /pdf.llx exch def
  }
    def
/pdf.save.ur
  {
    currentpoint
    /pdf.ury exch def
    /pdf.urx exch def
  }
    def
/pdf.save.linkll
  {
    currentpoint
    pdf.linkmargin add
    pdf.linkdp.pad add
    /pdf.lly exch def
    pdf.linkmargin sub
    /pdf.llx exch def
  }
    def
/pdf.save.linkur
  {
    currentpoint
    pdf.linkmargin sub
    pdf.linkht.pad sub
    /pdf.ury exch def
    pdf.linkmargin add
    /pdf.urx exch def
  }
    def
/pdf.dest.anchor
  {
    currentpoint exch
    pdf.dvi.pt 72 add
    /pdf.dest.x exch def
    pdf.dvi.pt
    vsize 72 sub exch sub
    /pdf.dest.y exch def
  }
    def
/pdf.dest.point
  { pdf.dest.x pdf.dest.y } def
/pdf.dest2device
  {
    /pdf.dest.y exch def
    /pdf.dest.x exch def
    matrix currentmatrix
    matrix defaultmatrix
    matrix invertmatrix
    matrix concatmatrix
    cvx exec
    /pdf.dev.y exch def
    /pdf.dev.x exch def
    /pdf.tmpd exch def
    /pdf.tmpc exch def
    /pdf.tmpb exch def
    /pdf.tmpa exch def
    pdf.dest.x pdf.tmpa mul
      pdf.dest.y pdf.tmpc mul add
      pdf.dev.x add
    pdf.dest.x pdf.tmpb mul
     pdf.dest.y pdf.tmpd mul add
     pdf.dev.y add
  }
    def
/pdf.bordertracking false def
/pdf.bordertracking.begin
  {
    SDict /pdf.bordertracking true put
    SDict /pdf.leftboundary undef
    SDict /pdf.rightboundary undef
    /a where
      {
        /a
          {
            currentpoint pop
            SDict /pdf.rightboundary known dup
              {
                SDict /pdf.rightboundary get 2 index lt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.rightboundary exch put }
            ifelse
            moveto
            currentpoint pop
            SDict /pdf.leftboundary known dup
              {
                SDict /pdf.leftboundary get 2 index gt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.leftboundary exch put }
            ifelse
          }
        put
      }
    if
  }
    def
/pdf.bordertracking.end
  {
    /a where { /a { moveto } put } if
    /x where { /x { 0 exch rmoveto } put } if
    SDict /pdf.leftboundary known
      { pdf.outerbox 0 pdf.leftboundary put }
    if
    SDict /pdf.rightboundary known
      { pdf.outerbox 2 pdf.rightboundary put }
    if
    SDict /pdf.bordertracking false put
  }
    def
  /pdf.bordertracking.endpage
{
  pdf.bordertracking
    {
      pdf.bordertracking.end
      true setglobal
      pdf.globaldict
        /pdf.brokenlink.rect [ pdf.outerbox aload pop ] put
      pdf.globaldict
        /pdf.brokenlink.skip pdf.baselineskip put
      pdf.globaldict
        /pdf.brokenlink.dict
          pdf.link.dict pdf.cvs put
      false setglobal
      mark pdf.link.dict cvx exec /Rect
        [
          pdf.llx
          pdf.lly
          pdf.outerbox 2 get pdf.linkmargin add
          currentpoint exch pop
          pdf.outerbox pdf.rect.ht sub pdf.linkmargin sub
        ]
      /ANN pdf.pdfmark
    }
  if
}
  def
/pdf.bordertracking.continue
  {
    /pdf.link.dict pdf.globaldict
      /pdf.brokenlink.dict get def
    /pdf.outerbox pdf.globaldict
      /pdf.brokenlink.rect get def
    /pdf.baselineskip pdf.globaldict
      /pdf.brokenlink.skip get def
    pdf.globaldict dup dup
    /pdf.brokenlink.dict undef
    /pdf.brokenlink.skip undef
    /pdf.brokenlink.rect undef
    currentpoint
    /pdf.originy exch def
    /pdf.originx exch def
    /a where
      {
        /a
          {
            moveto
            SDict
            begin
            currentpoint pdf.originy ne exch
              pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
    /x where
      {
        /x
          {
            0 exch rmoveto
            SDict~
            begin
            currentpoint
            pdf.originy ne exch pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
  }
    def
/pdf.breaklink
  {
    pop
    counttomark 2 mod 0 eq
      {
        counttomark /pdf.count exch def
          {
           pdf.count 0 eq { exit } if
           counttomark 2 roll
           1 index /Rect eq
             {
               dup 4 array copy
               dup dup
                 1 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add sub
                 3 exch put
               dup
                 pdf.outerbox 2 get
                 pdf.linkmargin add
                 2 exch put
               dup dup
                 3 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add add
                 1 exch put
               /pdf.currentrect exch  def
               pdf.breaklink.write
                 {
                   pdf.currentrect
                   dup
                     pdf.outerbox 0 get
                     pdf.linkmargin sub
                     0 exch put
                   dup
                     pdf.outerbox 2 get
                     pdf.linkmargin add
                     2 exch put
                   dup dup
                     1 get
                     pdf.baselineskip add
                     1 exch put
                   dup dup
                     3 get
                     pdf.baselineskip add
                     3 exch put
                   /pdf.currentrect exch def
                   pdf.breaklink.write
                  }
                1 index 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                2 index 1 get sub
                pdf.baselineskip div round cvi 1 sub
                exch
              repeat
              pdf.currentrect
              dup
                pdf.outerbox 0 get
                pdf.linkmargin sub
                0 exch put
              dup dup
                1 get
                pdf.baselineskip add
                1 exch put
              dup dup
                3 get
                pdf.baselineskip add
                3 exch put
              dup 2 index 2 get  2 exch put
              /pdf.currentrect exch def
              pdf.breaklink.write
              SDict /pdf.pdfmark.good false put
              exit
            }
            { pdf.count 2 sub /pdf.count exch def }
          ifelse
        }
      loop
    }
  if
  /ANN
}
  def
/pdf.breaklink.write
  {
    counttomark 1 sub
    index /_objdef eq
      {
        counttomark -2 roll
        dup wcheck
          {
            readonly
            counttomark 2 roll
          }
          { pop pop }
        ifelse
      }
    if
    counttomark 1 add copy
    pop pdf.currentrect
    /ANN pdfmark
  }
    def
/pdf.pdfmark
  {
    SDict /pdf.pdfmark.good true put
    dup /ANN eq
      {
        pdf.pdfmark.store
        pdf.pdfmark.dict
          begin
            Subtype /Link eq
            currentdict /Rect known and
            SDict /pdf.outerbox known and
            SDict /pdf.baselineskip known and
              {
                Rect 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                Rect 1 get sub
                pdf.baselineskip div round cvi 0 gt
                  { pdf.breaklink }
                if
              }
            if
          end
        SDict /pdf.outerbox undef
        SDict /pdf.baselineskip undef
        currentdict /pdf.pdfmark.dict undef
      }
    if
    pdf.pdfmark.good
      { pdfmark }
      { cleartomark }
    ifelse
  }
    def
/pdf.pdfmark.store
  {
    /pdf.pdfmark.dict 65534 dict def
    counttomark 1 add copy
    pop
      {
        dup mark eq
          {
            pop
            exit
          }
          {
            pdf.pdfmark.dict
            begin def end
          }
        ifelse
      }
    loop
}
  def
%% 
%%
%% End of file `l3backend-dvips.pro'.

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% $Id: pst-text.pro 891 2018-12-29 19:42:20Z herbert $
%
% PostScript header file pst-text.pro
% Version 1.02, 2018-12-28 (hv)
% For distribution, see pstricks.tex.
%
/tx@TextPathDict 45 dict def
tx@TextPathDict begin
%
% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def
%
/movetoproc { continue { @movetoproc } { pop pop } ifelse } def
%
/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def
%
/linetoproc { continue { @linetoproc } { pop pop } ifelse } def
%
/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def
%
/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def
%
% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def
%
/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def
%
/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def
%
%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint
    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
/warp {
    1 index
    1.4 mul
    cos 2 add
    mul
} def
/warpmove{
    2 index {
        newpath
    } if
    warp moveto
    pop false
} def
/warpline { warp lineto } def
/warpcurve {
    6 2 roll warp
    6 2 roll warp
    6 2 roll warp
    curveto
} def
/warpit {
    true
    { warpmove } { warpline } { warpcurve } { closepath } pathforall
    pop
} def
%
/circle {
    exch neg
    % .5 mul
    90 add
    dup cos 2 index mul
    3 1 roll
    sin mul
} bind def

/circmove{
    2 index { newpath } if
    circle moveto
    pop false
} bind def

/circline { circle lineto } bind def

/circcurve {
    6 2 roll circle
    6 2 roll circle
    6 2 roll circle
    curveto
} bind def

/circit { true { circmove } { circline } { circcurve } { closepath } pathforall pop } bind def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pst-blur.pro 0 0
%%
%% This is file `pst-blur.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% pst-blur.dtx  (with options: `prolog')
%% 
%% IMPORTANT NOTICE:
%% 
%% For the copyright see the source file.
%% 
%% Any modified versions of this file must be renamed
%% with new filenames distinct from pst-blur.pro.
%% 
%% For distribution of the original source see the terms
%% for copying and modification in the file pst-blur.dtx.
%% 
%% This generated file may be distributed as long as the
%% original source files, as listed above, are part of the
%% same distribution. (The sources need not necessarily be
%% in the same archive or directory.)
%% $Id: pst-blur.dtx,v 2.0 2005/09/08 09:48:33 giese Exp $
%%
%% Copyright 1998-2007 Martin Giese, mgiese@risc.uni-linz.ac.at
%%                     Herbert Voss, voss@pstricks.de
%%
%% This file is under the LaTeX Project Public License
%% See CTAN archives in directory macros/latex/base/lppl.txt.
%%
%% DESCRIPTION:
%%   `pst-blur' is a PSTricks package for blurred shadows
%%
/tx@PstBlurDict 60 dict def
tx@PstBlurDict begin
/Iterate {
  /SegLines ED
  /ThisB ED /ThisG ED /ThisR ED
  /NextB ED /NextG ED /NextR ED
  /W 2.0 BlurRadius mul def
  /WDec W SegLines div def
  /RInc NextR ThisR sub SegLines div def
  /GInc NextG ThisG sub SegLines div def
  /BInc NextB ThisB sub SegLines div def
  /R ThisR def
  /G ThisG def
  /B ThisB def
  SegLines {
    R G B
    sqrt 3 1 roll sqrt 3 1 roll sqrt 3 1 roll
    setrgbcolor
    gsave W setlinewidth
    stroke grestore
    /W W WDec sub def
    /R R RInc add def
    /G G GInc add def
    /B B BInc add def
  } bind repeat
} def
/BlurShadow {
  Shadow
  /BlurSteps ED
  /BlurRadius ED
  dup mul /BEnd ED dup mul /GEnd ED dup mul /REnd ED
  dup mul /BBeg ED dup mul /GBeg ED dup mul /RBeg ED
  RBeg REnd add 0.5 mul /RMid ED
  GBeg GEnd add 0.5 mul /GMid ED
  BBeg BEnd add 0.5 mul /BMid ED
  /OuterSteps BlurSteps 2 div cvi def
  /InnerSteps BlurSteps OuterSteps sub def
  1 setlinejoin
  RMid GMid BMid REnd GEnd BEnd OuterSteps Iterate
  gsave RBeg sqrt GBeg sqrt BBeg sqrt setrgbcolor fill grestore
  clip
  0 setlinejoin
  RMid GMid BMid RBeg GBeg BBeg InnerSteps Iterate
} def
end

%%EndProcSet
%%BeginProcSet: pst-func.pro 0 0
%% $Id: pst-func.pro 861 2018-12-13 20:40:06Z herbert $
%%
%% This is file `pst-func.pro',
%%
%% IMPORTANT NOTICE:
%%
%% Package `pst-func'
%%
%% Herbert Voss <hvoss@tug.org>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% DESCRIPTION:
%%   `pst-func' is a PSTricks package to plot special math functions
%%
%%
%% version 0.17 / 2018-12-13  Herbert Voss
%
/tx@FuncDict 100 dict def
tx@FuncDict begin
%
/eps1 1.0e-05 def
/eps2 1.0e-04 def
/eps5 1.0e-05 def
/eps8 1.0e-08 def
%
/PiHalf 1.57079632679489661925640 def
/CEuler 0.5772156649 def % Euler-Mascheroni constant
%
/factorial { % n on stack, returns n! 
  dup 32 gt { pop 1e32 } {
    dup 0 eq { 1 }{ 
      dup 1 gt { dup 1 sub factorial mul } if }
    ifelse } ifelse 
} def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/Pascal [
  [                   1                   ] % 0
  [                 1   1                 ] % 1
  [               1   2   1               ] % 2
  [             1   3   3   1             ] % 3
  [           1   4   6   4   1           ] % 4
  [         1   5  10  10   5   1         ] % 5
  [       1   6  15  20  15   6   1       ] % 6
  [     1   7  21  35  35  21   7   1     ] % 7
  [   1   8  28  56  70  56  28  8    1   ] % 8
  [ 1   9  36  84 126 126  84  36  9    1 ] % 9
] def
%
/GetBezierCoor { 				% t on stack
  10 dict begin					% hold all local
  /t ED
  /t1 1 t sub def				% t1=1-t
  /Coeff Pascal BezierType get def		% get the coefficients
    0 0						% initial values for x y
    BezierType -1 0 {				% BezierType,...,2,1,0
      /I ED					% I=BezierType,...,2,1,0
      /J BezierType I sub def			% J=0,1,2,...,BezierType
      /T t I exp Coeff J get mul def		% coeff(J)*t^I
      /T1 t1 J exp def				% t1^J  
      Points I dup add 1 add get		% y(2*I+1)
      T mul T1 mul add				% the y coordinate
      exch					% y x	
      Points I dup add get			% x(2*I)
      T mul T1 mul add				% the x coordinate
      exch					% x y	
    } for					% x y on stack
  end
} def

/BezierCurve { % on stack [ coors psk@plotpoints BezierType
%  10 dict begin
  /BezierType ED                        % 2,3,4,5,6,...
  1 exch div /epsilon ED                % step for Bezier =1/plotpoints
  ]                                     % [ yi xi ... y3 x3 y2 x2 y1 x1 y0 x0]
  ps@ReverseOrderOfPoints               % [y0 x0 y1 x1 ... yi xi]
  /Points ED 				% save Points array
  epsilon GetBezierCoor 		% next Bezier point
  Points 0 get Points 1 get 		% starting point
  ArrowA lineto 
  epsilon epsilon 1 epsilon sub { % on stack is the loop variable
    GetBezierCoor lineto 
  } for 
  1 epsilon sub GetBezierCoor  
  1 GetBezierCoor  
  ArrowB lineto moveto
%  end
} def

/Bernstein { % on stack tStart tEnd plotpoints i n
  12 dict begin				% hold all local
  /envelope ED				% plot envelope?
  /n ED 
  /i ED
  /ni n i sub def  
  /epsilon ED				% step=1/plotpoints
  /tEnd ED
  /tStart ED
%
% B_{i,n}(t)=\binom{n}{i}t^i(1-t)^{n-i}      (Bernstein)
% f_n(x)=\frac{1}{\sqrt{\pi n\cdot x(1-x)}}  (envelope)
%
  n i MoverN /noveri ED			% \binom{n}{i}
  [					% for the array of points
  tStart epsilon tEnd {
    dup dup /t ED			% leave one on stack
    neg 1 add /t1 ED			% t1=1-t
    envelope 
      { t t1 mul 4 mul PiHalf mul n mul sqrt 1 exch Div }	% envelope
      { noveri t i exp mul t1 ni exp mul } ifelse 	% t f(t)
    ScreenCoor				% convert to screen coor
  } for
  end
  false /Lineto /lineto load def Line
} def
%%
/Si { % integral sin from 0 to x (arg on stack)
  10 dict begin				% hold all local
  dup 0 eq 
  { pop 0 } 
  { 
    /arg exch def  % x
    /arg2 arg dup mul def
    /Sum arg def   %
    /sign -1 def   
    /I 3 def
    /Frac arg2 arg mul 6 div def
    { %  a sequence of x - x^3/(3*3!) + x^5/(5*5!) -...+...
      Frac I div sign mul
      dup abs eps5 lt { pop exit } if
      Sum add /Sum exch def
      /sign sign neg def
      /I I 2 add def
      Frac arg2 mul I 1 sub I mul div /Frac ED
%    arg I Power dup abs 1e30 gt { pop exit } if
%    I factorial div I div sign mul 
%    dup abs eps8 lt { pop exit } if 
%    Sum add /Sum exch def
%    /sign sign neg def
%    /I I 2 add def
   } loop
   Sum
  } ifelse
  end
} def
%
/si { % integral sin from x to infty -> si(x)=Si(x)-pi/2
  Si PiHalf sub
} def
%
/Ci { % integral cosin from x to infty (arg on stack)
  10 dict begin				% hold all local
  abs /arg exch def
  arg 0 eq { 0 } { 
    /arg2 arg dup mul def 
    /Sum CEuler arg ln add def
    /sign -1 def
    /I 2 def
    /Frac arg2 2 div def % first fraction
    { Frac I div sign mul
      dup abs eps5 lt { pop exit } if
      Sum add /Sum exch def
     /sign sign neg def
     /I I 2 add def
     Frac arg2 mul I 1 sub I mul div /Frac ED
    } loop
    Sum
  } ifelse
  end
} def
%
/ci { % integral cosin from x to infty -> ci(x)=-Ci(x)+ln(x)+CEuler
  dup Ci neg exch abs ln add CEuler add
} def
%
/MaxIter 255 def
/func { coeff Derivation FuncValue } def
/func' { coeff Derivation 1 add FuncValue } def
/func'' { coeff Derivation 2 add FuncValue } def
%
/NewtonMehrfach {% the start value must be on top of the stack
  /Nx exch def 
  /Iter 0 def
  {
    /Iter Iter 1 add def
    Nx func /F exch def % f(Nx)
    F abs eps2 lt { exit } if
    Nx func' /FS exch def % f'(Nx) 
    FS 0 eq { /FS 1.0e-06 def } if
    Nx func'' /F2S exch def % f''(Nx)
    1.0 1.0 F F2S mul FS dup mul div sub div /J exch def
    J F mul FS div /Diff exch def 
    /Nx Nx Diff sub def
    Diff abs eps1 lt Iter MaxIter gt or { exit } if 
  } loop 
  Nx % the returned value ist the zero point
} def

/Steffensen {% the start value must be on top of the stack
  /y0 exch def % the start value
  /Iter 0 def   /MaxIter 200 def
  { pstack
    y0 func /F exch def
    F abs eps2 lt { exit } if
    y0 F sub /Phi exch def
    Phi func /F2 exch def
    F2 abs eps2 le { exit }{
      Phi y0 sub dup mul Phi F2 sub 2 Phi mul sub y0 add Div /Diff exch def
      y0 Diff sub /y0 exch def
      Diff abs eps1 le { exit } if
    } ifelse
    /Iter Iter 1 add def
    Iter MaxIter gt { exit } if
  } loop
  y0 28 mul % the returned value ist the zero point
  0  
  3 0 360 arc gsave 0 0 1 setrgbcolor fill grestore 1 setlinewidth stroke
} def 
%
/Horner {% x [coeff] must be on top of the stack
  aload length
  dup 2 add -1 roll
  exch 1 sub {
    dup 4 1 roll
    mul add exch
  } repeat
  pop % the y value is on top of the stack
} def
%
/FuncValue {% x [coeff] Derivation must be on top of the stack
  {
    aload 			% a0 a1 a2 ... a(n-1) [array]
    length                      % a0 a1 a2 ... a(n-1) n
    1 sub /grad exch def        % a0 a1 a2 ... a(n-1) 
    grad -1 1 {                 % for n=grad step -1 until 1
      /n exch def               % Laufvariable speichern
      n                         % a0 a1 a2 ... a(n-1) n
      mul                       % a0 a1 a2 ... a(n-1)*n 
      grad 1 add                % a0 a1 a2 ... a(n-1)*n grad+1 
      1 roll                    % an*na0 a1 a2 ... a(n-2)
    } for
    pop                         % loesche a0
    grad array astore           % [ a1 a2 ... a(n-2)]
  } repeat
  Horner
} def
%
/FindZeros { % dxN dxZ must be on top of the stack (x0..x1 the intervall) => []
  12 dict begin 
  /dxZ exch def /dxN exch def
  /pstZeros [] def 
  x0 dxZ x1 { % suche Nullstellen
    /xWert exch def
    xWert NewtonMehrfach 
    %xWert Steffensen 
    /xNull exch def 
    pstZeros aload length /Laenge exch def % now test if value is a new one
    Laenge 0 eq 
      { xNull 1 }
      { /newZero true def
        Laenge {
	  xNull sub abs dxN lt { /newZero false def } if
        } repeat
	pstZeros aload pop
        newZero { xNull Laenge 1 add } { Laenge } ifelse } ifelse
    array astore 
    /pstZeros exch def
  } for
  pstZeros  % the end array is now on the stack
  end
} def
%
/Simpson { % on stack must be a b M useXVal   --- simple version ---
% /SFunc must be defined 
  /useX ED  % for algebraic functions which uses f(x)
  /M ED /b ED /a ED
  /h b a sub M 2 mul div def
  /s1 0 def
  /s2 0 def
  1 1 M {
    /k exch def
    /xVal k 2 mul 1 sub h mul a add def
    /s1 s1 xVal useX { /x exch def } if SFunc add def
  } for
  1 1 M 1 sub {
    /k exch def
    /xVal k 2 mul h mul a add def
    /s2 s2 xVal useX { /x exch def } if SFunc add def
  } for
  /I a useX { /x exch def } if SFunc b useX { /x exch def } if SFunc add s1 4 mul add s2 2 mul add 3 div h mul def
} def
%
%
/LogGamma { 5 dict begin	% z on stack
  /z ED
  /sum 0 def
  /k 1 def
  {
    z k div dup 1 add ln sub dup
    abs eps8 lt { pop exit } if
    sum add /sum exch def
    /k k 1 add def
  } loop
  sum z ln sub CEuler z mul sub
  end 
} def
%
/ChebyshevT { 5 dict begin	% z on stack
  /xtmp exch def
  /n exch def
  0 0 1 n .5 mul floor {
     /k exch def
     xtmp xtmp mul 1 sub k exp
     xtmp n 2 k mul sub exp mul
     n 2 k mul MoverN mul
     add
  } for
  end
} def
%
/ChebyshevU {5 dict begin	% z on stack
  /xtmp exch def
  /n exch def
  0 0 1 n .5 mul floor {
    /k exch def
    xtmp xtmp mul 1 sub k exp
    xtmp n 2 k mul sub exp mul
    n 1 add 2 k mul 1 add MoverN mul
    add
  } for
  end
} def
%
/vasicek{           %density=sqrt((1-R2)/R2)*exp(1/2*(norminv(x)2 - (1/sqrt(R2)*((sqrt(1-R2)*norminv(x)-norminv(pd)))2))
  2 dict begin
  /pd where { pop }{ /pd 0.22 def } ifelse    % element of (0,1) probability of default of portfolio  
  /R2 where { pop }{ /R2 0.11 def } ifelse    % element of (0,1) R_Squared of portfolio
  dup                 % x   x
  norminv             % x   norminv(x)
  dup mul             % x   norminv(x)^2
  exch                % norminv(x)2   x
  norminv             % norminv(x)2   norminv(x)
  1 R2 sub sqrt mul   % norminv(x)2   sqrt(1-R2)*norminv(x)
  pd norminv sub      % norminv(x)2   sqrt(1-R2)*norminv(x)-norminv(pd)
  R2 sqrt div         % norminv(x)2   1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd))
  dup mul             % norminv(x)2  (1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2
  sub                 % norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2
  2 div               % 1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)
  ENeperian exch exp  % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)
  1 R2 sub            % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   1-R2
  R2 div              % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   (1-R2)/R2
  sqrt                % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   sqrt((1-R2)/R2)
  mul                 % sqrt((1-R2)/R2)*exp(1/2*(norminv(x)2 - (1/sqrt(R2)*((sqrt(1-R2)*norminv(x)-norminv(pd)))2))
  end
} def
%end{vasicek density}
%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def
%
end

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: cm-super-t1.enc 0 0
% This file is generated from `T1uni.map' and `glyphlist.txt', `gl-other.txt'
%
% LIGKERN hyphen hyphen =: endash ; endash hyphen =: emdash ;
% LIGKERN quoteleft quoteleft =: quotedblleft ;
% LIGKERN quoteright quoteright =: quotedblright ;
% LIGKERN comma comma =: quotedblbase ; less less =: guillemotleft ;
% LIGKERN greater greater =: guillemotright ;
% LIGKERN f f =: ff ; f i =: fi ; f l =: fl ; ff i =: ffi ; ff l =: ffl ;
%
% LIGKERN space {} * ; * {} space ; zero {} * ; * {} zero ;
% LIGKERN one {} * ; * {} one ; two {} * ; * {} two ;
% LIGKERN three {} * ; * {} three ; four {} * ; * {} four ;
% LIGKERN five {} * ; * {} five ; six {} * ; * {} six ;
% LIGKERN seven {} * ; * {} seven ; eight {} * ; * {} eight ;
% LIGKERN nine {} * ; * {} nine ;
%
/T1Encoding [
% 0x00
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
% 0x10
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/afii61664
/perthousandzero % PERTHOUSAND ZERO
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
% 0x20
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
% 0x30
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
% 0x40
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
% 0x50
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
% 0x60
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
% 0x70
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt % HANGING HYPHEN
% 0x80
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
% 0x90
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcommaaccent
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
% 0xA0
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
% 0xB0
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcommaaccent
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
% 0xC0
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
% 0xD0
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/SS % Germandbls
% 0xE0
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
% 0xF0
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls % or /germandbls.alt
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfHrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def}
bind def

 /pgfVrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto }
bind def} bind def

 /pgfArgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1
add def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff
div 2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index
14 index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke
4 -1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1rgb{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRrgb} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2rgb{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfRrgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1
add def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def
/pgfcircy pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
8 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index
6 index sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff {
3 index 3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360
arc closepath stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll 4 index add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add
def /pgfcircy pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark
exch pop }bind def

 /pgfHcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 moveto dup 6 index lineto } bind def}
bind def

 /pgfVcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 exch moveto dup 6 index exch lineto
} bind def} bind def

 /pgfAcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 2 mul
1 add def 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff
div 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div
pgfheight 12 index 12 index 12 index 12 index 18 index pgfdiff { 4
index 4 index 4 index 4 index setcmykcolor pgfdir stroke 5 -1 roll
9 index add 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6
index add 5 -1 roll .5 sub } repeat mark 19 1 roll cleartomark exch
pop }bind def

 /pgfR1cmyk{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRcmyk} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2cmyk{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setcmykcolor
fill pop}bind def

 /pgfRcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 11 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 11 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 10 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
10 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 3 index
8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 11 index 11
index 11 index 11 index 17 index pgfdiff { 4 index 4 index 4 index
4 index setcmykcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6 index
add 5 -1 roll 5 index add 5 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep
add def /pgfcircy pgfcircy pgfystep add def } repeat mark 18 1 roll
cleartomark exch pop }bind def

 /pgfHgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 moveto dup 3 index lineto } bind def}
bind def

 /pgfVgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 exch moveto dup 3 index exch lineto
} bind def} bind def

 /pgfAgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 2 mul
1 add def dup 2 index sub pgfdiff div pgfheight 3 index 6 index pgfdiff
{ 1 index setgray pgfdir stroke exch 3 index add exch .5 sub } repeat
mark 7 1 roll cleartomark exch pop }bind def

 /pgfR1gray{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRgray} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2gray{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setgray
fill pop}bind def

 /pgfRgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 5 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 5 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 4 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
4 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
dup 2 index sub pgfdiff div 2 index 5 index pgfdiff { 1 index setgray
pgfcircx pgfcircy 2 index 0 360 arc closepath stroke exch 2 index add
exch .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy pgfcircy
pgfystep add def } repeat mark 6 1 roll cleartomark exch pop }bind
def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 58 /logicalnot put
dup 94 /logicaland put
dup 95 /logicalor put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70EB02A
60651FC2E263002D3986B7B20CC2AA08330B9FC2E26765CD52266969A86EE30E
71E0B41B6C1C6DA423D3A7E1553D2FAF26EF40DC183099322D362E4965695C52
9FC3E5BD7ABD743CDCB717DB10372A722A39CE53FABB454EADE2179C4CBFC016
A8E893C28EF549CA1692C8D8ADFC471DCCDE266FB4E97A1F3035801F3F034D44
A853F0B32C3E5AB84D5618B20A2368E6CCF24E6635AC36F5912FDE664856D62E
28396E049FB828C803F08478AD1234B6C2C63CFC94DF4E5AF882E2295BD47488
71D56AD975FB813DB707C050842150B70AA955E317A3FCA3B0BA35694B15ED52
0B660DE9099F8094842E57077EC40900B26E45211CA8FE7BB78358F8B086AD54
CB29B88954531452BB3C175AEE1518EA3F8F5C9BD51C4E7ACF4EF92081616AB7
B2CBB3083534E2973A770C591E5A4CAC9CACC6ECB604BC14D3E86A14AE8C6C88
6C3FA0911240A2D9972207D6E2A2A54665582CC4AFC97675ED1E3138583B7A06
F782AB86BC0AC32E54ADCEF8E93C5386103C201B969C155E1F5B6C6169D5F59E
EF1FA42CDCEC2B6AE0C41353055C3F2BC11F392B7ED7F430CF52E069F7EAEE23
D7CEE035B451CA2CF7731FB32A5FE5E6B2E315FB35F0D2287CD99813C1A6D918
F56834BB1E821CAFADE1E577E30105F08E1EC3E21B8885B2496D52155074F08D
CA7C9C2D2B3995A83C6DFA5D71CFA48B351DCC5FF116D5D309B5F86AE30A941E
C5D5F574E4B54AD2F6B279C5B2997BC4B832B242255F40E533F8A40DBE53D8DF
C58048786D80F356B7F37EC9954815768F05B2DCD643CF2362237C6A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 69 /E put
dup 78 /N put
dup 79 /O put
dup 84 /T put
dup 85 /U put
dup 88 /X put
dup 89 /Y put
dup 120 /x put
dup 121 /y put
dup 122 /z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A90AFBE22541B28C80755318
BB1862294F1A9E8FC624FF44D2694184CA17E43E2B7752B48A75DCFC69B0F51A
46583CBDDEF0D200200811E18B9A1ECB5C7FBBFC1A88E17F1444AD57F0B3F4AD
E8D0DCEB488DF225D047799EC5765A12BF14D0E86241AB753C32214F6A8B3B92
4B6F0B443F3A3F94CF0C7669ED9E365EDC2D5A99F18C212AB1A2987CA420946A
DDFEE44D42B77B7AB51FCADC6C3B6CD90EACD4E374E88B8B0E3C73A808B4D1BF
60A76C7A1780F130D25C3921E7119A7A7F653546E682A1244FB1BF950B287EEF
7770CE7E2F454F10AEC22E416648EFA48835532A86A69AB30829665A7CD18BA8
821E48802F50EAC6BD278E1BF03ED6A9736A7E8E8E6D7A9DC973319C4730E588
68D5718A215A4FAD6697FC4CC5D70EB295FE7727B67E5F4B3A91933D695DAF01
CE0E7DCE8CA45D87BAE06B7C374E18D132825BC2B8F31446348A2DB4DD77868C
F7C69464D5B84FC399BCEEBE854783AA7313CE16C12190FCF62183965CD6934F
DAF4A3B49C80D7B0BA151E940293EB05EB7374D3077D7D3227542996A5025B9F
B5DB9C3C2EAB2F322E45E8BE459AF250181EE19355A3FA6157E994F688C668CE
FCE54A14342B3386E183B225B1167F6599832639F5C8C8FC7D80F02DC345A2E7
E968924E74FFE67BAA981CFA0E8485293A46D050EA0B0EE54D0B881B79559742
1402882FDEA2EB95EAE2C3126CDC1BB2B78C0CD5E9C80BACA0CB11A370EA58BD
D4286466B5B2F5C9C7999CFE8879FB4A3E2E6C53DE42D8791706F19C5AA3F041
3A27DA4BBEDE45EF577F5B856CE903A428DD5DC92B4DCA543FF6792085621F02
EED266A461A9645C350123F00CC9DFC5B950A1999BC053C1A1D3F7DBF6F7BA14
76A7581A43E29BBD89A6EF5CC25F046F510A4E2E2C6CFEE4D44C5EE955FC9A2F
1B84ADCF898C5AA3B07DB8A2A7CE1BD7FB7323009F6437CB03554A5018E43496
2527C3D8A2C803F6EACAED15C7E9039ADD5FCFAD6B0EAB24C11B7027BF211005
67B18CF59E1809C967322AB328A9E8C036DDD82CB5DB6EA8D32FE967BB2ABBC9
CB2642A71A00CF7CFB9F066D9786E4DF6402D3F6ADAF712611613A832D6A342D
0B7D625D1A0D18CBB3412EF828F5BA17EE4DCD841F77F77720ACE22C99830326
C548D77EE4B474E974B808EFD6E3DE3967A8ECE00B69C5836CA4105A6F922D1B
FF0A0C8FC66B9C0608C61EA78A5745096371231AFEDFAA08284198A01A003C2F
7BD886513FCF5F3C9D81DD06E7FB57352D0114DE81F5762ADE506C2D0CD6AD21
ABD0E35C1FF5B4663AF7C7FC6C8520D5C08F129040122B04754DCC73D32E4D3E
391CC106CDF666E36437E5AF8DE54CB0E39FDFE49F765E6179C15A12264DF0FE
C0527362C494BE6CEF934434FB3D4BD5EAFDC96ED9A9FB363E9693831B0BB912
099BF578EA1D6C2C41434ECCC965B4046259E9B86CE8B63A07A7529D5FAAB26D
3268738719C3E9E0B842479AEC9F8D97DEB86AA7AACA1ACB6FD271DA20B37693
8EFFAC0C3880203FEB3D3A8FAEC4DA0E99A8CB5F40C0983EE5D4452B9E494CB8
DF0FE0896B2CCA828FF3597F5CE8FAA826CA7B0346D40B4ABCEE0F572B06A16E
1A322C577DB5485F4C10BB3A0FA0E6AA0418B6F9592017B6DEAAD2C70ACA3396
BB2521FFF1BC383B280523B70CC2FD1FDA490B2301BCC58847C7218A25910921
2CBB9A35E9799D7D9647F59E74383F8E664ADEF4F62BC0D196638517E238A72A
869EC58D78AA68EBB5631566B956C6437D1A4DF5BA77EF885342D60C2EEF3364
AE1BBF0E29A0D1A1D7FE4D0F8A41BB9B4F396FC6F8EFB8CF5B582F2ACD12C5CC
50D4C3C3C126B14484C16A38F63CE5EE94D038E712045177AC12CD0EC45332BD
2D97D9C280CF2DB0E24FBA308D1462DD0051CAAE49B1C3AE80F876B6EEF68A85
9068D0C136459F0BA378B03F6072691F7CAE8F5BC4F25AC7678067513FEC6EE9
2BE6710009E9ACC83A4E58B80B8D6A4702C7FAA09B59CD44F43BCB0A39E2E8D5
5DCAC1F130AC7E69D1D7DA0438147035DF742271C1B58B5FE8506CEE50D675FE
7409E963917C61170EA1E756E9305FA0E070498C8CCCE0911B41F70A61DA12A5
F909D8B48F020B3312AE24FF90EF224CC955252CB9236882453E7801D3B66F28
CB01C4BD0A6AEA93971D3BE0A11B251418FF8EC997077CD85B33A1FF5936D048
08AAEE807B1581D07B94712D00579E0020C3A5A4D5EAB29E5802181BD2E32EA8
196968BA2A21A9AB47A470C1797891548B58321E2525BAABBDE1111055B06FE2
FB6CE2268B7FA7614ABBBF6B98E0BFF2ADF6FA306C2F305D013489245F1F63B8
EC52726623A97C31CCD3370755FF9234424A5ABDC27B5C7942BD72DCCAD2DC1E
004459E51BB2338269FEDE65A7727A834D0C3B6B76A32D237AD7D35244F56357
EDACEE1093589C5CDE0198C3434D88F499594F7F64850BA2EC1A20F224A3A7DA
E159A2B2A66D6895DC3A80D3AE4473FCCF9EBF3D359D11565D41B4D3F52B4FD3
D05A6A2F2FFF5DE9E8CF3985F5F20880E697E65BA9750B64F2E97CB35C8DC08F
3B8591DDB03642BD65D6346655B19E7D4C05D6DF81FEA1B9AACBD80B787CB57F
C74E243A2D62C5CBE25863DD3184EF9652D7C493E76F78C1591FE08B34389F24
F7370B134CDFFF3F62CCA6BC8DB854D0457E15D7E4191B3D67A4CDFD9A5D91C4
229CD564DDD331F6E15F543BB0EBE2889EE60C740FF17548D9A02A887D4141CE
62631204BDB36BFC52D4604D5FC4F1E325B94CD22AA5048A5CF67464866B0653
2AEEE8146A7FC5BB61BDAC4D90D87A9A36B5C7A1A994EAE7FC0612BB5FFD20AC
F267CBFFEAE7E76429A85C154B544B92CBD0B544CE4B756FED20A039AF46A250
10C8F056F1B6412862C13D7007C6181A1CA5805BA0E099B7642FAE1F4301220F
2C0BE62E2A5421CA6FC32BD856E633DF4D492281BEF2FB2511A696B55B8D5AFA
CB5E047DAD44649B5C4EE45ED7DFE827C8DC32681CE85F6E4BA65EA61D862709
069E91B7012AE2B13AA909E791973D3114ED2B33085F3F6965B507EEBBB30C5D
B2A92910C6D7615BCEA0884853F2F8BE03DE6E61F5B3F7FCBB9B961D8FA2A8FB
471B33D39D7326F1201062C1503F9BDD697D5653104759BEA0F7D020BC64C0AC
C93EBDDF41482181805017EA57A55591920E4020012386E235C57C787D1D6696
DEFCA738F74E6A10C54D706D13AF8431A3A74C6C955115A5556DAD5025383F38
B5F904C1AEB5017FC786FBC10F96B7ADF0A910F701ECB3337DC1EA99A36D37A0
2C47D76EA8C9152C09E6407226AFD19196EECF84DDF47495C1EBC8DF6499C8A5
99115786C33D8EA402D0F266E9C9CD573CB4E1FAABB465F7BB9FA9F55FF832DA
D5ACDEE9E9F6D0832542D4E0205F6350CB4D93FA3897653951679A785D193A09
8CBC1B0666324C2E72CACD41BCC92E0E78272E792C8D6884BBFA2D4ADAB4366A
986D7792EBC2C1468DFE736CAEF0B76A091CECCD1CF9C60C1B38570FF5B6E69F
7C87060B162D1977249329A7A8A489F93030789963EF1CE602964FB5DE199502
B58FADCC04AFCA8246AD7BA7DEE303A63D627C8A11BE1BADFEABF90691C780A7
1A3D77F66B96AD715CB32CAAC4DB6197AE79090ED3FE006A1A4B5DF741B6E33B
452736E70AD33D5960FF7C616D83D03A08F9F160CC40E3BB18C32E955E3D3FAA
F5D4A700A260780BFECE96DFFF8502B8637FD26BBDA27DF08067BBB750D07570
943FC61B72A108FF759C319B0B0D0E1BA86856B69E00380308F4FF3757FFEAFF
4A66DCCA05B4921BA2F297D9511A8D5EC03B8B095B621A5FF44AE9A823C0DDB5
388C7AC7A8A81C15C822570739667341AC2A40FFD669A92404D9AD8F90E07043
67BAA7AA76F8697BB9C631274D6B73D4A0F170D315AB601FF0A1712FCA4D0ED1
ED85FAA8F7371B4ED19E3276496840BFD64509BD0090941CC31A0F3ADA6DAAED
249C04FCE0FD706FE3938BFB763FBFC1C01E419FCE3E4732CE908F6A3155A7DA
2A998A87768B944A7A6813485A81B298ED54EBBDCB893D63E6B08A302EE97587
D5B5D105110836945D56BDB6E08C4E51C8377CC67FE44D36D52351FC5ED0DD0C
512B7FAC3AB6A612EB6D2CB638F62B7173696797E2496DE182F7BD4923F19BA8
B9721D2C8C0A995B5D5C670A6A585786D283B724C93460EC8D2CC1017CE86748
2B3D6732158305BD2CC74CF9C61CDD8CA51C3EC3AEEA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 48 /zero put
dup 49 /one put
dup 61 /equal put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E0B5622DF6FC4BF52147208D9A91EB49B03BB40DE7F8FBFB566F251942C8FFB1
1DFA50465919400C21CE4724D12E4EB47AA5F392BA927329DBCA28A78FC1DF2E
6FF27F4E4E3F8971D7BCB5F3FBF8F30C214A26E5E32E0E8CBC71BF20AE573BBB
163DD66E89F2C4E2B1A1532AE81C060146F755A1ABA3F1365FEA30B403DE7B22
76F43ED9BDE504DFFEBE191911884CCF2161F669B6A718B30B1C61409942BBD0
89B189203DF7A3C3980D0E90481261913071F588EC1904BF9991746786C8E0D2
DD61A71643B014907F5E11F093FC7E9BB44D47A5D4F3BC7BC2F11752F6D461FD
4333B0A3A3288FF9415BBA7783C5A279D2D37438E3D206AD9E1F38D44E243DA0
0DAC1685FB4B9DAA46B37652045C11A72AD0B4BCC154A7371BA3F3A1359E4A05
866E15F28326428D23F5F3D2E908F41EFB9DFD3C6A111B745F1D6ACDE877D2C6
670B93D2BBA0848F12E66C342F92EBCDEB5552DDA71271E00A886BF78889E7DE
0C21556A6E9C98C55F6B5589668819E1FA50A2935FE849C1AF273B4F44007CE7
2F26A7F8A1D556269255AA61E39940AD229CD62DC9F75E117D261C8D5B2471F7
729DCD8188299589AF90DE2E50BFEACC54BF585D2620278849A2EEAA996F4CEC
105787AEFE13457B04A7CC69FCA63B229A83836FDCB573EAC8A732D354AB00C7
306B1829FA887B5996EEB2E487B9A6B386DBC287FE1759027B26895A1F612A71
079049F42C5C934DF2D2116AFCEC4B4639864A2D4E78DA15EBDEB7789AA0CABD
38B64B1E45ED8CC87295728DE9AB42212CAC9FD27F744FB356D21594FCD479B9
2E388614B519AB01766F8CF176463A06581241951D89BB626E79422EC174B667
F18452EB3BEECE6D2EEFEF42EE3D3CA0B4839636EE6A0CAD1552745B9D4900C9
E484E3131F2454B9C78BA2C1EB885BEDF191478EEA947F8A4620AFD427A0EEAD
BAAD0129D7AB9934BF6C2A3A6ED4C7EDD04882141D02A3BE5851C75A36A3C99D
8FB5EB31F66B7291373FE839CDEB1DF695BEA5C6AC19EF2A6EA3066B76372F78
36B76A3319CDD3D3F40D158890AE4A57813D51C6B501879F0B7581B307F13A37
29A0515A43DED53BFE802B65DC5A979249E48E15D1D8B28C6A309114B80B7DD6
7D24B2F4EA805547AB2874DB380935EC005548BE1A4B015BEAF216E71F359770
15C3C20CF1FB0396E0B70D64604B968F6AECFA24715CB3B5356607769EF4257E
860EE20AE29FBD8EF86BEE8D85C705CDDD285F7DD5518C3DE6FDB59E5BCD04BC
36110FD8B55A6251BD16E9B1F2158F74E788
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: SFBX1095
%!FontType1-1.0: SFBX1095 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecbx1095, tcbx1095, labx1095, lbbx1095, lcbx1095, rxbx1095.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Bold Extended) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Bold) def
end readonly def
/FontName /SFBX1095 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-227 -316 1723 930}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA0E2F461BA16EADB32842B6D00C76F8A3359BAB9
9CCDA63EAB4501FF88DF4CE0D9DC9F071B528726352196D1D889EC0F0512EAF1
A6ED201F5B8FD2B90DA9585F5B2004EC8159EB426405D76A85AA0ED1D29596CE
FFD55DB52BF5C0325EB43E789D2128DE66E59F9A7C84CFF09969406DA529C87E
3410723FAC317F161388C55FBDC43B850230989AD991ADA95B1CDDC4D978E722
8BEB4E338C3EC48106B4274FD9FFC7CF03EF238D8160A515EA93C009A8F2D3B0
1CB8041F5EB86F1D975BF4EDDED8B7D2C81B665124CB1562B71114FA44449C6C
4DDCBBD36BC95B0E569A5A6EA9219B151426165BFEAA914437CA89EF4B0F5911
AC054509BA0102D462A183A29DFC304DF74A289A052531CF1C505EB94CAF245C
33DEF613E4F1B785DEC94402A2C46B2DD4FAE5DD176985E45A03D85E442D7D77
A7586ECE67CC2360820AC46A8CA0DE0852F2F3F7ABC9D4FDE78321A4B63ED2B0
AE51F2F1CBFAEB6FE8142B4877BBE69FE6D4FEFAB7E5A8A4B22803992910064A
F998A0573C898D6EFC101CAE6E1FBEB97001A62893B76CDA3996BB92B7C2B8D8
F5C16CD2FBB4F8D9DDF27E66377E9BBA95CDFFFE02D05938F97D05AB348A74B9
1D39CA72320F8788593D99FE7CBBC69BE81D60CF58A584C366D2F5874A3CA93E
3D630E60D2D74E3CB14ABB6B38E8B409EF705FFD7B13420650A3E56C4B5AB090
6D15C8CD09CC2F8B32005F24D05B7E5EF52B8BA4F1C73CFB0A908D42CB6BB6E9
507EC5AF073CE78791C3DA714AA60198B87689F05EB1298F554671C81123C070
925E3F07DC46D862F6C874E548187A5EE7C6B713D5BF66A7CB3F258D2B99BC48
41EC9202C3D02C9A2CF71D52FB4D0EA9DF8BA01EB2D2192FBDE6EB1E0A7EC955
13D077AED82C96F3A8D32180720DA7474138F847B46D021414BCAD1629F0954C
CD7808E026A4B5D79809DA84748C1DD5A1EDB6AFA088E9C1122555CF98C46549
F30B5A62907162B395AFF56320A138B76191B06FEC97AE75953891B02DDF53DC
CBB20B24E56DBB752A5C0D7940CF7E3E521FD1777DA4A2638139FF78B960298D
1627E5DD2BE89CA00374E2708CC47EEB701A6D026C56A4B495AC3916730A33E3
F20BE70B1608FFD5E07D666781A583899A9E954CE4EDD9144793A659B499C192
207C1E52F523C2D6CF26F77B1BFB04A74E32536B7C6632BEFE3B123CA985B721
3FB2CDA7BBAD5C07718689DF3C569C8BCFC0F8BC5E075CD64CD6230EFBA46127
656070359652536BC1176EF4EFCCADBDDA29266D238C0E7C800DB0E22BF8000F
D3DAF9A8B70334512ED37A8812D914FEE39E343EB23944236E5288CDD4B8D323
578F80BA1F68DBB0644DB800ECDFEE43E42D956605142993345431B9FF2E3660
D108DA86E2117BCEDEC347C04D58988D00402DF8794B1D73940EF5CDA5F711EA
0BE543BAACDEE7682FAE1239CBB0BCC0D1B9351FC2667B316184CA25DB43961A
A1C22EBBF71D328B75CA05456A731F177F6F99EEB4BAAC06004DF835495ED5A4
9C49FCD5B1F03444A2D651AA5DB383E3747179FD54E0955DF11800F8D76645E6
A7C09AB7C7CD9922E8788E3B508D7F77C8C341A1FB529EE1252A1158C125100A
5B42A2E400A501580CAF3C9BC9C74EE0BC48854DF648EF2A0C6AFBC2499BEBE2
613232E4866B0F82F15A18E9324C7A1B5C7DC8375A1D2E8D121894EDA87B3A96
3922A29E00BE8334ABE712B0C3B23708AFBB897F101BB80A110DDF7E4E761488
03E20DD866B8AE8BF3ABA756B9D8DD0E3B5E495E3070FEDE72BBAFD87A45386F
9DC59839783DB864303DE8C85969BE5AC5245A0270CD53E72377D6B86CBA8331
76323D1EA2402B20E1C4E68C55F1C6CE31AEFE7C8215D7503417B29FD16BBC2E
221724547E764D44F5A021DE5973BDFD4B0EC4B5A6D5DB3CC8716D1EB0AECCFC
E96209BEAA676650FF0DBCD65A89DB5513B266D00F71935DED5AF2E670850928
D9E6A69CDA5E108DFE5DE022D24C8DA18BEC0A790ED8BD50E7E77F002F99E34C
64E6BF6959B6E245417A3CCD30C9B8053D310B4D8FAD6185729F7C3CCEE8A9DE
3EB39D72E9C776AC7EE344A718174809E3C057C10FDA8B73C48A1AE933CD7D3D
2C7AC2D5BDDB2548C637EDDDBB242E8DC921CFE8851CD927C5AB6220E7A9E2E1
F20A66019777719D6D13084BC8BED1ABE47EA36D0F5282F33311497AC69F71C6
3F014D07370671C52CEA8A5E53198522C434869A0C67906B55C46E56F8C53790
FC92D2D39862E3081AFB5C0BDE232A458F3E2A5F38E7A3A97D8A6EEF387C9FD4
AACCC343705FC9CC20609255F68F76666D9D4647002BAE0876BCD353CDA8353F
F24A48188ED97C54815465EB7CF6955084AA74B9E8459ABFA31A96A177DE5AA0
0C9854DB2D25E958FD56FCE76D0DEB67A47A2DFC20F2318C9F6FDDFE21C2CF81
2CED3B67F6B17546BACB6631A51EA218C8811C7A73FE4972A46F1CD9A89D9F64
ABA4B585A674CA2D5F3B0CB9D33D6AD3777D15E08308220151CC188E305B068C
11A8020D1A155FCB44FD22631BF2BB54874F6206780CCDF810419D871BD38ACC
4F2B176F782DABE3FF8C270633416DB2A3FACC4D1D421713135FD84718A13369
0E6269475B5E4B670FABF83F454E745574255A02CD28BA9E87AD4906113E333C
0DA452A3DA5FF5956B7894282521184959AD0C62899B0F39A7FE182D41791D9F
8C15AA8B375B3C445C6EFF1AA44EECFBDB8B9ACF11B6ADE903BDBD785DF0512B
2EF428A2923A91B2F776C70FEC7B1820C42A1078409AD56FE7191150FA4EE319
9E1639DDEDF5009220307515D435D6C96525499878512081F6476908143AF972
D01AF68AEFEF88D1751277DC2375A00879FD53B5A5940CB164DDED8DDA5AFC2D
3320A0166FEC6E9E500E44B3468D3E58D3AEF073F915B09D50024431F434A997
054D54B577FA2710E4022EB472936F3E24209D9E6A447F721A58A30943FE5EEC
AA15C820F3CF26287CCDB8DB70D6E294829E5822EFA3CF691AD1ED5847268061
AD16F7F6D3F8E8A7C544C9CBA08ADD68687722ED09D8D493CB7462632EBC6625
3B17F68988D2949A3FEBB91DC7B8E22B58FD4108A0203C995E7B4F9D7D81284A
04229D58A68077CE35CF5732C36B85EFFAD8FD1D0104BB5E3A0C72D3720EA5BF
74DD710936055C837B3F273F35AC01347C3048B1CF36C21F68CD19BA8FC48F2B
46FAE9888AE49D1AED7234137CCCEA60F44257AC73B3EDC9D29D6ED4F1646CD2
1FF720FA841F4D27BD543CD05F1762444C5657B0E0A4D5D7F55D2DBA80DC9EAE
70FDCCE63E0DCE037A31C0021332427E3BF24E85C37D24D7882EB6EB0DF241E2
492BC07C0C82B62072C8C9C1F2D315C1EDF38051D6AB46ABCAEFD6021E95672E
290117C783D9EBA7330BFCA90F4191412E914601F84AACA19D83AF6D4E7D65F3
4DCE4CF00B5229B48F37785255335C140C138B253B054860006E97993B339410
D2AF46B68E8E97CCA8A8808C3332D235AC8D304F409639BBC93984589AA53F59
7602AE501A231D325357A24634E1A4969987579E8A918DC988A276E12E9C66C7
C03364C7CCADC3CD919C54DEDA6D8B01486DCDF6DCF422D7232E750F77EE8B0D
CE7A359181A1FEA912BC5C18909002301CF49BA62B3BE26231989B5818C07E23
BB2FD0BB9038853535FD7F2C680F5762B8ACF4B3B3E94812780E1B212447E24A
B2022B6797879572F03455C7DA5B0D8F5268C9A28B0C45D1BA054D289504F8A1
604E2276DA7E2DFED9462C432082905E2C7B46AF959F7E508B03DE5F19286CE1
14D9C4DC0B7EA72FB1A18C031A30064166A4991D8D6857B1565FE02E26E160FA
7C6E5D99D0D78D814B058ABCF56F5F20D198DBAE9190FA53F3E9D5D12E3979C2
7A40CE152BD28585356BE260790E2A16A6BA2F10874A306A94C0AF48A2920159
3B6941856986C1341AB0F1FC68DCCF67E305E361081D9E0C55ACDBDE40B8532A
9122B6B0FDE5BD56C9529B335533F701659834A4CC19BBE183CE75C4931027AE
CEDCFF8DD45920BC26151D66893E312892B18CC5189BF6750AEDE178573BE31F
459D996A2871A0C3B47D6ADB79D5639E1A751300AB9F9352E8D8389F9B6E101B
EBA45699E4BB7660CF13AD9323100BB6E1554051AC3CCB3B6F4C3286B43A188C
FEA5FDEE7BEA9D73FB4633763D58F69256AF9C71BE0E35A3B84D85C7FFC77EE6
E5274D2E530967829B3566BD96891F3FBCFD7687545C6C31B2FF05CF35E3D2F9
083FD897A05D27FAF12A603AA2DF73E8E4F7D886D4AFB452F899DB9FE842BAC4
FEC6043B486ABB297CE10CDB05214876EB600A5F4547AEA62626C76849D332FB
06D2A73DAD66BF504CEF900F16887B43D2870DD4B717431E2DCA73C63CB7853D
64D2ABF12C1B30E2B57666B1B5689B98EB0172322568E97B7BB0F9A0AAE6AB50
397BA7ED8D0235C791D6705D71F0858397D21C9D93FA20B2E941FE5C14FD2F78
535618FD4CC4B79A65A3B693B5C418637FA6EB388B751A405EA5A322D80EDA1C
252519066B3A0DFB3F10EA1B4F0CD1F449BE38450DE1D7C39D9CE435F463E796
40813F880A3FC02FC612033F9A9949B69AC94FEC2153BF0B8F5ABADF08CD5BFF
5CEE51F46556D23F6931E59857CB05AFCD7C191924385EA9A0A17FD84901AA67
2AF7541A97AC4E22E4FC723C89352F1E44163CE39D6CC4DB92A9C50A3A22698E
9DEA1CE3D6935BC53622A68615B1B71F65B855F8B5872A25B48DFF04BEE87E77
01BF048D62CEF6EC64AEF600DE5A75B2A80ED0342D7C36154C2DBF592B0D5A6D
CFC1EFC9C962A68147DBB767BAFE3000CEB19548D2BD074A086ED439FE6AEAF0
DCABFC781CB2811E41A533DF4DB3F1AEDE14027B0AED15020072C76100F30AEC
9F84A4CA17F3C690C6272AF549BFB8AA5249D030545CB08AB72FCF932EDFD898
326D4DD8BFEE79FE657C508B0076DF179AFC30C217896BA7187757D085229CD7
C5D1FAC3D7D20C2868774C5A8B06545FE267BCD28582DAA4518E446B176D90DC
C693389526C5D28CE5E1D8DC83234D4E4209DD06CC7D6EC14744E89AD882A08C
578549FF71180A1334E1F531980A1EC4E9BBD2C410EA1514630412143D23D520
CD0A5FE74E64961357B970B21DDD1DCBB579D9636B6281387E6AEF3501FD9CC9
C4B87E5D51D713CC67DAA603E9E2CDBEA638C8523016DD6362F119A58996645A
84FAABB61775170FB57B1D2474108C0E2EDCE1A33E7CFFC2FCDAB714E15F0BDC
ECB475EB9F63DAF08C1C16A1E88AD11B3706DEA9C0BB508DBCDA407B3C731B2D
A066BFA47B7F4816D0568CFE3D6FFC05B8737546E24AE249AB4C865B2AF89C0C
EDFC8C87B8B206C51F9B36DEA2BCE9E77BED1FFA8ECE2D4C27342EF751F4FC23
E317C8D6B92B55DEE274A3BEEC8A716507690C61F181C0C798C1E0B99711F398
2180C732498DA1607E7C413077408FEA5231FC9E4037BE6750E166F80E5F6346
335F25129DC24966DAF5A2346F9A9129A645176E1413571323EC7D29415BBC3E
904AB4DC1611DBEF68728FE3268CF65119A1C563F00FB88D12CFC141D2FD68C1
6252824E10F5F3AB39EC69F641E1268F3F77839E60753AFBE1C007F38A2CB888
BC6EE9E1172E84955B590C7CC0102C6B40CB11780D7615849FA8B3641E35A000
056C5FA29492AEF376A4A160238CF4A1A1DBAC57A0FD8C1AAD0A95DE4DC41C5C
D10971691D476A87F0F2C6B5D27A5D3EECD4B3E5A4D5A85475EBD8F6CC5AFEBD
2072C56DE312E4D4B371E6B3792346F010FEB8DC1DD9BE8F5906465A49E963B3
FEEDA37F2FEBBE5C51EE6F2D1A1E6A162FA0CE693B00BF126C35FB523B345EC9
7AB5684F331DD8D6E8FF30B192EC0552A31A46FD5F2FEC3569F2B22532C617DE
C6A7DAFD44C996F922FBE34743B3DE5124EA15EDCBCCDF3FA4F75DC7D42DA217
571405F1C074D4F165A740418B1B8F7F4C4DF00F8A3AF8A9632C32DDC6DEB9EB
95C997AB46AB2F000A9CD306A51E703FC26DF2955F172225EE93EE408696810A
B774A568EE2C346E420C86AE6F685D976CBE473AE51BDCA467633981828ECB2E
1736D55A53F94F734BBCBE96D74CD18B540AE4A17AC2985AAC4291517EA4B3FE
9805717DFFB41EA37BFD5C745B774D8799B1B81FCAE106241C80A1E685100824
A14D0DDF55D2C9BDCEBDDE3E21FC9FD8DDBE0393E6BAB754882E2D3F9095D5FE
2EC20FF292AB8D5237009C7C55C4A8621B964362440E39D8F89D3F849A9FC910
E7728D8819B943897FBB5314868323AA71613301D6A4D4242AC8B220CB8129B8
BD15FC3CFD65308917C5B58933C514859212CCFFF5A79D1CFF7C1576F6D871B9
FC3FBF06EF866BDC207B74E61C465895C78DDDD8219B747303C1A833B8389B6D
2AE3E92B8BC11E2057402F9448FC97E15C182248150100C4A79BE1248205503E
DACA8BF882BAA1EA4D1C30B41004467F35927725ECBCEF72D69515D92BCFCE00
C62D806677B77D44A4022CA7C472928B861632A8E5E8EE4806567155154AD303
003D6729281BE87107A6585D70E748B5BE08CF2A5BD7021EA6912292040D36D6
98735B311A3A8E7B5027769EB5912BC01221F7E0CDA18AF31522A66B8E9D7F2F
D3D3F43B63C4F43AC1C08A2B50C3C786D15DD2581B13534D97387332FD80A214
3ABDFA4A73702F4FE9EDCD8F47DDDB8C1FD5D6A3AA4917F2630F2877F347295D
3323B962B29E516AA62C9C96CC5153167BA36C34DA3D841B0C346BB0D68C5084
966C420281CC6EA1599770A3D5AB518D28F78E986C463E9958BFD22A0079262B
63A73183E5AF591336898EFCD10C835D7824BBFA5D23040315E45F1353E73105
E38EB71D2D572C4A9DEC866883E78C9E73AD3B89FECB4B38C292590AF5861B23
0B8458451110F672C0DA902F04027970FE0A167003FA4330A1C9DCB85AC0B31D
21CAE556AB053BA44CFAA7C2B3700B3B3780CE5F223D6895E2831719E406925A
D428839BB0EFF6084DADE6B075A4A67279AC40D5E84ECF00349524FDB6432A4E
3240957A1B58EE2963E6E071C5235DFFE1274C11555E00B42997A6ED1313257E
D0B8AFBEFD9D51E4DCB1ECF8894A559119CE1097DDBFD7445EC8E4CB8875F649
25BC7CEC1E54A639DBE7B9DC26981C38CCCFDB8AA9CDA6516BC36E379F68030C
D7EA9F222E44FE2E6A8B1E5251F4F46AF28A864F5223072B4CCCEAA8C4024E87
FBDC3B872ADB914D50642DBF74FBDF74363D21A521E54CE35F1D1809F3CABA74
8DD0B4122D313D0DB956239486A2278F008DD8CCFDD23B312FA1B580CB3BC380
F8A3E7F3DFE1E220324111FF3BA0C2BE89249F09E32CAEECF607FE14DBB01D5F
186B2AC006C996DECB377148ACE4BC2D3D657658D4BA44541694B2DBB0A4E923
DBB843CAF3638038F1EB47DB5B721F3548B3D449E96C73FBF6020D4FFA4EA932
6276924D0A6D9BF5E38DB3E591664F1BA50A9FB197087181511C1D64DD9A371F
8A84FFF134B5597F3A1A4E31C44E1C11045BFC32D861922190785724FD36A145
2B23CC7DC03A7D5F3595F6D150F35E902FD0BB89B5E469FDBC4831EA01A7D3F5
F3BFA3A6C028AE06949B826C34541F565B71241DC67E1841B1A3A8C57A87B36D
08DE72D60677BE043062C88CD8FF8DF8513A4D1622A50F3EC4587F197C1A3A1C
F792C3ECAF90F766EE2D181B4B33127E9922703EE577E6EF13635A4000F8F4F6
193F987AD08D6267A27072FDB14C78148EDC147BA241F2BBB109A3767BCBF9AB
662F5C5988EDBC8F94FE6942AF06A3B25F02D3C2265294A4DB1DC77E3DE5996B
98B31C7C67DBB93FA437ADB164A2C5688E64955E10F3408C7E6DA81581D5D792
D89373203755E9340685DAB8BBF0D3A7FE8518F96DB9F031C0C7F8472505CA4C
DF92862697C872A164BE4A90B68DEE20F853903F755911A900FED79176B45535
85D71151E749A6A8D05345834D53FAFD62883ECCBABAB7C0AB88D400A2C37A5C
50F0FCEB58755CBBC07BA2477251EC81CF8ED9E65D60FD9BEFD2D0497A8FF4BA
8BE06528D3573775794DEFAC69501F1DB6EEED999020B01CD2F176ACB3B40C2A
D53E973B665F73F8A8842787A468FA39B095576ABBFB71015C6759AD2454456C
6920FB1DE3F3AAAF297BF686F26E3CF2852AD0574BFF86F8D76D82B93956C032
CD7D3C7C2FEBA84B2E70FBC38D6D3AA58780190F135E092EAD95A88EE50963EE
DF585D54BBF8567DB730B7828D979B5929BC6C34FAC4077B6E8EFE9F6BAD4E45
1684867B3B384331E8FFF2BC84A46FC5DCA7B74E64CF75F70F6C556188E100DF
2695D516A94163E286B22BEF92C31ECAEE48C00A820F6751D9EF2210E1AF43C5
96E74B0F52B7C9720E9ED02B5BAB79F38B2550EB931E0A1E0F2E0F120015F675
C71908F2165D29FE0A5CF148A20097693B151851BEF6E7F500D579F052CE26A5
4BEA1C14901BA4583C6870EE9E4D5B2FC4383F60EBDFE9ADA5787816A38973CF
4CDF67938A2E2A59F8B16403020E8CBC71BF20BF2C90BD52FDDBBA62374BF35F
9666BF2EF503F7FAACEEBFBC1EF383ED675B468DC39E12D51E64D053409ED44A
232B3192CFE266519A603C86207EE7071E0D2C81AA5DCE6130544FC24F5C75B7
182BF827B164432DB7750D2C8B4E500D7D00A94B1DC4478067DDA85607684530
F25001444418493C3E0099341904F370ED0F1005FB16A244008381D25DAC61AA
4FD6DAC0A4DA6CF1EDD53C5C48385F77DFCD02B9E0D20479E04DC0D62F89E4B8
974BE5945F8A7EC1F7A81906803D13354657CC787466CB6229130061A6581A4A
930ECA39B970DB7C6032F887E36190EE2F377343D92FB949E0B4303966A80242
1482A6A8C53B317707A5D7E880C44EC9A7A1A575A8D1ACE018834FB2F6C202F1
33D2A002185329AB926EFD4C397ACFB134D0A2811985A92841BBD7F75D5DB0B0
844D53C5BD291FB18C709972165913CD1AB9F1CC61D20C4326B123174909431D
CB3105E95CB82BE849AF7C39771687A4BC7BB2FB2F403BEA03F0F5F9F766F2D6
7CB10682F8DC836C8BA586832FFD2F70E8F9F3EB231547157885B0645E75E990
354A20B5A96530F1465011E28DA7A4171E9873A3BFD7DBF11307E009010A344D
1AE6F193BD3653636BB34CEF63714CEAD4C49A3F8F9FAB430FF2E48916D9E3EE
4933EBFB940869A8EEF0F4130A40AED3AF1DE2769DBE547A209F91A5D2DF0778
1C54416E7F381F36DFEB6612EF33A54D2134089886E1222296FC215D44167566
77B69593FFF12CAABF0D8DF26A74F7A8D5A62E88786077B2CDCD69E17EA619C3
281F49B6CFD3073D2FDE032E484FC2CA805A8ECC0462C6E5D4148A1651E46B86
F75FE172D9B08A9D2DACA4147BB87D81B3CA5B558C2CC46CB9AD42A34061F34F
83855C0832ED8BB995643DF25DD9EC643B948962518988C9DB40C6B1CF575CF4
FC73C22B27A4CA38A6CAC16CD5DD1F0D91866052BFDF3E7C73B00DE97F930AD0
823F94B24BBA596E7F84AA9183CA4FC86EC15CFA7AF146B60F049863F4371F26
5431C610CBF3ED2F86907A14A8040363C68AB009807C4F5749EECE2BA7DA0F9B
0E8CB66D7E1BEC0AB78AC6C6AB77CA6C7C01D8191503E232DEB91F953343D5DB
7BCA8B963DB12AC04CF58ED84FB32709CC52DC95DA1C4F219EFD5D0C2FF4BBDB
2F7C45F369D50D3404E63A97CA496B49A2E46D8328A6249F91FAD173E21ED3A0
5C0EA432E0607434E9462CA6CE1CC41034FF9DDD7C0D2DD94BD56283F7CB4A9D
E41EB9F482ECA58A23C758E8782877E9589D9AAF82C4663846879F70D8AAC4DC
A63644E536EC77A07E3B4947CF42873A113116359FA58D44489FDC56B39D8EAB
AE1329E588AD8CD668493D56E9EA6718CCC099B72B68B37C97E610E57CA8A32E
854275497E30AC3F2D05C451564B807FEDCDB07B9796DA58756FA0D72F2CBA13
ACB96FA7D67EDE445845E8891E0BA85F3C572CE34885BBB243337FBB5D720CDB
1AF0F600D6D8FB2A5FB0D606BDFE812F0A4B6773B72CE7D2332731F4B3F7EF5B
111006A0017EF1CD624C0B89FE857A8AD5CECA2585F19D496D07FD3C487D200B
F30403E104F4E3AC4A2D70EA0209E3747D35FB85DCE6543264BA2D16130E059A
2440412E36264194DC520D599788A86F9096A0F39C297A1D7D93DA3B42F8B404
028E03377F7D1E890F4183805777A0068B3D4FA78D1B165EAD25B737D2E4EEFD
5AF3706980A3B9650D6DD027202A332722275A82F8AE601E817965E92D3E1388
EC3823D030DD8DF654301148D35D3BA6CDAC437904457D26847769D6DFE32B09
C11C50D814F5CF52E3FB1EA1379E99A8D62943E3C6BB27B725D220C7917388F8
7B53FC830929423A18AF3378762504B6A80CE04D553812A64548721482503D5D
490F59B426A832F3901E0BB7413FD5E2288A92DB2725227C644915001C2866A5
43C8BAE49C579C5508BE836257E746FA0487DC192281D348B45976141532ED6E
5B8E62CCBCADEF435169CB6BD356B6362B727DBD281AC34015C7FAD3B6EF9EE0
EABE29E490A1379E41F86001CA4EA354E74DBBE94CAC3E8743553284DF72563F
825ED1D5BAFB1ACF918D473EA5C886E6D2124C797AC525432F90680DA39FAB8F
656C700AFD46F3601349ED825C304C2950E90E84C0A3967D8DDA377CE17843EF
02AB330A60B7B993DA081DC8731FED870FA38042BF9AD232D663BE4CEC9B358D
EB8C2DDF32FCB0EDEB70D4F7E864FA720B0A10BB20BEBA9AD6C126A72ADC4D9B
A55E06F748F324054A0E4AEDA7834BE5956FA225F6C3C9BCDF11B5B83876B8DC
19F4DC5B5AD43DD5CA96475CC6DFC997B78F9C55102BBEC8D19356E152E04F4D
FD7397BB8926CFEE52B8316EAAFD48E2568377D3C62F97D4DD60FA9FCAE24E52
1A61D6A0273F968720C66A524B37D72D32E9740AC984002AE071E874047B1DB8
7FFCFBA03FB3E43931145230E0925CE7C938B458C45A915B41C526D439B0C02B
F8F2605A156F109C74B68A8A36097C3C61415D712A9B07EDE637DBBD14C1B16F
F1652A633744ABFED58E96F03EC98881870532BDBD9FE993C90728B12A495016
385BA6A4CF3FD8B389526B0192B13E7FDA878EC802B59733A871E3F0B4BC303B
E4EB45D64D88A870B9935FBA7CFC2154A14CE86F913D6ACD406A2E9041682E2C
5242DDA1816396CC5B0D2B9FF03C4DEC14746DEE4E185C873186862E2B848A6F
7FF06CB83BC05104CE94A693DCD7FCA7EA73E1ED15C00678AE0F46A40361DD9D
E4D68A8BC80DCF67EF492E6C30104F2BBB24CD54FA258B1F241E808B10A3A416
50C7A87BF1B8E93FA21C3D47F2A494C1BC72EA59EA0C7514AF9FC00A71DA032B
A85036B11511FC5467BE5A8411660B1B99FC93B1E95328D3083DEAE426AFAECA
83602B05915CA5FE986AE1FFD6B8CED1204462682E89D7C9A8DD9089AFB88B1E
FD70414E57D4042F81CDC0EFFFD57A85B2B67572E3127923E0843CB3324C0B2D
D09A48086B40676990E4B52975AE8CE3209B92C239C0E8018952C7AE3F0134DD
3C806999FAC520ED99A44E683AA3563662CFE34BEDB87C87E777668D5E10B5AC
D3A402CB68C94A5E1E3F43B162A9EB1409B5A4F0983D0AE0E79FADFCBE930FE5
4A8E67B9818E81755DE0C72567F580998F9E08DF9761578A8005EB129D85B622
808537744BD9F99A16E00369D49D47FD0DAC92EEBB2367F770E4D59691C2AAFA
C725E4FB6E07D5C1C86F76E5366CFE5113E899AA0F1EB35A60D0085988AC44FE
F4946A1C8EA440CD67156FCBD792BF8C170B86B8EA949989491D87D091FC8F00
B52C0BF8E15EF7FB0206DFC6497AA9788E48DDDF1DE0C00964E1E28AF6DB1E41
93D0526C198FC570C89C3E20951676E403C2646CE8837EEE36EA9D19FABD55B8
DABDB349F0E346EE3163EC34C3F7364CDC26EB01EC29BF764E686280438FFB1C
693FE74662FBA143242CCE50B8DBD44016C3D8B53BAE45F76EC3E7DD3EA41041
56A84F30D6FD92B868DE43BAE6A0FEB3FF04F3FFA2A7BC6044D828C6A06D1EB3
4AC069FFBE81974FB5AEF2F5E32858E7412D0F131CCE864707BC4A88DAEF04B2
0041F7B8A1A5578D43E92CAA28AB52F38357AEF4D7A7376FA53AA9EFF498186E
A04C93FF2897D51562C94A7E807A2804A0D0CB707BDD1DA502ED7CC84A121E3F
625CE4895B52328AC1739D3BD24572288EBCB368F533359B651D485E248D3076
DFF27A27D792849CBFE02D3C61ED7803216C935A67EA70BF2A427A048A8A60D0
91A4B97FCE0FDB372E81360F60B0AF1B1FF2742C7374D3EAF8B61656CDB76C90
23758C00B420BA10FC0D812FDFA0AFBD12B5E8DFF55E228F39837160B8003758
48797EFBD0D6D60362931D11FE024E9214BE88E82C3EA33A5DDC81AD7EC78DB2
898E52F2294D9069ABE9F7BC995ABB2808F1DA69F27F01B25F6952722D21FB55
CD14C6BD615BDCBF3B5ECBC76C37EE0B929E88E8CBCA8CDEFF0EC46070D67CCA
E5BD42F4A038400F81FE0DBC7D320D32ADC1F1499255C3817A3B0F0EA24576AA
553BC5694CAB36A71F730CEA3CF018366C8E4BFC0B351AB04308D8BC9DAF2CC4
E34AF1B227F9FEF489B011BF6B8EB19EDC659C1F995B88B2024A55A408C9BD1D
D01F812457EBDA205661C2CD4289E29F2416613E1ACEA0B20D18F3C5AC2AE6DB
4A6211CC942900263F23EF1F43BF734B16AB45A2B8E949632D0959DED9238F67
6A2E5FA085F251A3214F791D6C9EC82CF99AA9868EAB140DA8B73B7D287A8888
42A84F44E072E3889405271E4AD405033F4332E61F3DBA32B7ADF942BA95135C
08ED14956234C19F74DD63F1EC15387D44FB96C3FD5C307A7C855D70A4F7ACEB
F0C8E659D4C6BDA43FCFAA45ABDF971C4858BB10D38C78F05D9A41033AC9C8FB
47ED25A9BD93D2038D94BB4C7EF42E82E20837D90EE0F77297F12D702635C06E
9F4DE3A411C6D859441AD69F4B470A371F9133C5F44E0739678FDDD206F47858
F170E175C64DE59E00E9253C9B160D225AB06E0563D1FEADC1107CCC5D0A0B2E
0FCF57185870FD4435859E7D3F30AD895A17515AEB8F85312C1F9DE8E8A6E81C
073AD4F3E03B33CCB7B380A6FAC9A2EA4F990890C98DDF4AF99C847E91864D2F
60C1E939CEB202F8433573423F67EC29881BD4C7DE97FFA180720F2C4FAD37B6
DC6D77D0BDB06C9CA1CA9C87603B19F9797120E085C7CFD4C65B4F46A0E619D7
23879545E24B979DB7A5A1C15696A24DBA88565D0625DBBC9A1CFB9F05F38F54
489F9B8F29AF2CE3B41664887DC30B2EC37720B714926AC28EE58208E43154E8
6951DEDC46EEE37D978E5B0B9CD5B63E143A93AF46D470472C11D6E3C39A5275
401296389FF7C7F829E02260E58A7292A4DE18F2A59498FBDB71B1CB3F6FFF8E
B5F639DFE4F198CF3E4A5FD31C817A7836AB9E689732400EDAD7906328F7CBBF
38C5C16521E714151D4C394EAC35534343E3827F986FB12FA3DBBFD9D3BA5387
3F7E4A94C98B50D44C70D7813592DE9E39567BD0521DD6E3360CB61156981495
CA4134A0613E40308DCA77EEBED273B1E8BCF3A56D06FBC650A7A953C5D686C7
79DBA114B1C32C9731ED9D8E06A67C93CE09EB4D6B19C51800E07CB124935D13
DB39D5776176204AFF41F6E6868BA4CBD359B870D40067F132C3D318B56D1FDF
FD8E22C885D969CD18C61CAC9535C1D1515EC24930A44C90A8074A360987BE09
D2D5E9B7BFA63949C6C3F6ACDB5B52BBEC5D304B11B5017B4E7CB7ACCDDA8AFE
804D4138FCA28996D15A7E9550D55D4477453BCCD00AD66AC16E7DE74F4DA0DC
C6485FE2475C8B063396975CB0B0493E6294AD3D41AD5881E18C2DAEC0960622
8CF92559B0BB1FCE5D4EB1EE731847FD050AF0DAF3FFB25C2DD44BBE7C8DC3AF
7E29501C77CE3018C2AB4C14832705F37B72557A6FB3D15F92481B19B12FE97D
91C11AE3C262A205ACE4343ADDB2E667774D3E27D16964F9AFCBF5013E430C63
6119506F3AB94FDAA26ABD7C363D21A521E54CE35F1D1809F3CABD9954217A32
2DEBAA660AA76761B22CE4DB4D91549C56A3D8AE8E55606CA677643FBA8E35DE
3B534D1676FAF8121DF0C1C992AA3A854A399D527D135E52C9CF6A6877852C60
F60AC68E7C2F44BCEDE581DD1A51008F3D6CC3267169C712DB35663B90EE6AD3
79006F43B5508FAA2DCDB718451BC85FA16D958E6856F897802E6EA2B8FF85A5
0F8D5D0DDE1CBD7460D56A85905E21C8A8A460257420970DB2970A5E5215C4BC
E45B8AF57A68EC44C18A6699AB2F31A131A368625BC3F29FB76BFBD44713BF60
B3E0A4BB6F867410DDDB927F5086E3AD402ABF2200B8BD78FD4B00DA83A4CC00
B5599C789179FC8C2F1BE4F3B7139F4118DCAF66122179EBEC0DAC1AADA46377
4FBA5BDB44B28010A220C14623F613C4265D636CA5ECF506F91456A0F1BBC70F
A76CC61385772FDDF949767E24A4407BF6792C4576D24A193B419347CEF6C5C5
0274B4B1C7E6A48D18DE6EE6DF08B6DF733A417209BE2E55EAFBD3CB9D977DD0
3FB1EDC9CA8BF4753FF8D45BBA58798B730EC2F970D705E23296F33C16CBFF95
DBC72BA1ED1DECFC58176C03CB5FB8E99A5771D2D7E3DB61E3EA1489C57E4591
4E034EADBB15A332D6E391D05D8C07BE1EFD120C7D45D3191F24BB9596C01220
9F0D6AAA9B5747427C7FBFC35B6FA607853F78F5DDA890A1443724A2ED29D4C4
A28B45CC81CC39BF34CC4BD0C53F5B9CC9E1F577A89FD9E37BD74A474513BD66
C14903207B141B429C1F47687FFB9A1EC328513414FCC3176799F7AB2F2AB38D
60E6B246FC976534FCD1238628ED3A25E7C5F11D52AE8B28CA4D2604E4824D6E
C2C87FD59BF4A2992CA44D9136AD587546AC8B36479DF26E8A07C758EF5A2070
5436FE0658EE9CA27A8E7257A41D564457C768BBA808890ECB5908497EE17157
F1015F0B21F93B115D445AE748C8B19D9090F253F180F55C89355A821B4F9EFC
2F6EB2D290A75F015150434EF294D91DE3F5E2AAD67F3524A1C6FE77C016E5E9
2E428331985C3A792AA3B8CC628570463720137E0BCE9FB544638888E512ED42
BD11916D8A8FD081322DEB995A3F3ACADBAA43C12B1AB20ACD452F67318FABE1
4467AECF5D8EFDC17112CE224DFC4765BC793759E6BC7093B5DE28C73FDDDBA7
01141598F8EBF92D7FDA447D098DF4E77B8A63E3BF73443A13C2BF44F28E9A6E
BCC448FDC45A9E101E175583790C245396EC83A61C715C732D1AE10A6D116DCA
10297C975CA531A5D7C67C43EF4F6E51B23E244C0E7A0CE56429C3503310B172
21420768D115F62427531EA5AF277C6533D90C6DD58AFA47A599EFBC4A92EDA6
F7C00E4A85F1D44B7C1C08FAE250CAA9B37E4CED0D9D9024CFF94634679D5B6D
7B6D40B5C19BF9571771DC8C76A8F0735108AD2CFEA476B696D32957BA9610AB
81CC2BE81895323E2ACFE54AC457D222E12E5C340D392D39AD11EBF80D988B01
8FD0C8F1BBAAA22E6473D32E10AB3F1145725149B92072C8C9C1F2D315C1EDF3
8051D6AF880AFA2808AEFDE0FE43C21C24530AD38980BB10FBA238B7D484F518
0E84EBFA8D5DFFC0BECDBDF31A1587E5B84978C588F15C758D745EF6409F3BD9
299A2D98C1FA9752213479503BC730D70C926D1D46120964215C7B359000BE09
03C9AB2A44E52D859C3CE687403CB9506A9A208A83DB3E2C7FAB241248FC3A1D
8DB7E6EA57688C97CD7C7C99DAE5E5E37D207B168F14EF5BCBE54593D2C11638
EF7755EAC847AC38FFA7D512A5AE4D9CA95DC1C12E56D55C4B133BAD6D6F8D29
CBF9D52E5F0DF8BF5E25DAD0349A965D979CA253170E3F100A4BE40B2B951CCD
295D22EEE0710AEEAAD6759A354B2CDD077A23D6A307847003FD3E3D1982209E
9DB25DC524E27FC119CE0AF2276F6A38D5E1CDB357C2E69566D09CDD2726C2A9
082B1AB14FFA2F2CCA91C3B92FCC9AB2A7AD0D2111E351F0C609DD2D4245A38B
ED4FAEB626F32594EB267C66172E1F5BB5AD7922BF5BB094E1459E5B4B2198CE
A897BB8D9375EE8C93DE4309F084CF3E886CBC91C5386A266735314C8A8F314D
35D77CB022D606E1C4049186020CCBC9CB8F95B405BA3315AFDE3B8247BB5E35
7AE63F9A87BB4BDAD51797ECDC41EB545AF1B4C5522B15A07E9ECF4FE40059A7
BC94437F8F1620F370625BDE769F8E03697ECA58A3DFC699F91A8FB37E1281E7
A4DFF095D3FC3082F8CE1BA6B916B884A6380D00454E745574255A02CD28BA9E
87A35E3A7A1A7B66CF6FF78A4B21FD7F5958D9203102D9C498C3D8B4AF2179AF
87D099C4F17447A99D2C2C69C3A3F1939BA4C4B3202B86C5F19BCD68839750E4
F49F2E536C2ED16A5C8AE1925C5A6241C5B93BCC2935CA9F295F90CF48712558
8166BC45AE15C26FD90D719827776D823DFF9B27253F9B5E45A1BF2917793A90
FDE9DF67FFC990278425A0D24FC178C378FF2920AD491DC49938285500DA9F24
9B07774C64D3539DEDB60DA3C754EF853542A929240EA0CC3116319850688E56
DFBD18BB8FB3D052E2E010146CB25DF5212AE5B320938D799EFEE232D419249D
9100A2C241BE2B06713CE5644EAD1880430658A8B7506B037B4D981B6C1C6DA4
24F591E3DF46268C5B98AA580BB798449CF3F058DC97AC3DCC1FAA14E557CFD0
1E4778FDBDB27B34A8908A2C0C8B1396BA0A0F34EF2DB55F56F991AEB4E084F9
5F922F3AE692146B9EB8DD33D956647ED5311EC85D7EB9832DC98E7DA8CA4BD2
8D84AB3481D792D8486817E69E8AA5D2CA8DEAE07099B164B9587070593E264B
AAB6166EEAFEA964B112F66BB8421D3FFA0E8F0EA5C6ADF8C6FF60763BD2543A
8F5834ABB411B945DDE4832F5A087D5C722ED2F421B33BEA0EE8B6546B6A9E53
D39E2ADF20E5DD644D9E442BACABB23C883905642611630089472529D7F42F27
303BEEFB9B1325E52FD50E7C2E94550482ECEA22BF43938B806958D3CC6C0FA6
BAB206FCF952C5988A3C6BB9B4F6BC4380EF5E2D1E6DBC2DC6122EA41E2EA012
B334C9BDA57DCEA9747733BD3C0DF71184DFFABDEDBC8E13F77EE258154973C9
1A067183AB71E32BAA789B7BFAA86D0BA3333480C818B215927B5BAC7460D9D2
2EB3E9292F3F8D83BED26C70760A44543DB5E4CC2C47C2CDF2DDB3AC8727971E
FA26A6564CC6C857C35DC0E2C36C0D34F2DE788DD70A36B6AA16970302653AEF
B82CF28F5667DC6205039A2812D067AAFC82EAE463C434D8545C980E7EAA5905
8132E1EAE8A7F402E498D918E6C79EDF9644EB7AE6D69AC4F6FC227AA20EE939
EF7671961695CE931042155BE10B34E26AFA285AF58641434528F9867BDE8CDE
2E63B895CD19385C95BE2E86F99352A52459B39E92DFA740A4A13149C62DDAA7
0087367108B85B438D869CE8C7F8B077C2DE059333BEB62F8D1691C523B6B445
208E250870CD8B9FC0159EA688DC47D37F90DADF94E8A3B982B25AB0E916474C
8D253EDBE4DBD6A7913DF1C7413F55E39C7D3CF25163C71E630412143D23D520
CD0A5FE74E64912424ABF0E668C8B67359B99EAAA11CB03886DEA3A71F84A52F
2BE751637420B70C1D8CD24E175921F2A97CE4E6F05AB723A1B60C27DFE1B643
5230D8FD3DD7A12E6590BB57DB21FE8B60436A82C09FEFD6FDFA76A19B45304A
F16C6B4674801CF1F85044E95418B6323F1B37CD274F93E7B15CFD2FD663FD34
795273BEF944AC81EAF70C493018BCA8A71B7C75ED7CA325F98155AD174D38A0
F4AE6B1BA02C9E123EC291E0064860F39C8BAEDA4F979488DC6218E918453ADF
92C42CD898C0D0659D1111864F399D4748C11C46E66874A73BFCF8E43BB45A31
9C6156999D82330BC33E551987556417071CADB866C920D0CCC2A45822B752AF
FC111C48818AF87F400F487587E28F976CF20A782776BE73C26238F8FEB57136
0ABAE2D7D4A37BE06EE156955F5983E4674953253E0B2337E4CB48645BD34CBE
7F2C345012FCE3DB7EF20E3A8DD050700C91715E326B513BF95DDE9DF0C0A4D9
45FF1E2FC2340BE37B673D3FFA61D8007EB73EAD437D9FCA2E65F64E853B9B76
AA4668EE62FCA6F439D937ED8FCEA12704FA846CCB1904421DA3242DF9092A20
FBBB77252CC454AEDE3FC303EAE11BC75DCA7623B31715A8FD033303A2AD9E74
B7DFA3A6F3EFFA193E205D5C5673E627FDF652140D36B603BC38A07E5C5D5E99
A4AF27C05D68F66EF1B00BA453343FA6844ADA6A5C880ADBE965001248036095
5F1A89A13BD4ADCE7A26E16D3E6E39C2F71A8C3865164918FB1B948CBF14E9E3
7FDECF6B9C1826C81B4C8D3ED348BEA2160148FC3009AEB61A3F8887C768166F
C84BA0884F0E0738631FDDE9783BCC7FF9243C2D1436D9D5088D5648B2DCBC4A
B72831F3CDE6728C071FC5560A5340D7538FB72443FCE434163479F87BB49F1C
DFA61D2C0C9E8B4676A1A707983F21B3D941A87F467881ACBC6C811D416C7161
57D44C7C9B8A9C777EE1EDDB98DE6468201DACB56EA39D00EA09E91037F30CF6
1E31F8176820D3BA3CDDD85018920ED5938ECBF03145D0EBF96AD373B546D16B
296C4C5D3DFAD597669EEF270D5C81BDA1A9E50C4D96908FDB59CA7F4A883E85
BEA75A68A3B7651D28B7025D90EC04CBF3E55CCD8500A660832E4E7D0D4987CA
E5484BCA81A49632CE58E350571FC08052D90F0F15E0E8BBC7830504AC31D5FB
C9A3F67D6ED281BD491401B12956FFB8952F6B5C40ED58FFD12D6E7A0E18A793
8C769EC75620FCF9193BF8CF14810C0F647798F5D67F361A73429F8A09F1E49E
A6892521D6DE916C9B8BC031EEA739441EF50A7A530C2DCD882063EAF0AE83BD
44352E372ACD1E8695E2A57AC098966CE3E5C36D8FFC23681B2BAB01A1318EA1
9113E00551B37BC3FDE5ECACBB3BA33E5BAC7D7C29469E213EF1012B427B8583
BF1CE167E8D53B310731AACC60AD7BF221362B9279DCFE20A390D69B41EA2B5F
23722BC151E9F319E7737B8908D28EB2D6CF6BB934543599EB4F6A20034B3A7D
5481A1CAA804E45D31BF3E7002FD2409AB6C9FC2442095EA267EEB8D7DC98EBB
F55011AD571060349138850F5F5B6BB7AB8CAB56FB40FD381682856031CDA494
966A1EB11D5CDF6CAC63DB31F1EF0B9251CD7D774CB3EBAD79CA57D0E111DE3F
CD7AAC6231833359B40888D5EA2814814E4FE979638DA804EA935EF132C9DB51
0BDC32FCE3B34EB4DFC3D2A17F39BAFF365FBB1EF36BE6029B707453F8ECC92E
F08172BC00CAE596690E67C3968CF6060217D98F0EF12632BB69C172B3027D8B
58020A07F23E99F37694847B36B6C5E93072BDC5889781DD4AE06F0F5E232B62
E55153F109890F4DF33C18A30619F9A31D849FBC23590FD1D569E31303E565DD
CC2573BA22CEC1E15BE81615A138B1F4A346EF21A725DED54D838B984479B2CD
D4CB31DA61776FDA8E917E7384E3E7781B5D05D51778BB5C407D31B78256CB9B
F699DC52305E1C66A902060476B523E587A4AB639FCEDAC2C0755BB116253F72
8AB67AA3AA548622EB6414E7B192F9691A2E501EAEE103D4466E2F9597E46ABB
5F6FB859EA249C27C6853A5D2288E1661756B109F6DC000913A130D3B7C9D4BB
8F738CE8E686759EAAE7D5DB850952B3789E6685EE8AE41F583C8CA7370F6E78
0467A3D43924F1AC2C3EB9A9EC83FE190AF6DA3E0292CA91F339C38BCD315E1C
66A902060476B523E587A4AB639CBC8745621DF098652900CF348A72E801DC7B
F2AF5F5534C5EF4CD18CB01EE268ED7F231A6D8A2E00E9D1A5C91440ACAF6ED3
DAF6AD1E062483D5D248A0DAEE658222AB8A6EA5A86157BFF0244F1A60D53601
39F617E7D3D3B29272B4BD320F339D9456E29E9FE0A7A8D27A4076D464A72D35
48C5EA94EC0825679EFACA6B859268E0F27F830C47C479BB01BACF5BAAE0A318
EC823A5D4B8C6BEEAD7D7DAB77D6774A9B6E983375045F2B34F82B34A593B625
76CF80971602860EA30C6F24A9B9B1E56085AA89815310ED7817562384F6D554
790C88F6421CD072F619457EE2C70C814A416412EA131D87EFEB9215CA43FC94
845FE2C4095E8907D632BE43220115F1B8BADDE46F8DF80B791549FF1106F6FD
A8522F6C6E8E43CCA88411D344E10125FE3352D92D7848C0181567AE8204DF7A
CC24FCCF883F4AFD8C7B2EAEA4565A89650CC5D663ABFA479C96160A7F08A9C6
9853495BFB9B86B467FC96596FA6865DC0DE4FF19F3CCF825638BF9DF3791234
D9C34BC21F684E6E370FAC9EEDF49875D330FFF1E2BA8227AD5B2388694BCBD9
21B3F1B8485727801B42F5B5E6AFA70376F981E93164152FAEE9BAA2BE3D0C49
CB2CF08F3A6EC42CFE997D39828A20E4FAD2043577EE5C076C02FAE8921FB7AA
FE2C59D56A8F2161E94E95AF8D7FD0C074AEE7971E68B8042F9CAF73838BF0E1
73A6102CD8115556091BE0D1624DA3DBD33D77CD7AB04A483920995B6D3216C3
325AF348469A2411D5E5676E2C89075B468E3D7BA81428B505D63E6A4C1CC563
665762D9D8A27826CE5BF6E52BFF7065296FADD0A5FB8DDCF8DBD7F9158960DF
784F078AE561D2C8B62FF383046678AF5F28D525CFA5E1AE9F6FF11FDF40A7BE
45919A4A27830FB117CA0558F3E84E17B33D1AF04530D978E0268FFB82956099
96F6D9237FAC4B2367A1B22B8D12491D8558DBBC3011FEC9077F298E7755FC03
40C198DC2B696651C6784DA89BC8BCFC6E0EF4C0FB52446DF5A430BBF682FE70
3295ED0C31294387C70CEDA5AE164D8263F46D08231CF3EB31A667716E118693
50867953D219BF5BD81AC2211C9F5C4FBAA2F8AC0627203F844C1B3D157FDA1B
9043591516D956026F0E05274DE2DCC07BB6BBAD48DB7051052D47D9EAAAEA96
45ECEEF6BB63BFC2F008CBA3D155D1A4E3F2075AC27AE19C1C209B58A2EB7696
A213688763ABEE5B7F3448B376F37BAC2A150F073D1788444CC35C4D5C7EE51B
DFDC116191CD5173887968C15B7EB50594084D31ED8203794A85CE241214E50B
512EAA49538E522A2DA50E26FD23DF15279D24A7C43172CF74767C8BABF405BC
EDCA0B8C5C6816D608F21D75441D860E37F993E845D60763BC44D76D56445E8D
DE7C20EBF31E7880D2E77854284E93CF9577977D2B7E5EBA2B88CCAD4281D589
191C58C9E8CFD9F99E76DF938061EEA20E7A7CDA17C60A1F4253341C8F78F0AF
D4604F53009C39DE15B358B6DF6290E82CECC5DFC280FE87BE05C6D3F1AE7898
26BC4B03C6EFF8C1D5655B7EFC26B5806B535095CE49D9781E245B29D35D33D0
B73039A7938417C39026BD37D3CE478785F444E740798DA89D4BAB2358C53A2A
C8C2209FFC629E7A9407AD40D3DB51CE05DEEC882BF307D7D2C0BB9FCDEA696D
23B66D2F4DBE4A3810242D609D09F48BED74A033B4786381666BFE2B7922BD70
75398CE4A9A19F314903FBF20FAD7DC6CCD508B40C717434B648AD9B79EBBF56
77DE08343F226BE468EE85BCDB0CB3897D28BB4A793A8D65DF83D1EE0FE110D7
DEBD4EEBBFE20DBE1EE5EAE08C04310E72644C7D7C2ED05711C9A0565C2158EE
9097F082551EEDC1FE085154A8731B2EA5456D24124103C36685168E7571FFAA
28338780D1E9DD3FBF67340D82F3CD8842701BD2918D63D892E0AD742DF7B775
F2273E85F55CEBC918008307FC7EAF8A3C36EC7F7072222B2A7FF29F35D0D391
CA8EA6C67713A72735E9A4B23FEF481C9C13CA9C48175E37033E2B38B0F904AA
295AEBB15BD6D6D3EB8B4A6FD6E0F272923255E8E3A85DE529203E5700363ED2
9448734D08DDB5510E2BF04D33F5180BDA0188CA61812C371E85D6E4F32002B7
F373756831A82CB6A5F245C325C4A0267E1F5B3D63B504338E48360ACFC6B988
4B4AB7DA633828F08C1F30D290001DF76B10E065D6F915E7F78E1178BBEFAD37
C712821CBA55F622C3BD2A36980FCD820028F8AAFB5F0241D86A697C1CA73293
81F1891F585AE796842C26A8F987D83DDCCC23A7962212E3EF5A67F7244780D9
40A8A00AEED901BEE14B50A2A9D9A372251A9F7F2BFB49B0BDE9C505F343244D
5C048CEB8CDAB67794CB1355DCBC356962DA906D2744AD42AA375B9B85214839
CCC20B0E8A3ECEE76D5B096490F319E6F2EFA9698C03C88230161EE5EF46E59E
E8E66F280BFBA64A17F9BD1591DE60BB1CD59864D8C4D0632D514E76CBCE7527
05E5A244A1C60A5F80B4A3440859708664C798668449B30CB13EFF73659494CD
FB48C4AE23453EE9AA4963BB590F06D4F199F3EF3A10FD1DBAD8B2F0E3879EEB
79A9587842CA73E69265EF63AA269FBC8AB431CC8BE4B3CBC082138B700836E4
2D84395C66EBE570D2AF370AE6DADDD2E333D22012DBF9A6CD98A20784549954
822F99C5019C21FC4F26C4DC34D71674A65D7124723D07BF4B7B4FC2E8278252
8438CECC28887203FE4FBC639E7891B3110EF8136FFA44A09E812A99B4A55ABC
8A25EA3AE9CCD45887313C4071EC10A224EF2F1B41793814F5380DB40257FF34
5FCA80E6753A0E1A8FB32CAE8FFF8637AC6CC4F2159BC3F13AF1AD60236F586A
15C3E11C1957B5F86AD7FF06C6FABBFE059B6CD580CCCDD004E9A6A090E5FC2A
38170C961B5BEF44834881958FBE994D774EBDAE9043569925F1ECCCC09D6769
6B7981694ED2E7B502F982995CF3D00FB4E86142BDB596DA16F855BE7C277647
C9F16550E79470E4A662A8EA47A8EFA2531987A6477A6B2F86F1110F2FE6FCCB
05836EBEEEBB97FB527AE1C21CCC25D7B082B87E88BC0E948A3A11CECD568461
6A595675B9B05A190C857326873663E452F6B92C4146038B760736208860BE42
27D92C8E5285F012903CB99A5611409265B8E2ED5B08635AA7822EF19A624FB8
677813289D7F5532F97FA0A6EA8573708372DB76095BA5E1F6DE205391A0E445
0F3D175431B3148629D95FCEC6FC2559F49DBAA709B629F5E906451B956EC55A
45AB766789E9774F836BB8A3C7392F2CAAD3CB6DF271B737DEEF43C32F38C08D
4836FD6DDD18ED6B5D1E8E0C5F8F53AA7128915C2B37C7F0A8FD8A9D7ED7B2C0
DFFF44C7680CCA884A8C62D6F95B2E530C8F1C581FEE1924269B3A90FC2D62B3
61B48A1149FA62A1148012F747A71EADD2E4CFE1A8A759FEFEF0EDAE928BE12F
A5DABE3E3A729433874ADD5ECBB00FAD6684CDF88747E4DD88A7A201962522C6
A19B899304CCD6B8191D3CE17BF452FA953431A9052B719CDCA0A42DA222CC97
4A176F60C3848268182AB6811E9FD8E07607A62529E409D358A3B67792CBB844
6198E8DE3DF74BB997DE0C8E6AAE8103DCB02562EDBF3F2E2C026C6A07944799
55895950FBD439D06D6793BC57A5DEB25E3504351B9268F4CC036B150340E1C9
CECF29CA69E9967396290D43CCFE52832B25FC07DE3766634F9AC2F6EE9AA6C6
94B0E98881D31A180AAB3AC5FE0E63A66A9A17E3777467934F46FF9C95D25F2C
3DA974497FFA8B1542A921BAECEC5024BB191801A3573D08F33AE9F9135D9D88
00266DD7BC6CAE30911C5AF783014304EEAD1A8CFC5C21A0D2C016C86BEFCA64
9738F853257F5A10BB61661D5CAF56E315DFB39FB4D36E8FBB307CDE116FDC4C
F45A57C049070ED5D7D89773842E38328BD9501868591610F6660DB8A14C547C
0E3E399046812CFBE03B4848BADF320392544F6CC6AF05783283DE1189A4669B
6302C92A4CB42F25C5D130701F6C750D26CBB71075B7773E228F596D892A0BB8
0721DCCBB8E391A948EF35745BCBD6C64B7EB51458B249C8B197838ADA979F92
9DEC8AAC1D9FFB4FD910BD5A86249FAEA712DED2DA17C363CF7A0F3B206C136E
27C5A5EA03328DB699DB0BE0BA0804C1BC7E73D5968EEE1954E012B19763D4AA
1181F9AFC94D39C120A268DB38BF276FF9791BACE98654B6F0958FFD12827603
D588416A00A2F419D7286F123176BB6E676486F33D9452780B1E249911937E49
26A2D768366332E144C570FEF885F21EFA14C5DC29D605A0368BD81F44147509
736A1A29A4162A1D87296C2F44589CD1A88F4AA462558F4AAA88270F0E16A1D7
1FF5A02B266142FA85C0A6B9DEC7EE2895621FB99F0A216C97EF1579336D9643
D132732C6F55FE541C3770030D44BC34C4C3413D0AC7E1184F951E114988B3F3
B2FDEE2868AC103FFEA1C8493C333186F70CAA6905AFF76189415B0FDCA7EDD7
049708D0A820126FF3E89B145BB523B1DC70454F32848BCBABD583CCE2598E4A
3EFF2CDF2F42ACD182841FA465F39D2092582B0D12F3FD0F9EF489ACABD40097
26697E4E7C06ADF97693545302BA5B570EE546F9F7BF63478CF9B4922A8E3440
6A74BFED74E288B9136B9CC4D7109F8761EA21A15AB5E54038A91F6C5804AE62
FB5F01863FB09240FAC2704FC1B4248526995E7F8C42311955326CE76CF31245
0DE087769C1E44777A51D7BFA2572FECBA21AAADA6549F500C2EE6D55BA9D2DA
A4A6C9B830D78E33E277EFBC57D1E14888408B99160799FDB8C0FCD60E61F63C
DCD1985763599020EA9E028BE354DB177F5DDAD15CC5DD684440EB298ACEE5D2
5635C8BFE2516BAA37A378E75B0F4B54BEFCAC5C08424963C4C67FCB674CDCEF
3DFE5E344A7AD521DB0FB226AAA91B74896D09EF44D2A5DEE91A32624A19EEE1
B2F7CF0FBE889C6E8FA39D28FA7C1D12D78C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFRM1095
%!FontType1-1.0: SFRM1095 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm1095, tcrm1095, larm1095, lbrm1095, lcrm1095, rxrm1095.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFRM1095 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-188 -320 1445 942}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E48759F33528B839DFD4B92DF0482493852D12053A7904
BF6E144B9488970F220C299E80886366662C1276120E72472BF84082B9EEC729
F7007ECDC5A850C88810EA679DABE81714004E65D938DA9ABDF29C949A52EF02
EDA8451563235D51286E9133FFC7A27067DF0332ED614AC2D4FAB88EC84E6CB9
FAB41C933E84B88097BA8742BC30A81416D1CAA3545F08E2554B28362B99B79E
FC42281922B94604AABAF5F7A9B8E2D9A4358F38F2382EF9544B859D098DF243
034CC475CEDEBF0EDD0A60C907127BB32F7D85A62A44E90B4056D9B4B2FF3A49
786032C6B25794E2C0003C7852C6B0688351FBFC43300FB0B72880BB7B58BB61
3D1064E7D4DDB128A9B38EF7510B7E5F82BDE39489E2D1DF08816781B13836E4
89390F84577F31776FE43A5F94F817A4AA4A698AA4AE84B178FCB65F1B5A5CE1
334417595F6E40849041565BAA497F6E4B8F4305D849128C9A26A98B909EABE9
8F2659189ED27C588ADC7C744712B4D9AD0C5DD25D1233E979DE7F53C5F1C47C
E9DF254086E5EC70EBC6B7E080060BA72F15E6BB75C75011B15B7ABB6BF761DD
428FF1BD688938C75BEABA7DEE2AF49364D2E198FDC7F8FA2313BBE598ED3703
7ECAAA4670BE3A85C693ACA829A5936778BCDCDB38A5981D4CAC8994E2B2F086
26D8793AC1393D49A8F2FE391F0EF8899946CB41BE4871659C70A3042A36543F
67CF9A1EC0A0AAC8EAD72FE4D091C30CDD5FD96880ECE94E05803F338F54E98E
78967E51DD10E2B4D7714DEA33B756FBB270CD8F7D84DBC86356F052C4D010C3
91B5103816CD777C55A2FB9114C6AF4F0B9BED05139CBD2438F5FB004EAD6ED1
B1D70B2D38F4475ADBDB2D13A7F87C70F67602E3934BB8DA51B8108E59D57991
94846542E2C5DFCA889F03C4121DDD79982864BDCA48C069C9F0AAAC35965E06
A372CC7943AAC99F499AA3A239E6831DE034D2F4BEC784F4132DEAEA390D2DE1
C39A2F11B6493FE38E00745ED92A4AE54C9CBC34921FD978D547A31F9C9682AE
B720D5FAAB07863F8454DB75AA474C42A7733E97EE2065A7C30E8B29D87BF206
717E2741A0D8264EAA38C4AC19482CA68151B2A144319FBA90445916838F7DAF
61234820FED5BDB2F071EB68776066D09462F13F637E245B375FA2DC860CFDF0
670BD558C50D3018716A23FFBF28963C9EBC60C66CC4FD5FC0265A8EFC404EBB
E29E4203D0C3EBBC3CE615DB101B5E2CE6D3AAF26988F4EC209300F08FE3D985
3D4AA01ACEB9CCF1F4718C98A3B2DA975E68EB2FD1CA8CD756A08E72DD91BF0B
7A5C0146D89EAB0D0C21D715F756BB7E857281B067CDBCE3F58A797EAEEF5D02
3BB95949EE39E783623BA9B5A86FC8710B63EC10EDB51517D0F1774DBBF01924
BC2D7187CD112D3ACD59D09872EEB93D55BEFC12CD9599CAADB7014315B6CAD1
8FBAFE89C1299D94203BB940C68E047BB2AC71E858B0818BFCF8C57408C7A455
23F7600746F71F33FDB01E04FF6943CBDAF224CAB53C624C80D860F7FF82EC5A
C456FE8A99CC319CC5DE31E4E520360DCB5829CB45EB3EC8170D396F4EC6EDE8
038577CFDC3FAB4DAC47505883E5A7C028F9D51EDEB31496089F2A7994FECA92
6E124E9FB1DCAC3FF3887B3E1E55CFF0B570F06C2B39A08C16E3234052F3014F
9B6E2732EBC81F6BC0E9C72C65E6F1E3C7CCD144507CFCB9D4E369E294E3DF4F
25220060FE23E1DA9F9F725C9F22B1D624111AA472AD0ACAAAF835EE05CEED5E
72BC758FE7062527666FF8A0F31C9682410C68A8F8286A950097AE64E4C84D47
366AE3F2ADACDB61EF89F3A3AEDBA367DD15130B59BD9BBE696C1B5F67E6F094
6D7D299E860EBF0FD493F881C2956C4250F5F28207671D7E3818FA8F74E9E873
AA62A2DEE42F8446F7116137F90097A01C135EF8EFA8A4C35AE1C83490D29588
3B86E1BF79D5B8717AC291B1154F466E13BC1F39D6E41D46C028EB6050289B09
9CBFE4DF60BA32127EDE45985B898D9FAC27B8B6CE2AC29BF4215FB2695B18D4
ACBC83442AA19936AF5483242D38E1CEFADB7AC16F0CF20D46B04C9CB34076BE
2E976D36FA8CC986D7946CD698D947E713A92EFB3FFB37FA778A0D87A9D89B2A
F3FE4BA91A51A55C5E0B9F06672DB05D16A28721F1A9214DBBCBD1956BFD40E6
539E7A0D283F7C07AB3D35A9501715151CD2115C9E741C3E03AB9EB163E59A26
118A78F1B9B5994DEBD48FC226E4E5B52E0D792BC068A954200D8699379A1EA6
DC0FA3A00CB22004530E8F74164173ACC2A2FC370F9734A6EBF5F641661BB46B
30E7F81D2E542A22718D4EE9736E3568888C89D0BC18996DDCB1902304A9DFD5
432E6E7A6EC1A836F70405611A860AB4944345AC8006EEA335B5BDE628C11654
18185517A1647196843C73BED75E46B680E44C9388EEBBCBC65EF9958A1F20F1
5FC88947F2259C9AC2FCCC8D6ECC9947219B62445DA840880CF5031A02F96174
8F25A4D48442F85F9DFBC28973A088A7BFBB017B9BC1652F10281413AC79A280
EB9980C16445149F2A1B8CA1FB1CF855063D865B93F325AD24664C984FC897A0
075CB62D82A44CA3DA52D549DA7668530477A5CF4BA7D3538B5ED20336855606
E5038BC8FD96042006781797AB7C03A447F056903EDC711D05B6EAC6C12FDBE2
170632444BD2A8CCC94C032BA2CAD549D2B0B2AD15187F8EBF757A45494B5411
CC726976BD2008108FD2BEBEFF1309356A7EB024956957B07D11A7251A1A873B
82D940AA1744AF6CEFD61649FDAB9965BF20769E671EB78F7531B730E41527B9
070A0181DB95FDFE11D1801A4B8992F65179EB9DAEA267D2D0BCEBF18826D605
FEEF0EBBA7F544EBE94ED1426BFFC736DB38E4FDB2C10681C54829584BEDB695
028A8E84998F5E1689C4D588831F52B9D9EBFF7E1D681C6043AFE06E4A01767A
C5FF37F848981ECC4C92B19D99F0D8BC44A1BE58EF810A613DDA0C4AB11A184D
08BA196154866A305C8C263D6274AE03196211DDEFA926A80A3E2D1FF2B40A0B
D96ECF82E8D6AEFEA6628A7AB8F7070D92BA0698626750EF52FC68BA13599D43
042EC3D3C805CA75FF52D28606969DFB36EA53309F251D14CA462FB6429B70C9
A496AF4B2AB42E0E557263DC24DFF733D39EE5EA5A6E3AFD4E0C53EC2714D55E
830424B6E32816F8F52A45DA76D8C526815BD2BB9510D9DA17845068139130E6
936AF27B3F6465259CD878C88423A98DB42B00074903D207D9A42123315AC1FF
B371BC9B99A79211A3DC6768463303761896C5CF5771345A9E8BC94F68790940
B451680E8DC2A71D4906A9AD3657FB255E4841DD385D4CE6083CC4F9308C95A4
EA43E61DF21FF0C9EF84EDC7D30A1A86987A899E28EFCD39AB2725FC106E251B
12BCD3E28B2202E52E6E1E77212CE99AD0A09488340D4199A5E89BC2FB4151D8
837E72EE7A9A0972531094D9E118E0F08210ABB066C75978CAA5F62A9C56C526
0F3A0DEB415DB6D0575725887E0C5F1C963EE2BD777E6FB6064C5B141F137547
8DBB41624E57F1F0D63BF49F06B018DBD0CF0B5F3FA8433ADBD62E1390C7AD73
7CA33AB21EE62FFE02B6E517DFED98A9A575C8821BB4350C40A598932B1E93C4
CBA126D53B1F5C84838452A6F1847743CA1FEC7EF283ADFCB4E87AB110217CA4
22EB01F5664CF4A1F1A6263A668AB1019C9A45180D5F1E2D69774A4D888BACA0
E81406F8354873B9C144AC0F94568E4A9955E5F83AE200E018314B7DACC7A63B
5D19876C8747BBC3188A8B640E6C52B9EC4D1154426CE8787DB420BA7B291991
E1C7F2A7EC355696C7F750D62AA041C1F7242082F65438EA2BA5BE1B74EFD19B
C65CCCEC5AB0F139B7BD0E09ABAF7359BA3562E0B22767D6A376BF784BA52E6D
A35F51336D00A957D5FBC5585C31DA3DC8FFE670850928D9E6A69CDA5E108DFE
59AE7ED72BC735C815A974B8CC28A53CBD975B4ADAFBE21B4F48B6E3E6F13DD4
617C9DDC0FCA5D23027009EFF63F6FF6CC18ED1DEFF5DEAD892B3A84A34682F5
523DCB49AD181A8E9E4B5BA2446229B15084600D1950561540EA14D6BEAD2A9B
22FB6BEF2419CF316A954F6EEFAACB711CD41A199C0540918AECD8878F63880E
D8C1D33DBA241ED0402C98406FB4400BD5EE65D4B761A85276F74AE894EE9589
432DD04F968558C89D12E01647869E9E0BEFD4C463664E5211BFDF572FDC037A
E719D796AA8E49FB9D0C92DE664D8F2067DA3A075AF6AB20AD629B8CDB3D982D
1A691C6304C675685A105757A599858A86F6E7537CE93A8B52B17D602DBC212A
F17F8B4757C7C3265348CB94D7FC7861C80F54BDCF0211D3D97400FE03E37C66
24E57B78E0E73CAD5C2CB0FFC129F4BF34093092049914F8F4A9F9C4AAEB0582
BC3F6150269230DD663AEF6B61A0B581AF8EE6A59726FFA302488044F2E9812E
57F4F2D842D72F488C713FDD58F2FC9A557C38DF30977A7387E6D64B18CBAEF4
C1BFAB7A2DA47E1960596B27831370A5C8593A2B7DBB1040A7BED83A655C20C2
72F049D1DF66CDC5D476CC1051D5D12BD193475E8D6AC3011DA8D274D00488E7
2C81E3B4A0AB917247805FBD55D3B4C5E75DADE1D2798EC252FD10651BE4C97A
FF81B25B8C300C301CA08BC250CFF70CA052FC5FA47F444DF0D48FF2D0C8E6B4
CB3ADFAE80107F1187523BC5865C56ACBFD61E9673659238512BED495AF32619
E9C7653AC0D025B7259D35F50BBC99D54E9C298D5E54112AB99ACD767CFA9BBD
3DAEA9425CEFD2C8E2F13664651AC8C3C5AE86A4D3FBCB6A8C95F5BC442E9743
E2F31E8F7E237B969A6B000E4588282E2C1A691C6304C675685A105757A59985
882C2FACA3FD7E36B95CA9BEDE9B4149F8BFD463295AE14351F1CE1E42412226
7304ED0B2B7670143A46D54E0332588C5AA6C52BE753649DBB6117A1B74FDD47
BD4F4E7B567179FD3DDD591B6BB76600FDD7F36FBCF8324D1119104B8C9C2955
86F4932783C61299E1548722D8471502E4E237722DBA50B06F6549FC7650A0A9
4CF3CDC202544F6E8B16F9C48EB2ADF3F46BE339A32316087F8361F6846262DA
78392A594EF0BDCC8B70A8C03D655B89FEB287179DDC25F2E34909E3F7F16DFA
FDB92A1B45361A68C4191BBCF4AE187DF70F2F7207CD2BD221BB041EBDC2CCD7
6179541D92C77CE22E18AC24D4147FDE97B81054CD0B1DF41BAE286EC255135C
9E6A5817FCCA713AFDCFDABE9FEF9D9FAD1AEA2F617D7AA53F09817FAF84983C
EAF24D0178B1EF3C9A85B9CD255583782E16BF8B80497067F457EDCA78244D0B
32FA271D0CFA297C762F7D28869F2C86FF6F9DB9586715728A808C76ADE5B721
AEC98100994F0FCFA5A865BF53E3E4B1374DAFE46B1D808281A6E3A24671E32E
B74FED57E91C36CA543E0D58649AC22991D32CB08E341A3D5FBE2A74EC7118F9
79BE6596B360A0A4790BD5A790BC621BEE8D402AE7DB2B5F5DF31B98874B15D8
89F41783A3EA4EA466656FE3721504F69DE72A86C264E1F6FAA1EA98474E0535
C5FA1238BC95994C1627D63C5EF34F2B33799C8D4F87A3ACF4630A7BA2B0939E
CC404F5BA7A5D9F8C4C92A234BC8067A2E97A9A588D008AD454D48AA7B421BFC
088A6354ED03FCC0328200ACC65EE792D8DDEA858649B214ACB9D60E1DF6D624
C68AA947E1616B224DEC1F466ABBE25F62DE8767DD78BEDFD40049340F96DFDB
7D27791A447DC10430929400B6D6627FAA68EBE49BDDF3BF9440D2631E0F71EF
0386A643B902BA777E94D578C92DECB90FCAA8C4DFF3B5D3235C93D7A30197A1
9D149BD83EE4E884021EC334D8357276A039A6A0FF1D6E807E4761952E960143
C1C3922AB95ADD734EBF0E9AEC4BC88932330263A4DF0082E6A8CBF156E256FE
158095475DAA88183FD9E2B3B2DA99215D934BA4011FFD5C24E79ECBF208F024
8CECF853DC2CD24A20558C0F4ACE6C8BF83BE094DC8881F0A0AA6F483C4A0B8F
A5588F215FBB3E476D8D45184E7661C8B87FF6895FAD881EA9216FBBB19D1B5F
842846FB70DD8196DE1FE3218835C4F50F6DB0C2BC2512AE9CF2666468CE72E0
6B401EEF57C3F558E23F980324FA4195B170A79F0A748846D8B85EBB1644F070
60235145CD22ACB8D4F44EECE2DD22F41A1EC8D91EA817E295C55CB1C2F4E43E
67F00029F54AC57A8A8C81858EE388F3900529177263931D8FAACAEE551B608C
9BF18DD2428155925F1CB4CE732F2DE4A09B4F6303D038DAFC2CD1963B361D8E
FEB3A32BC2AA6286AC239F5789BC66843F4175A92ADB000E1978A9EDB61C050E
57F080D38FE8CAAE702FDC9D3E3F0AC7FD80A80D1197D498923EEE9B65CEC486
E6DA07254E198D0FC6068392E9EC13A65F7ADA8656D3464B48CD17F6277FFD94
5BFFB3104AFA3909A8555DC3D5C65C821E7B9146C18A198E425634FF7311FA69
5AF97F97810AB774A568EE2C346E420C86AE6F6A3D3EF74D9B376053058A08C6
99D45906A3E16D2C416BE7CE56B996FB84316586ED0E15EBBBD33AB0C871AB44
177E4F68BA7758160A599506D21518B1264F6F62668E67D6661CAFBC7C845439
301920F40D36C8A721558364EE119544CC5F4AF1E2367E46F3F8D26658197BA4
0E1187E00F6CC85C210CEADC932D94DADD1186B4A62B2EF5319D0FBE282EB7D1
B85B203D71DC802866F884E4CC6821AE7D66185FA05D85FB58AB983095A1B39C
BF743D8DB39FA44DF3E926AE8AE85656F35E902FD0BB89B5E469FDBC4831EA02
5224AE7CCF549F7637A5D6BD59ECA9233C80ECEA22BF43938B806958D3CC6C0F
A2616223E6740428D595149858C2DA505106A130634E70D438E2B5220360DDCF
A3438063735A1CB6B949BD8641106CB321F9591F364248F672BAB2D8430BED15
BD914914127E8FCAA9B56AA7065F69514B8B6AA528E42C55CC39C219CD2F65ED
4ACEA814469DA0E3E11305795931B9F172372AC98EAF239EC9F2B34211A60D0D
CB1A3E610136D6E15477461EE9E9C3B29B919A78176F13818AD4FD5FBD9A751F
6137DFEA833004F46894758B8398D03CF2BC22C2C7D09E1D0D4D02C504D036D8
988E841AEFC38BF5E3299C87A59681346235602764445C17723527D35DC2E54C
6B4727B586347407A2967E6607678AFE360B1BEA33070791A9CB5904A2D37203
0BFF16B6F30E5D230C31A9EC532EAF53CC6269D66B29E5BAE53DB33906DDE311
9DC6CE9F98050E503B19BA44C1F374A32C4DD51E03FBE97A440D58126268CC70
6508454495062AFFAC5920BE715130750B3E0DD99F816E7303F73673031B4DBD
E4D8C863BA7A3A6F2007EE15DDCBB38C2DAA5D9E3288451FF99934B61D2EB3BC
FFBC0886A20B66A8E2FF41FEED67CCDD3086953984C5F9BE4CEF600405DD2FBF
77A575F65011FEA13A7ED9537246A1193E4F7F602CBC4BA7BB3093EB8A1194B4
FBA7884337FE0417DA2D04D6C1DD06AD2E2651F3B4FB839EE810B4C7903BDA88
331831B8277B941D65BCE467D484A319120CBD66AD2E02B47861CE4196702567
D3A6B83F242CD7D3BBE4559246C9FA707C5E5258BB0AD778CA3A3003ACF66F2F
79DAD2DB33DD1283966DE7E99E0B2048B60D117BB09AD889D6387F5DF8FBA51E
499C4700C8AB3C8DA0D757B08D178224D77F85F5CAC68132297E81F717820A90
BDB45E16CBC382507B7F934E000F6CC08DFD08CA2F19F9D78220D2AE0F9715C9
437C02C8ED058B47164B923B7814539E6D297DBD2C462F6730451040AC6270B2
39354032B42CF908332A46B36D4CE6E1F57F7FB987E81C3147DFCBF248D1A872
8114AB77194F0EA9B440842DCCDB3D8C5F32233104A9F80E163B9465AAFFD614
67DFC393AD179441058296B4C6AD7F5C81B335931050B468865DE7308E8AD010
B3D5859FBE06922B232B0AC83BFAF17D69BBFC74E769957F893B47274D353263
73076C15AD7965A35D257D03CB03226F4FDBB80C8D927DF8FEF4D6F5C759E6CB
A16294A988DBD19815DF5C8D374C20F535592394D7904CC6334875A3707847B3
39AF3764AE28AD9427846643D6843CBCE38063798CE758A5C54BBC2A6AB9AA54
43E6670B2495D3463AB6EDCE0D828DDFD45E3E44D28B0B4ED4021E77A09B4763
A921CF28A4BB318E242AF1E39B17B14B36115E71FAF6CC611DC2930303E63D11
9B016C1640790CE64065B0CE94706CE2536EB7AAFB312BEB7AF068B5E3297337
072DE85747E5661A027E078FAFF662C99C97D573E0A9FE81079C1EF2804056C3
47164DD26312138F759E13390EBB4BFA474372FE882318A0E0AB081537DBE48C
292F7D54CA39A46D97770DB511DF9CDCA9E729AFAD535876DD15C315886DFB61
E3AF220FA0261898725424EE291F44280562B9A292DC73480762C5FB6D70BFFA
48734DBE54B78DA019EC901F8CB882D13780ADA1A26C18BEDC771808550311CD
967D167E9BFEDB9B75174145EF4A96F676A0A508D8A6608249DD9A0BEAF48043
D99F573E7EE66F29B7ED051965873AB4645892A3032BC29ED1C766F73E7157A9
8827335A4E3AD99E45023D3FD3D3A1341D47248CC76B930E62BC3A4BCC80FD19
7E16FEB0FAC40A823273EE9A3655763FB3AC98808A0C710C102E07B723682A03
9ED025D7D97546EBDD463A19ACB283E85FA56E4B7AC108B4F0FA2804E0BA1E73
106E2163C7FEE76DB2D5F0D2EBB74F9C8CD009891ED2C39508CD6E9245C61CF3
FC6089DD072A91BE85FF1C6DF2C656423C00376537F3D360CCF5F46CBAD87716
42FA45E9D1663C74CC798759FACCF4D19716EEC13C115CBE558354CAF340C66F
EB9C7F7FEB3783BE387100AB891AA9F608A6760204564BE7ABFC4EE3199E9FAC
3842A35777B17BDCEA315DD357AED4A8CACC96EC13F7266885CC7A4E70B37A6C
F5B97A61984E38C348A24CE438A71C7434C73AEC04A6A4BBF63075D5E1E79BF1
14E88223137742F47CBC2D77722532570C57ED6A693D547C54662D54940E3A2A
3A48C18B5AC2DA8172A2FA4CED01F302FFC204F6D911B9FCA599D118553930BD
70953AC16D028E875CB404D02520B5990570018207A9CE111A32FCFBBD18095B
6189324AF1D92A3EC48662A7BABEA8C3C2DC9F1C52BA70AEF080929BC7064D39
ED4571C291DEF8E61760E4CC4A71CE34FB84E74F53AC906CDFC033FD887F11FE
6DB43D71B1BEE556FC9E32012D075C92AE49124463F7A4D344F990D88127B4C4
AD48A2E4BA5E63E8BD18AE4181B2DC502A421EBCF15C2C6FC0468A97584157C4
3B6E5A0AA572498469D235B17E9D5E82D67E0557916CC7BB0E3D04D364C41853
4DC850CF09377B26CC9E0BA524813B9EC7DEE99581F2050B71A79FDA63EBADB9
D256DB0554A9B3CF6D6F6131FEE37EE7DB74D10C6A9AD3D9F4743BB2EE2CFF11
6137F90097A01C135EF8EFA8A4C53028D0CB0C17E4D0C8675669A84A66320D37
93ECFF3DC3E8B0697953DEDB23C805F2719E95A53874CEFD2F5227A0A576E48E
4EB1827D69838486004E1A657622B1B4778D9B3A7F7FE0FB41B994AD131029C4
A51B6861C96A1F1C14918EE9CD8801346985DF2A1E1F4958CE1063DA4CF2D556
8EB7FEEF25E9D0CB202B1EACC99FDBEE7C4F687DB7755E92F25E90620EAC5454
9AFCE597C3F22F323B3CD3D5EE9C1EBC3A96C0B0F263ACEDDEB293CACFF4A381
E1F4C7B939F46ACCC32B115105E62227A9BE1575A17235FED8ADA340D933DF5B
214BB42B6DD39C20CE46C98B61169DBB1C8623DE97B81838D5E16E8A4EA8E47B
2D01AF735E4FC231C81897CCECD2456B403FBC3FFCED2B925EF1721C323236F7
159A431D5EB281FBFACA1D2C8F534F9160D672D0F2037A2DD635CA7209857F97
9A7D84ED67A459476943E00696C36B768D7E28629474C9BB3966DDCCBD1F5A1E
310CA668FAEC1E8903AB7CF1862E8A87C99B6116B72C970BD8C39AC821B1B553
C41D68E56BD8BD72A264E73FB67CE7FA22F865FD4FD85A94445D399DFBF4C4C2
6AD9BF1F0C1EFA8BB161C5C4C7D441C23B766D1D665C1BB8278EBD8FB78C7D9E
59A0C711944B2927123D998310E8B2653446BE332D48009563516555407975E4
34F6523CF7B634FE0B900E8E943B88680DB34F5D02D46BE730CABCF3F895A194
912DEAC61B7606A35FB5CE6927D21F35C5E859354790D7877937A6439814AC15
4AB3F532F116A69CE12762E860F80A83DC05AF8697C1B53F6E2B4D060A49A4B7
3DF9044E12B56E70BE0140F63217CF28B6E0B9EB9C83FE340EBE8F03A388EA65
69B6FF273321E813E7E86FDD3101B8DF09EBA24915FEE4BAC95878C7F346027A
15D525D3CC1D6A8325B0878B29F707E61FF39A22B1725153A8338ED37F663D8A
185D8CAF7E5AE7C7FB7E45977F7DA14915258A9503BD7DD73AB6F7E6F165A115
7C7D1FE59FDE0817304E83491DAF5D89993779AFE20D9A1897681E4254903E91
AD5E74A523CC1A01619B91F75668118FBAB4888095E7270BA2743E051A5CD3E1
C80121D077C840384EE9018BEF074A17D9E2AAE1431C51523265F1248E71E31C
2D9A520D2F53BC67931F4B3D85283BAEABB9A6D43E0BBCB1872EFF984F53EE69
20D25EA394ABA08EFE3C136E5CCD640D0A429C5A168FB95F189F5EC666EFF900
78B2F3C732D04C36B5BB343C3BA12F476A37F0709C4DA6C1CF8AAE46D5DD4BF9
51488E52F2FF97AE49DC99A22855EF728E5E8506F81EBCE8D1F420CBBAA33C6B
6BACCFF5E44E56DFAD604A3722EFD41FF3FAF461C4B4A8B2633B648932C80780
2FE4D816B1A8DD510939608213089D45A24617F615324269802455AC2E09DAAC
D30A86AA94B746F8C0D3C5187D9572A5463EF6D0CDD5D53EA9EFF498186EA04C
93FF2897D51562CF6C4777D6602AC0DD27232EA50E2A55993AE719E0F3119A17
E12595AE47730F34A7BA31689602EBC13B14F637A353D5AE542F78D3750F9C09
21D281C90ABFD7E71A8057F2AB3ABC2DBE1569FB8F1FFDA11730BD7DF32063ED
14D7385421E27EB3689830029CD0F5644FF0FA6B6901A2A1F9E59107C89249CA
940E8C198D67F9DB7FEABAF8C2D226EF6DCA14BC0A2183BD9BA4443C8B942BE6
0386F0D7B8D0DAB12F8782BDE021B4AC21DA05AFD11AB0633C816C3FEA2F97D6
71F245C0F76DA8A4CC4A4207A8DE2FF1F9AAE715792EA2A700229BA556E747DE
68FF8CC8C0968B07286B5AEEC6B30517B787EAB3390E0B8B5B31C515E1E22B56
ACBFD61E96768EB9DBBF2E83B5CB17DA3756A2E8BAC52DBD43A59384F0204E19
F1B558FB4ECA83FFB4F8E3616AD9FD1E2DC0BFA86407A133C55EB60ABDBD3E72
7A31B9FF45CBE471FFB5162BB52F13667D5251A0CBAC7559D8CEC3B7748CEFA8
4D08D88C62EBFFB218D23A0ECE72CF904D7D14563E6CB5761B9B052F246C9E76
7AF62A5965A160BB04EB45943BF563D9D7C6BD029122F7C1B96F0EAAB791D43E
3D1C04A444FA4AED1FB046CB95FEF4D9AFD854F5D9EAA48B5CC8E9F77FEB3795
4180CB600167B0076E0A4F2F631141554C3FF476363F18EA3AC9E5D77D55A2E9
8E9923B0F2BC3531E48EB398B2E0A4FF13555DFDAF0F9A0FFC7D9AB0235E424A
855CBD2A990FAFC53893AFFBAE8BCDAF2AE53000DBB39916983DAFE2E5AA3547
E80386F048879B66D2C768D40F77F772448247BF09D6A0E8DCD781C48241295C
A41A497CDD1054422411D688341CA51BFA6753A26C3186826952188502138611
FA2A5E2FCD56FC8A6CB889D48C699879C32CCF86087143AD2D7FAC19B02EF698
FC41B918443EF7BCFA351166A6B4C49861D51F0D9186922824C80666778BEE64
3662B717486F61B7EF3F34E1E727FEE9136F99BA5F330F6CE79E5D2F8C704C51
C5066FC47BD8622A62FAFB637F5368BFCA0546661E38BC2ED1DE69853B25BAB2
70C0C77DEF0A701E4A1945E305952357899B311D552BDB998C2192F01A3EAFAB
4EAEB1EB6FD7BE33A061C0E7E6891CE84EC63BB4735631F599A8602C91496EB3
EEC816430F8B4405B7E6B34FB9D69EA205DCA008FE653D05C61BB98D54DA4AE7
5C05098FFF8BDA641D617829EF309F9579655DE014CFADDCBEA2ADBB9EBE4B18
868E28FDB8F3F96D393792CE249B550C79705349058F2EBFEDE852981DD55204
34324BDEDB48116CAA92ABF360EED718B0A34DEBCCAC236FD0960259737FA570
0E60493AAFE8D5BB59D8E590A22B0ECE36C43E4249170BBAEBB2B7A6A708FF69
C92CA96A231A686271199CCD59FA104CC50756F354398C08C827C06681A64142
8FF46E14E30A7F4912F020CA6EC27CBD74FE979D2B25923E64DCFBB87D311E6B
AC376CC493F64F23A45B817A330FE130D852D781BA30410EC69D8AF4A5112AD1
3B1FE8A9271F9A2E836B1CC4A66CC7F7A3C73055E6875CBB74217DE4C1EC9338
D223A3DF7E176A1F4FDBD65A9742DB6C42AAC219BBF030BD9B37A79CF0C5819A
9A8CDCF4CD8882D5586F483562341FCD30FC5682ADF171B5C071C883D475D51E
04C0350A6FCD1A9EDCD173EAF6125D280BFEF3C5B21E307FD67095A409971B49
BB867A14798F0C647A6C3B6E1E372F6F790A8E26BEFD49313D57A65961392C97
EE53DD9C90DEC50559B82FCA9AB1D70CCF6BD5C958579A801E9D4CCB1264AEFD
0B928C43719555CDECAA0F42E5BBBED29F774A1EE15168BC2A430D06DEE2F847
7B82C12B2E5D32EF8A81BA63F4C6F8AF82BC983E89208FC1BFD2BAFE8EA3EF4B
82189304DE30F9CA9CE42C87755141099CB8C9EE2A22D2872009F8FC63B1BB85
160E82FF30C34BCD306B09D037F72B5A6A05D71135C363BDB67B3694BE35B6AA
D353B5B420BE2B59CC760D5CDD09D10BC240C421260265A0523CD834F1EAD66C
0351C1BB3E9FB71E37EE706B4ECA8A1E93B50F1A7BFA3D37874C7193A2A3A75F
986B999760A7B3494D92C0A01D586FFFC05DD36F778D8BACE1D2F67A6E431B73
0A159303ABD13F17C5CC8C28D810AA2EB948C4E076417268C53467255D594747
D6AE413523BD158E21E5FF5179F2EC0426EE926FB26CE338CFE5F50CF47A6CF2
C9D0DBED7EA618CE223F4CBCDD055B094F3BD194CDC5D8E7D0D7F73BDC406BCC
9AEB22ADD47C627C89391C7135AB91DF1C3E339DF5200335B467B8624084DA48
124DEC31264415AE3DF7BA9F765D421C915804A9D6F4704C489F0CD3E72D8038
79CDCADB570EBEBD3CF5F42601A7CAF81DBFDDD5B4EEA1362E0A5BA0187C7F09
0C4C06B1E23B3D7BA4F6FEB7A81C329FA299DD94B313CBDF892CF379FD8E3F1F
9C639D860F9B4158AD33B00BD9B60260BCE1C9238EB07CAC44531E1CEB792DCE
3C7C10F401A801629A7AE53A9471AAAA0A3CF68C07CFBDED9AFB2EA6BF31764E
130A7FF47DB4ABFE02FB695AE74DFBB76E4B3C3FC79640E4231F44580FD4C979
7F7286403CB9506A9A208A83DB3E2C7FAB27BD1D2AE1635C0596F5E6DA8E4C52
80F43A21BA3002CCD5D959288D8E87889135BA6DA8A6B41F7608C1AC7D63DE6F
D2822C03FC97FFBBA95FE7561A1F12548C286374763ADAC380077D037EA8DC31
714AB4CFAC64024D04879D277AE88D0FF07BCDB6667F504584EF12F664008858
352C2901A47FFD3C2CFF05A5B5C59D8BCF33ECD8F63FA2845A5062EDAF8CBEA0
7ED92D5669FABED5C979A2105AF6F132564C5EC6EC425F903AEB022E851ED034
76ECB75B06EFE5369A36F8951BE04198443C3CCD7A1E4702641196A40F406D52
F311786004C7913C15DA6BE2D42182935100E4F50E5CC70FAD3A21917D15D5DC
0AC90A82F0C9C806C474584A42B0FD92080D448A5AEC91C40B3E7D9D7E46A8A5
7B3D13B7636DF14626686759847FBE6FBB2A43E3C6BBD5DE6C0B67B078695596
043F9CFF94968EF45940D326CA23499B246FB327A72991180F9D3E32F73EFF02
24CD27F0A3585B6811E752B6321F7F4417EE6BA4C0184E6D706E093EF686CA71
3C833F5A6EC82819F2A7276316DCEF540EF82E55D7088CCC89927E2583600463
3EEF4CCFE98859CFDE3F732FE81146F9E43B0720FE01B3079102DF45C28F916C
8750E0A4F7B79B49C0F5772A369869606022E520BE37193F2BA0271D16D4F137
7FA7F17F41D249A02A2E0B75B3938AFA59B5B96B911CD7BAFF119EF9DD8406C5
D64FDD900BD8C39AC821B1B553C2BEC4B7C19C20040D6423F521766A4CB1506F
9B3DB822E16F835B969F3FC7BFEDA3E5946A0405DD2FBF77A575F65011FEA13A
79D511A111B2562B2F104FD8DDC4709FF15AF62DAB8EF8971E19B356ED8F889C
31AD6C89C7B4915B96C0734FEAFDD1A5618A574680C8020A9DA242BAB1C3A23B
5301D2364BB7BFFEDF4D37BD09C7A9010D2AB4D8007467F261BB4E4F8E5594FA
9C4229B1035580D2BA0C8C10A5C0649A5FBCD553D86CF2D965057D4D81F5EB05
10592F1FF418499B39331A8E53B80B528870BD2117A94A65D609EE5EE4783EAF
74869A80C5673448C6C6E9BCB6EAA24A7E11F8EFE101CC55501637EB2A714CF3
E780D4AD6CC2CF75E903ED9EF937453B759218852320D5D7C94719327D8601E4
A02C409737FA86D1351BD5AD19D5CD7D9F0D6F48ED61E38DF7FF7989E669D4EE
2E5034C5B9A39A6B9B91525E753C5F33EEE7E6B029AD7E573FFF7537658823E9
AA81EC04264BBC2834002916EBCE5F49FAAAB1B85D1B6ABF06A38B85FE3341FE
42FE914FB733F568D6F4DF60E1F47F0B760E33DE962D92ED0E290470AA64535A
61B22AF2CA5C79A68605066B1F8B78EB25A9F5143A1C655B60D215EBB389CD80
3DA3064F46825AA8D5DAB7A870A6FB27CDFCBB490A4422AC699246DE3E22AAE6
960FB51396405E8792CDBC95AC21E63580D3F12D919454549011B3D55345A22E
511CB72C60C270EE7CD62FF1A0EE9FD93D01AFA5E758D3620A5E36B8D1B1936F
716B4103842B258E76E62A5EC6C762332643E24582CCCCAE0FACA78A9D160836
D18A1C4246BB0D54A66123F3B3A1CBD43E5323B900C5842F219721E4A0527BAB
2F229BC489E529CE2AFD7293BC86B961BE42E5B9F002E0E963A85D37889376D2
6BE35EC20FEC7B1820C42A1078409AD56FE715D03F77EB28FEA789DAE02E1E11
1AC732F8A282195CB8A8BF0FD54102787C0F22DF0B3A94C601A68E9439216F08
5AB9484989D07408CA21755A506E5242E0B14815C36D52DDFE609898209A765A
69F32289D88D6C2289D5F6153265FA6C0714E2E3F11637F2E860B40461457225
1698C73D2894A864E8D145233B68227E44723EB427BF9C3C2C23378E7B9776EA
EF8C6493DB363427CEF48277419D5B9D42F0AFB220FE1B0338901F2EA13306A4
E473A751137683D7346B15DF10B5D7F515CEB552810FFF3EA911831CF0903856
73CF7BFB2093FB03482CD1EB0516FEE665DDE0E67FD96C8FA33E8CA85489C470
5E278AADAB332CD5AD93AA72C7F3823B21A45545B6325DA3B702F504A3ADE5F0
ABE484D358DFCC059822BB0302829D9A706B5DFAE2BB2EF36CBBB31824F932AF
E54993BD47E82628C3CE693744841C18D672867151B11CDD78F197C62072717A
F908169B33B185AF2472E5C865FAADFA4BF73AD11855753A9242547FC61795C4
12FF912D97E54262CE91CA43A2E45D019ED38B0DFF024C5647B2CA6129023704
D721A6C54242DA2CDE79A409E3A17F3CA30D7B3AB3D5D17A48CB02C26DC1AB14
34BE0F4CB36D9AC785D7157865ECE40A1940FA94843AFC9F61C17A09F9FBA568
4EEA1FAD8A5DCB85D59E2A92967B7489658B06DB58E31D59C42A8ECF101532D2
0BAB4E4BD54326D9864E5E30AC5DDDFE45DF82CE6E1A4BF90D9BFC9320DD9E18
FD7974BE602732019C44C1F4F7BEAE2C0442E0A4C063FECACE3C68E4269D69D3
93934D4CB3DB978E0CA9E7D4C10AFC49257049FF18B47E74576E7781F17AE6C2
1D0DBD724B160179AF22A9557FC00131B98712649250FA1E15C6627D9D8FFEBD
2FEE4464F8BE1A1F61F22D51357FCDF8A5D5583B684E5B7512E9E3A73EAFB81F
A2BFE12BFC5DD4B2CB77A753D73ACCE482344E12877FACA119D013C3D659BD22
5517471D591C5F933EDA4263E9DF577FD014F4A21BF76581B9ACC73DF437B19E
35CB549C107A012B5BF9DCEAB51E14110248CEA7261279A5C62124AE3A31758A
AEC9507FF6498A8B4D0A31CD3DF68D57886E8A372CBA0BDF0684E5D61B2DCA37
3F5665B058A04990E3C16D969482AFA02E9A126CC1930D50F78D92CE331CDAC4
7FA1B292F87FECA4C16DF99419F833BC8646F310398355AD678A94F4BE0B01DF
0E1132AF21FBF47DDF7B955318B6E6B2DC2780A33B19AA37CB005661EC037C96
824D31A2B145F78FE3604CD3AFA5F37C93652B4A7E048904847CE6EFEE4EA67B
BCE449A4478CB00F97B45468942A236BD10BFF6B402AC4A3BB1BD6D53F588BDB
08A074CA281660198117B261DCC7440E6AFFBEA7A9BA338B5B6757BEFABE9110
4370A61F775F917971EA3731A678CB612D5EB344DA253E3BCC60FCD3AA9391B4
5283B26782D81D6D0BFE0AFAC2C776297385F37A5BD94D91C2D374AD4C2618F7
54A415498BF61F97D644BB97828BB5C2C7D764CA42DCE8639493C4371E769DC2
C71487E3D585309CA061C1FFBF7F908632E079C49F06E02D53284B16F6276820
3354BF4CAAF42101669775B8E3551DB7E320049D73978B2F4DD142381FBB6512
26AFA41CCF6442AFE7509AD55B74ADA1167727EED241BE684232DB9813CD6D2A
793E115D82300DD5874377B8BC6ECF77057016B6A6457B1358F532930FBE777A
C9973CE73ED58CCFC135F5AF170DE1B7CA4CB44C1CEA76F5A5CDCB96C7B44897
A9E814CD31C504F220CBDD1B4E789E873C541B15F9BCAF287E960EFDADA89CC2
8CC810C2C179AA4AFBF81DB52273CA9B8CB127D6E01F4FC967AA369A457DCB98
E7247886EFB4B34291DC9FF93BF57F5B644474955A1E65A8A36234C835856290
BADCFBF1AE5B688DDA016F1C76BAF11B6FC2342BECE4D386E837085A0CD35E1C
7991A44827B1656820F86C07A0C1FEE677450E375EC42CE1C01F23A58B8EEF7D
D39CCE176AE4193AD8FA03DEEF2C4B6B5225141D63BDFDA27DB7179CF35E1284
298C87409C8342FE3E100DB2BF0B94D26D04C72F5C7804517FE214E755B12A93
EA3A79F5D8DD6D6820DDB9DC15FC7E3B84A11E8F8CC89E80770DEE3A4DF096E9
AC3209344D7F3A7FC8C1095B65F4F20D74AFC696BE52000AF14B81191B47A5DD
4048358B36EC6D8AF1CE5240D7FB14FAD28F4D7870A78B1DEC6FCB81ED639C3B
0B41DECB7BA607A3C5EB4056176BEA5164FC4114E292696D1EB7FE3545FC225C
0276E2002408C86D304B26559BB5439AB3AEA4C4518761BAB8EFC87A970C0C60
58FD90A72DCD7114E091C6A6BB9D6E9914A24376CF2112C680D35C30406B7771
3FB1D5BA543B54614527C76790DF2EB0099706F546E6D3F69F2B3EB734ED6BF5
9F2624BED22F20A4B3870011A97C8EC31C399AB3D2D22AB4B94F536E5BA53F23
E67497802CED24867330373F62B765D9A8962B6313854819AFDD2AEFA0B769EF
3280329B2C91439DE1947BCE9AD7CE68956220BEEC735A73533C00126CEDBEC9
D204244E2FB9F85DFFD9D779FF0CFCD5FCE608655D4A5D40CD136F6C5C5A0654
53CB6ABEAF466AF28D80325DDA5CCA2F085911F358F9FDD6FCB0FF74B00E7922
E3C61EA82ED80966AD51955173E2AF93ABD911276020933262611DFD315C9C66
5FF742D04CB85359A164C810E71D5C0D4218A0570F8D98B0CFD3047F0756C4B9
309DB954CD2B19B1ED8E4482D78F2740A8E1A53EE5F46100EFD2FB8E44D95388
B3F3AF988DC6F455052EC166123F300037B0627B5003A3D07057FB45BCFD9F7C
C7C1A98AB7351994133BBDDCCC9DFF1A816A8BEC0A93BD19393C22DE5DD11040
EDFB2F550873B059AE5B6818C42E989BEFB7B881A3CF2AC185C86734D9E73D3C
BF0C3A410EA68DE9110DAE8A2D6195C2628B8583CD4B2EFF07F6531BD673B469
D73F7FA5C7D0DDF863B814C8884914A7275FCA3BE2B0FE27281A815E3E5F3CD5
101F9BE3678898FA5465EB844537EA1548A0E2903D89A5787CEA2D148BAA4A52
164871CBB7941A8336D7C0257FC28073A687A9B7D485D7B658E03886CDB5B57F
3E6F2305A806095D57FC976EC41D14E078D38F8495AE9AF7941F1C399C92561B
68CFC08E3ECB7B78F4E87A88A6E5759EC3973431B8AF59A9F4BD880E9F7AC107
644437340F715AEAF40AC6534B70211FF2AC5304F5FA5B63C50DA24C89C9342A
86AC40DCBD21CE60174B9F6B7EC53B6439CAE083AFD9F4AED80B8D6814CFDC42
79134CC85A9D90D096D9AA3CF18568ECDECE2ADE0040A02CDA27FBAD975D25EF
3733C04D88CA1745AC82C3525A37DEF1E54650C32A16C22B1623A32E2335C7F0
379F56E23E4AED501AF52897D678067037D3306565EF24092F48B2F7B49F13A7
FE086E6D779486B5BD0C634E3A340352D62541AAD812F5CBA18F511B674DB7FF
34E0069058F135254C6954CC73A40C2CC0EA30598BB50E1E00E079C76E47E456
28DC91ACD5F4AB29A7413BDE3DAB71D55E9D6F8239590B0723230B5C50C3E8DC
BB7BC37BAB969F61BB982364602BA494118E957968F7CF54AD8A6B9FF2DB51F5
DBDB193A42BBC447EBDF59A1A70CBF8E4A0ABC00136B7539647E21568D2E3AC8
F19D8491F40AEC64002CF152659E69386A6A1BB6E7582D21C723830915C94BDD
C77D0F7A2DAD08D0CC3DC1AA3360EC93EFE27A8CCAEF48FF0E8BF0E890005419
D6E5CCC695641AF9864DD0D84E5FE6E9D16FB61E3E928A0F909E1B3BCE900A92
4479E8E6C2BA531CDF5DE823C44DB5EA2F6A04F5082E3D8649C4A33F62D9F759
47F9703C77BC8B07B563F387C30301CBC8938171E116076049E44D22561F5093
E3246A2492E1A92E4C3C6B755366EB1AF7F9E0B4B3F838C3288B7A29B4C8FBE5
1AFE9C3E4374051E199ED0AF0FA58A8014AD4FF653FE0D84F2C90A79805725C4
84F4E4983D813E29BD22600978892F87E7DBA390336FE5B18FE945F454C1629D
8AC8B48456C4CEFD5A7EB6C63307D4A81AE428DA7D76393033A64AAC4E7BD06F
E56D93E0D39CABD105112B1112F197B88CC65586B1AA02878CB4FCEF14E192EA
680356D919F3841674BB6D2838C3C748549DFB846F848F0FEF835EDF02406497
E74960707C80D8820C01A3B3AC72638F502D94355471789B6EDC663E585120C1
D2F365ECA9733EA281FD42E9886EEE76FB975D814D899C2F5B97E5C7536886E5
A7E58360D640B633884406D9FC3691B106AD4A4D182A6E11496AEBF7CE889912
F0D49439FBF580720FF07E234904BB66A9B05A63810E2DED76445569DF2CB4B7
B07C0BA0CF93C5459418BA123DCF097C71D7E5A92B83659BB0D5F4ACD53CA826
4E3DA96AA932ECEC48E2B2486A58C97C73A03E9B6EE162333398DB760205E099
92620B9ACAB7F1FDE53A556515EA2DEFC389D3B6B3F0F8192B301C6A67E4F84B
B605B8A70448BBED265F60CCF6A90D7978E32FFEADFB607D36A0D178192207D4
C954781E8B8AD2B034DC873A3E2B1CD1C8CBF64EAEF345488A5D1CBDA2AFDD2D
0CC180ACB0DB9A7B96DB8748B40E4B86CBF5BA6876E7718D6B49005368E3E7A7
A620751BED262B0D69D6E2C982D4F5F013AD5773C96985CFD026A59C9AD1D33C
81ED024C117105C0AA8D318EC17C38479F758E5B73F8D532BB29642F047161EB
92EA5409398C9DD9C93FE9558B12EDFC57AB51258E28B531B72C44826C5F4974
B8B3D3C1BDEB3932E221A99A848DE55A12EE117CD88758E92768C21DB28BE20D
02999423F934ADF2F91E9EF361B308DF72C6C05DE5888EE24A3B1335CCCA1EE5
4ABA41C25FC86F94C4DA6847406BC1D98A136DDE7F01033D11F65AC67C25D2D7
D450C2057E1D2FD4AAB7F8CA2DC2CC7021B6C9910F97D464AED0BD8712AAAEFB
A0FD18CB4DDE1590C5B2EFFF6665B9A67AD9C84EEB085BB1AC757D5AED137C29
6145459DF69E6B56BD9B242AEA496AE19098B4D42D6201FF0A0893C76A2E0307
63FCBD0E191543B20DF8F95CC040C66FF480B1F674D8BBCD341534281D335D65
5C10C9F501A14E58594D3E0C5B18FC1C8D80F101B8A1B50CF3FFFE5115B1DF62
FFAA6575D6BD5A9486412B916F2118F95C3F83BF9B8B1544B8049558A1E40AD5
CA2D9A65849D0C2A6877089E0C5C99C00C3FBC6B7DFCEF250F515C61A13C84CB
111D74AF6633FEBDF2134D5C6AAF352C4B91761BC16086AEC6F610DAA551AB6B
9432A7313276026E3E8C364F3019BCC94459F9C86AC872D828D5010736F58FCF
60E6D92760588F2F646111C677278184B9801FBCD3919A44D171E8C0ACA97DAF
1A4FB93BBADF3358C2D18F4BC32ED57E6E8ACFD33C18E766C7A57E47E0482DAC
7BCADA28A96C219D8B9DF26A0DB089A8F71E599142C5B7482D6DD70F7AFD7341
59C4D60926A60C529AA98A5D52D4E1E3BD939E9882B726909C347A9DC7A79383
2B5E0175390CC4DD85E79738198CF82B5BD1F2721BFF13A8D163E740C643A733
6EF1B8F2034E631DC137C5CB881292719CF0B0FD43C1B6ADB4CE369FED68FF97
4AC57662688E76D74636DF432C5B88429295604AFA7D1BCB6EF9C76CCA93DEBC
6691B7F7A072A40A777A727E15AA6D354AC22A04EA199E3A715DB903305C883B
D481E17205FDABF8297D7F4C6854E971B815D1494641D982D1BDFEC3DB3AA028
1F0F770BE29020E2CA7A8A2997E0A91E951786516BFA1343AACE1E9B62F3FBA1
4E5E9455A87403622BCE73E288F11579D753CBC420F6681F659D5BFC0DCFFA6B
0DD8F9F939525DF287082F27E2D89C72325AD24BA416F2BEDE690213255ED642
F21C1EBAAEA2B56C6065960D991318C75FC3AD39A8E24EC57CB11EEE2061C9BC
E61C46A54ABB28D861643F0D1308BCFD90ECFE5A32B2EF4185A96D4A027B6601
A5ECF9F5FFEE54AA18FA3B2A6E0159131525A5DF02799E8BF503BBC574E9B7C2
9FC85D95BE2382846A43DEC467F4496109BE3A23229E49F1F8C387A17C5A5EAE
CA9E25983450497E9BC0F626DE14380B5DC1066B5E4CBF6749ACFF44B840A8BF
BBF4146B50BBDC6E07C17F4CA47CBA614825998FBFB799866D69AF21FB2E3CDD
2BF653234C0D72730FFDD1C8E0F7B58DC94442BCB29682C21F49F22F927693E5
54A2D2BDE9C43896CE846DE2BC8210890848C1BE47FDFC387BC77EDC3D1808F3
779E42DF643CA8E0432ACB1D06B94D4D93B13192A3F98A08A920F8CB166DE8A5
9F3E29196800DFDB9743C5A7DA50C6F3E8B3F78A2E1825FD436CA05E17018011
452841E42F79BBDEF66B8CEEE739A4CAABC4AB6D645E7B378C3C21F3A70BFA6E
3E93A9386F40D62030BB8D830242462B940D51485AC22ADEDA0B64F06576B0D8
171F0B2D9FD51CA2A141602A955D12655463D20011645D4BDC87564A45117247
7BE8F8276D8DF81E6FA59ACA7EFD8C2A27DEE996677DCD5ED3A8DAF179CA381C
95AEC0C8C6B2E929ACDD05BC9495225ED578F7CF09F27545167A67DAF7E5849D
8DA25EF514B67E9DFC770A6E2661FAFAD890985E8C486B1E33324C3A8263BAB4
CA23BAB4E55F99D43EA3CBB6E617AE69391946DD0433A04DE5745075D9B6A57A
D0E4CB90B6C4524502104EC39AEB74C8BE854B7FC96EDE4949F58303FD2C8F8D
F4DAE6C3345C655AD7BC001A9C66EDB47A25BA693502A20F522BFA692089F825
AF007682AD75690E32BDF81EC26141FF840D6390E91657E625903276DC630136
A3F465E9C9C275E63E6BF0F87B7A5ED9228D78BD4C32F06481ECBC1FF63E1152
8879FF13DD00473099236D2CD362A943C57B20E8CC8DF5FB71C6F81D77223307
A1EF4D7E87C8D19634F063974B5F9F9B14600F838D51A6A02F95E9484675BAD0
10F7FD79555F67DC1C28421656A7B64170ADD02B5675533430642CF2B55D7D6D
BC8D3050B56798F1FFBD97F88E154C559EE7F7BA0FDA660CE395A2FC4B54954F
AA5C3FD783BCD11B9B33C001B45089348D1EA898142818A9BF1E292DD3277BF9
0C82406EC2C8C26AA649D9FA165EAE3B5B1E86D3D8761D2B4EFFB9289F7A33A7
0FCBDFEA46EFC3C911EE70F554960982441F3F8222371BC2E3103CAE9167ACBA
F9AE14D6929D2E29A584EB67ADD1BB34EE4BBB7EF8C86036ABCBA337F52DB2A9
72BAA6F2DBFA3DC600648129AD81DCA001625BB4E316CADB6C27B970A15BBC52
06EFA588DCB62F15C7C891E7FA2458301C4B7A515F4D54F11B7FED88C39F7830
F0506DFC7F5E918B561966A0FBE06FB2870B7DC64745B64BD46E1293825ED34F
C7694EB22203699F7E013CDF0C68E1ACC9CF402A1CF77010A10E0048FF49B856
6FF21312B1B519B0E11F41521122B91A7C77006F6CB5BA50D2ABD32D3BDCB50C
AEA800D68F6A61DC73517E73D56F121E17AB719457CACFAEB61F79BBAAEA5835
2FE0A2E8CC6BAFC9108C143BAE4D842ABC22DC29C792D6C6A2602F94F2246528
767139F9D19920067A6C141B5630F6A32C0948889C1470389ECC37F90F833D55
5708519002544F56507656428BA3275FA2809A1FD54D0504EB5B46AAF3F324FA
E9AD8410094F8AEB3CA4359E0AFFD07F6F90F3777D85DBC4EEB7B36D5284D46D
5E57B403BD80503622E3DC52B5E394A96397DE9A2CEBCE56E36305F867BC127C
34020350BC541EF6E68B3C8789A331AE524F879FB8DABC04A45DDEDB959F6422
D3C3F6F414AA70680CFCC867C21E79A54744938096A8A2DFD0C8640B7463EBCF
FE3805E49A990DEFAA33C759D927C655CEEF9DF595BF608751EE750D4881B550
C0B89B9C93B45D06D3CB5ABC5A812342569D2E28F5AEE9B1A349B3197BE42F08
868D0D0A31B0FB488B1622363768A7061AA9B9E185628D99C5917BA877D4C75D
644C6E5BEA6721BC6344144A5A272E18FC08C4D6BC86DBE9B798DAACB48C4969
73FE2CE3F4ED0429D0EB0728B9A33B5CD820E5C0D6D3EA11D0EC68789A98F66D
D69FB26B990E21210B9382262317623149460308149D1D52BC200A2A684F0778
DEA1D774801917A330C199D5C0EECB9471FBFB697F201D699E836C73A4C5B22E
A5D53ACE0CCCE069ECE7F3DBF3522B5F928DF006348E42BB2C8B42270FDD58E3
D36098DADFA4676A57919ABD3D64183E494CB17895CCC350FACD363633102136
6B98BC5C640FD3D25336AAF3C0473C08F26500A40C5A1F8601EBF5896F1D70F0
FC743D5CE3BAF198AFD72D6068A6202CAF46A2C94B796D9D4E4420611EFCDF6E
5AA52A7AEFA40E1CEFDF98D5DC0F5ED3F94FEF8021D6E78D0D7BEB6253DE007A
48AE905F6F63815808E067841DB274172D63A08A8C4F93202057309A75A2630D
93BD5B39D09C0308E9F31A9848DC7BF101FDA6A07BF2E172315BD0C029BA35C0
5D40CB800C42600815FF19412E5817F97A999942B49315FEB39074E88C7E0B28
4E843C05DD34160AFB2B9A1AA9633EF4E0C6AEEFC531787FAA1CAE298FE5BBD9
F08F480B6006DE55F7E0FB1FF7F17CA023962057982A873414396223B866866A
79CD5AEA16A57FF0229714F18938C53097942FA9B81F56755211AAC86AC28D3A
A5AA2B15BC9CE2C0A0B7972C7EAF6D315847C433AA832154DE806D746157AD79
AEABDDC6F352D08D25FFF730EE36D663F578A4E4389B79862BEC1A10BDD17550
7F42A981A73A269DFDAC31C4EA2937EC546A3B4CA1DFA9F66643C9D712B31AEB
1ED22D08A8AFB10650CD675D795020E320369D471E96E46894ADB0DA12829285
4A38F2B40CD4A7175C167F1D515A65A766B21FD8B2D9CA56E4E0BD17190E35F2
F18E12DFBF9A7DFC7FD753EDB08BE16856FD967C84FF7E24AFD189A6B438BD6A
9808C3637A27EB47A348A6887BB5DD354749D114A9DC7F7ED97C7B85C916ECE1
7FE4D447389911ACD6D14CD94E48A2875A9C61733CC1D4B158A3A2FDBC71DA9A
3795287540FA523C9CCC1A831F295C073FC095DE83F19D84FB8C50C6B95B42B2
8FF9BA08D6BFCB24F6F8A11C562C9AEF6A12FC888E08561A5722CFB912E68E0D
F296A21FA64F95CC9F1BE988B928FD15CC8DA6A5675A8B2D47F9FC8F436D4174
80A879FAD7FB8EB6B2005DF118FEDEA88E824D1F6B1BAA261A1A92038009D463
40AD0E728C7304522A1CB41914B052BCD256D8E49C4040FB077CF71B041F933D
8772EF4495DE8ED0FE9E0084C402219B8E11EE2E6240394D50269956EE5DD59F
E7B5D33E95C0596E69B0D8582BF7FFEF60573B7F12107A8AD25252E31ADC623E
08DEE72D858E3C30330ACB205818DBF11BF032CB56626F768B4C4AA22E81677C
0131BEE2BEBBA2D0D968FBA64A4EFC7761118C9AB1D0E2A0BAB139EE60A9D77E
9C7C777782BB2C7C4A513748CCCFF961A425D5D76D329F9F3847462FC669FC30
E73C715F332D0DFDA0BBBD3BB6D9A1C1C45681DAEC009676C13A8433D378114E
D2D5EA1BFBC252AA0C4B3DE6ECBC053F17923969CD2FDA85F726C7E8F6FD00C9
BE0087B4A0EF3EB9D8A24E99C851384F74D9B7FE9BE38B69FBD78F3A09220C00
FEC6B27F5B953059AB5EF680FEB691329CAFA9089BE1C24D6A6EEDE8AF4CAA0C
88E0177F8E06ACC4BA7A6B5AB9B37B1A428B9D89CB6D419525A38AE6D8793712
E10E1E4C0FA0A3CD03FC2F7D727573631C13AA1E11144BE35DDF4042E0D95D5E
2ECD376FF3BA253ACF2D890208913DB4BA378A9A949C5200A2172D1A147BE51D
48B7571DED93EDEF6D42661CA5F1CF473E14078C838BB219D1C7CDBA30227416
EB3AC6861D8EFA33FB882B1A838EB32A72B592773D5B20BDC1BD5B5B25554206
06FF69CDB44DAF1C9280AFAE1185CDBC109A92994CB2711704041DA080378905
8417CD62EDBDF91FF29093716296C9184E4A50CF61AE01897E4DC36D0BED0E46
3D2A9FEECF4B7A3437026AF75349BD70DEC8C88CAE0F8004A5439B0BC6244137
7E8C8335754F9035D0D6507B6FE76705575BB6FC251EE3A0955D084F28DC394C
C4814BAE971161E8147D06163F55203125AC1A87CE3FF0F8BC4152482B6A3426
160AFD698D8916025591E9A4A6470749568A60DFD538A0C3EE84E9B6F9EFB8EF
D2E7D9EA83DA89721266D255898BFF055BDB423CC1AFCE395498A26AFDF50D4B
D6FE7576E5439C57F629595DDAD20BA9C07A3203ED293F03F2FA37064C29E8A0
BCED8AE3DE899FB0D6E22B6081ADC0E92C4DF9C9D1C095809A9617F35DB822A7
BD593E62AAB78FC673C34EB446FC714EE3409C5B954BD4F48E6F73824F065172
2A15E962343EF5418417866DCEA2A114361F03B044BA26A36A7E35FEAB939AAC
9EA79BA4428F62D466FC5999A3A7CA5F1B46E2F402ED2124B55CFA2A11E94DEA
7E30D38F948ECC71A1C610752BB920B78A375D7AADA3C4D2230000110CFBAD08
0487A0DE4C90D2B9450DF5D7AE5C7E7322E29C7274CA89D968C6AA4D02756104
A8578699F3CD948752BC6770A563B4454CCF3440106C5DAC98D7BC2991EC73C0
AECADCD04154040D5440475E2D23F1A031561E080F38E7119487C566B7E27445
7047812B1B3750BE703CD3D3D983682998A18B6464692F2E63D7EAA6C3236F01
DA96EDC5D230749EBA5EC9BD8782972916DE4FA5DD5CDFCAC8DF3585341758A2
F872543A0F93DAB2DB1C6B2154F86377EF3DFCF82329617B808DEBCA55845A50
428F473F465345F0DBDE3B23B180E3978C3FA11DBCC1F96BED96A2266D799C43
CD35DC558FC7BC683AE863B006D48235D089F5EDC201E01A455B619632BD6CA8
2F071EBD122D313DE23D664289B70FC61A32E4DC92A8E5770089AF7FF59CFF06
E999AF383D3D7E771AE70F158BCAF4D257FCB57D56A308DD28AB7CAD7A97DD64
B7817832B287533669BD4A9080E3753851FD6F09907EF888E22812BDA78C93A2
F35C4086262C5C8C14A8CE012B825CC9F3200C4891E2354EEB387FC3D97F3C36
1F6181ADEA6453832307E899A70BCCA0A445B4806C2C6F2E38F0F48AB5B38A9B
F93E08A7E6C035FA7BB6087A251EA91A9ECA37B71C86A371A5546775820BECE7
1D07531A948DE0ACEC2AC6438339A6818CA31F70FECF90E3F511547C2ED45E7E
4913744265D9265707A3915BF40BDA5289EE5E367F3BBEBA97F2DFCA195992DA
6EA0703D6CFA07C24B8410640DCFBA74DB85F8B38DC76D34571E5EA25626FF63
E9C61D0CF9F99B184CB92349AD890B5ED749CF1C0ED398D806DE7242CBFF05B1
7358F867375B70406A3059BCE6D05168CEEB56FD9C1C7816B0772A6F1DB37283
58C8C4B4C97C1C9D34C8DE8177A0168CE4CA29063549FC517DF4ECF7E86A7AC2
019A32206B4C045A0480B73F6E7B574BB129A996D960C2F5134EB669A11CCDAB
F819261613DB4ED7C7001FB3960E8FF856B9C5D26CDCD308D847D4142B75D3B1
F8589BF529B0CA1F1FB1465D69B3E041F9BE02BE38D4145852E9A392AA4355CA
9CC0BED6565F13935C4987E3F9F3E4E7E14A31B840F325DB38B94DAC52FED634
A42D88C1DC3A449F31682F8FA1C8BF228A564B922A96780B081AA550B9BD2348
55EF223495094638410AB6C79B5A56D11A1E03D70C8EA3683DCD542E978213DF
940E9E0B848753C7FFE1C5452630E85373ABCDCA7C7CE1F715F51C491AE59046
305C5764C0796AAE9A1C67A2B6704F380077D059A0CE633D7EAAEFD370A87118
E2F24AFF411AF1C0BCC66EB0E056AA92202BF657C8C5AC095B0F2D360B1E3CE9
4E0CC48165240C96A7836F70528331CD704B99BED2AC6910598A24AD1147DFC9
6B0209B151C82D5450869814E67970961B9743716EC511D7DDEF0065082D0F19
F9FECD5AD2990460E834537587F8D8DE9E19EE9688923AC505A4820848BE677C
B9BF9F7EE1CDC5766BF1375A394482C80EE2FB351F51B5F05107DE6BCCB1954E
535804C68CF0CB4C1CD3140E547BD4615FCD1F6AB4DA4FB0E70C6B7A9081379F
13CC8076F0B699B430AA1AED07123F0EC9EE6AFFDCFF3E25ACB3B76F2B4677CD
7EF3F31E8F7E23EDD6AF9EE2E8969733396EEBB8AEA38F3E61B9C263782C2852
5C47F9EBF553360D663A06230FAEA4FDE3C6264B14F1E6A0156EFBA56E319B4E
18B692CD35C4F211BC0515BC91E6E08EAB1D34869A7D8A0F5E8A185D881A3D3A
71286AF4F427A7CC95C4BBBE834D658FBB5B1F38046A4B50FFAD7C7246DF816E
D0742B0D27195BEF085D9BA04FB92BD23C4A0C459D68A51B5CC3AA1B3C25CFCF
5F9DB487C814C6AD45505FF3FEEB228ADD863B4CB6D198A4AB4F517E3EE8B1D2
A8571C25BDF59A2118E36FD4A1A2E1692F12E67E759727995222D43C6B006355
EF645153CD1ECAB0B7B4F1A9F60B40F0B1AB6E1A413C48C47D6594AB9849A8B6
ADF58FB4EFCD3F3196DFB752E8FACA0436643B1C7D35A90397BFF1AA1E5D6317
115AA69F0C09D8289D9641CBE6173CDB05F2391268D5299AC321553681B766C3
6345C1737CB8C9038ED481DA3B43818B587C3F6718BD45E6425CF9E3F0ADCBD5
91EAEFA2AA817BD291485A975D287A7FA37BED5B770BECEB9101DE759B414F12
E8551CA67C6E755ACE7C8765518F2E26BDAF29444AA6354ED029DEDD104EDEE4
E8090A2D068DB5FC9C94622988674BF59EF0C16DA7937C47640384CC4FB069C6
A4B0DACA0580F1DE9FA88038FF5FE366359DB2202A66FAB754C0CC6D867ACFBD
FBA86973A48B8676AD6AF3A6E89FE3945ECD658EEF852DDE5E8C13885A5AC17A
FA55D44EB1FDB8F56CABBFD800DF78479E0F4F8D5907F4D246EA484D928EF2F7
9ACAD4A3B9058A337CA1BB50656048700184DC80F8658A0F3547248B92E2C206
E5ADD81FC2F1F7BFE4C9755F74D043687DC42C0C26BED966D8D4D0D6300DCD70
74E3EBD48E76D10D97C9FCEA9EC5C6BF546C74390EA81F2C414B76D91CDA7562
3EFA7BFD1B0FF7B11350FCB4B037C5B23412A454FE5CC41E2441EB38540EB75B
ADF185EE077346A0A33C5E6B9DEAF603A4AFF9E41AF96FF977CCDE4BD130F55C
5E14932A9180F5CC2D446D6035444B20C5BE866FFEF735148792CDD0BC1296F6
9A83B3E32C958B6CFE3F40C1B6BDF9DF31DEE5D4A6612B0A5A6CBF24CFCD5FAC
BAE99861DE560C6EED5ABBEB522BF717BF845984CCE53BD3DA66DDC5FA7A2001
252AB46D6F0F8DC44026486557FF55F082C91142D4C6A3AE92C5590A05E477A8
4119D732A08E18D1468B5F8649B2F69FE0395F33E2BE2A4FE1D1CF110FF80AD9
68000598B186BE4E18060CBD9DDE1CA5F5A70CC90F5BEE0DAD46F926DFA4D561
7FBC5CD6FB77C9B3319EF90CA6000656D4E84399C887CD6998AE05E77B7C80B2
74CE20EA63C5329DE7F0D415A53BB85125FAD905FAA79F78A88E141733FF658F
0FC4B38217884828E566A17D830B71CEC9DF552927C213E637F6F16DF4A3B161
D949A5BDC0A444D8735A1EE75C42F308557EF53A568BED7E947A7F830B80EB53
7FDBCF080FD95CC22E63ACBBDB064D0752570F41E4BD7E6698A5F4E5CCC644C7
3AA056F095ECDF2E3C3DC40F63EE477E500DFB92EB516E153303518A865C6C9C
122DEA8D072A49B2E3D6BE93A9CD219DE5F7A827ADB75121
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFBX1440
%!FontType1-1.0: SFBX1440 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecbx1440, tcbx1440, labx1440, lbbx1440, lcbx1440, rxbx1440.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Bold Extended) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Bold) def
end readonly def
/FontName /SFBX1440 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-218 -316 1652 915}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA0E2F461BA16EADB32842B6D00C76EFC613FE56C
378A7118B0589B3EE5425457AE310AFB3829876138A59F58D965843B709A0F4F
D1AD54875BBADFC803A755669491D9E98262991B9634084E8E2BE46EF805B219
D18DE35ADE9A8DBAB7AB761864BFB6A27E5B421C32CEE4569624D9308A32B426
FCFA5CEB883444393CD7A58F9CD522BA73E17492DDABB7E00B2F6BE47F585EB7
FDDBFF33F1B5E5465287717D1580105BF3929C09EC621CEE9606EC49D7051A00
11935EE728A2FD47BFCCF00C93EE54910F77C1CB8622B9CA129D466746BFE1B0
594A9F0C785F6CA67161EA1480AD4EC6781B9CAE9536F5D3AC6D447F16821F77
AE2705279CF3DF4E1E9AED81A0CBEFBD61808E2D59AD970264A5B66D1F399DA2
55BA0AAC8EF1A1E16FD8240D577F5E00E0040EEBCC193F074FEC48DF30882551
E23D64EF84283F9640AC5F60EB1F26CDB79078AB0C0D97D1D6297D092380D4B6
6A2099F06A513A78A3C3B82A6DBD985A0DCED7150B19FA42991A3D408FF95978
15D309AACEA8C5C0AE812F50330CCBF47B4759C550D49173127DECF05D783DB0
978A366ABD3CA7D9BBB6652459A5E19F9630CE75C2BC7BDFBFE0EA3D8098CBB1
98CBE02F196C0A0C5E976DECE72778358CF8D0A79A8B5629A6322716CBFBDEE4
934E8782E716185235712845BBD03896BAABBD20256DCA63EC65837DCB8FCDB2
F7D9510BB613A61AC18E9BBC5F38A28D161353E9B1AF632B91931ACD4009C8F4
9E83ADF4A7CAEC0973D8E1E4C126654996814BF676CEEAADFDE26D82BDF7B410
843B011395D00B096DC3D60FC106735EB42BAD5C2BDE7172C018B7321E63A82A
AD27D18847CD91476517A40DEE96603CB5EF8D5CF03997EDCE29D0A9F6BE0C3D
9636F498DE4FA27632AC5B407B53F2787DF1D113F94B000D43063E2E16F431DF
3C6A7F5ED1F9FFC68F7FB8E6B627DF2E049D234AD8989A6B011753E4DBD6F4A6
1C6840DD45D01D566944AFE0AF536893B02849B46C2EE9A510A1B50B928EF40F
0DD40E215B8BBD40BB58CA2BEBD1777A11A604291E17DE65574A969021F0278F
3C22A105CE53D3DB4CA5848233A91D8856B291A7FF97F1B6024C548364EE1195
44CC5F4AF1E2367E46F058310D3B1A08671344A0D9C0254286D5C66899FB2EA6
BFB56EAF9A0B2DEBEF4034C031E0EDB2890D3E5945EF265D6DD27E4523CFCFD4
6E3EBBC2DF3943D11F3A188AC3B95B42B22848D182C8DA6CA3CA9A0EC9433AE4
A9080A7026E83223783D603659896901BEC8A125C54E03BA14937712A4E0DC4D
34675FBF8A4163D000A15642FD37D1338403D80EC239ACEDFE77E2BD4BA97185
1B152DC603F1534FB37C2F4282AF779897C3701122973255580D1839C8F771BE
90DC55515FFEFDF1E30B033E1ABE773CBC3661D002AB19585E03636FFB1955A3
5FFF59DC31336087F5159EDD4BD9828C28C5F16969A59D638F40A8A287159CF7
C8E5D8603795121827DD00C71191783059A4A9B9E5B204745C76D00205DE4649
A7A00A35324AFA8E7B0414EC999104056F3408F248973B6DEA4771EBC36F740E
18FCFA29F15AB776E8000CDE2F234B174D8B17FF27457D09F349C31F4C3BDCD9
EB78E05283C4498EB6B53BB8522D1C366FD4B613CD94A42895E4D8BC58DD3D51
A3493E9D165F3ECC15546693D9372E35F37315E6CF63B4FD224F4DD35D907DAE
068C755A7D1DCA5D48C9C466F6BDFD75AB0D39324BC14C95C4838D94157DF999
DD22E92290E6AC7243F07C85E0CE7774D56D14A7135D63DB186C9EABC234EC1C
90BD38CF875512A503C07967C69305850D4CC2810636D594C60889BA45B81E28
74BBCCB91B354102F98A8527350E33E05FDDC56731E5396C4285F780E7462F9C
D9D5731D4799400838667E8CEFA84D08D88C62EBFFB218D23A0FF9B287FE2DFB
9651BDD4383C30B0554A12EBBBD33AB0C871AB44177E4F68BA70F3C52A2BCDA0
DC6B0969D391FA8209D8A5AA4E98F9245906F1ACCD776CCC521B50F6F17F1AA1
FB0AD3E37AABFC7D459299B5C55803C7080A2A640B1244D999AA30F6ADD8D67A
E0A7FA3CC9B137D6546ACD5FD8F5517AC6EA0D8AF60B505174A6C468CA4EF2AF
E35798B908F5087CBF883F08E8D176F9855A13CE21A6312D755E2DA3C783AA8F
645A3144F9CC431C92BE8918838E185D7D38A556DB0B64C7CD01DF8DE9670A9A
FF60106112583633A6CA1F77A04A784DC774E603A7654C2797620A470C7ED55E
9C7088A62618F22160C1C5CB2D5340BE2A1943B8659DD7D7207A94BF7C54CA84
7880A7A67C22BD843E8A079072F39719469ED006A68D1BC452B617A5EAC78760
06E6C71C1F5FE888E5010BDCD29DE1D58D771E57D8350C28609292D1ADDF7AE5
31E1BF18499DF8C812F593C198A87FDA29FB63B0F668D0E0A1D944875C37F4EC
1C41B40C7BBDDE96E9AF8325FC03B9C4879345AD1FDCAFB9194EB047647F445D
3FF7B9BBC5928BB2B1D947135CBC6C7576A576DA0CF2E4DC5DA9DDE5EF6336A1
F504604803DB623C98FDE74633ED20AE9B21FDC76A82E53214F5A0C4C32A3EA7
434413152DB08FB5149C8B797B29408F1C60D067907CAB448E358E36B770D901
A82428DA343DCA5AE98D1387656D6EB9F4B6B0BB2844FBA6828EA5B6857738CA
9C54F44F4C5F8E12D8B31823F01F93008D171F58E2406D3AA08F73CA2A9B7905
91D15DDE7AE487F8CE7973071A6B8793903332E5A2805325F93FFC3F4889B25D
0C84C26BFFD4D9B82BF5D1D52097146ABDFD0D3767E0498952A400CA2160A666
8BA9EE1C5004426EFCA07670B831B28E117FF22F8337966F12D889E54A99129E
CD573BEE2718A61159F31D8A97E55DAEFCD4394E9E2B664966172CFA829A4AAC
D811B9B1D1BC2B4707268970540AFF6D3AA27FF6B3F60B61885FFC8C893CE42D
784528D68CB2D7302937504C472AC78E697DF83922EB9FF7055BBFFBAA1C9530
B9230A0ED30CA3A26EB6EB848409B2A9E909D38B90053A65AE1FF20393FDE8F7
8B5782616386454D40FD11740176A0393434E8D2415AF84A2DBB0299A220CF97
D03C016DAF6405C9F6D17EDD30DBF131F8E70555A86D70FCCD46CD6181C424FC
071CD84A3A3ADF88149D2F66F5579AD261ADF55799C5DAA723F0C7BCD44A60F2
BF9BF0C607E6EDB6407FC4A23A7FDB6B95513FA6D9539089EC0EEBE938BAAEE7
0345F7E5D867E59AE280B7851190EF3BBC0BBCDAF51601B464EC0DCDD454C386
100AA9C79D45C3AC19482CA68151B2A144319FBA90445F3F40FE3CA91580AA84
45848DC244DCD7CBB3D4B7C8624D19515579C5D6087F1FE53CF278BBE5443CD8
CDC4277E4505203BA11F908AFEC76086DB1775DDA9034F403808E8AE62A7F352
77DB7CAEA62F6390BC183FDF49A328457F8DDE1B9A4E296F17D9EB257440BBB2
17F5B4C4E459D475868A455F99D955B146CECB8C340B13DDE4627DCF4A84465D
040E58D4D485EE5EAE8CE39156532BF1805ACB9226C67836F717E13D8D145F8A
8D5BF04EF35B875A08EEADEEEE6E1DE6FC84D119B0B1AC6692D9CC06F195DBC9
2377E4B3D7E4036FEBD5E3BBD5963C615AAD610E91A7B6BAEE10A88D654B53A9
89AA0B5801A4AAFCD959557B57C838629A22823CB6F9C1C6A7407B41E0674CFE
D94BADCE1E95F2251736D55A53F94F734BBCBE96D74CD2BB96B2CC9EC2DDF1BD
ED9BD92BB818F8750FF79F7B086A27B5C3BAA441DC9D15ADF1CA83D34AEC3008
AD726B6B1823B60F897FEA0DB0CB2988FFDA6C425FFF6966BD9322B78B75EAF5
32D90B411986A9B8EEB3F9B41A169F8F4960AFB153CC2CFBD73BC06D87470E9D
BEF2456260FCA8BC87EB7F0C5244807AB54D406350F5FC988D179B2EA3602D04
816666C1B9316FD6B88968C67AECF1981E7C873D1505AD878BD665189D45C424
83AC92C16865E4C83F779C4B8C3E34B413B86E960F24121885AA8426EEDF2D8A
778073CD72CC911DFC194F0249BDFB1944279C1DB665EF387C9FD4AACCC34370
5FC9CC20664C917CD10AD1275DCD28A933A933830B40E96FA75F393D488B762C
BE91DB3E354B976C1294921411757944A67E409BCECAE9060B2F81895138C2DF
1726237804FB337194ACA1E13AA4951AA30A10324073F2400FAA367E5C522713
51B68F772333C53666E35B2EF7E0CD71A7D5D51EB5688187B3AA4BBBE411D424
540542E91563514FCFE9351277039E60592CE8D236C75DD31D2ABB1E389624E9
BD192FD5256807612EE76BE91554C1329233EE066D22E66939BC04856CDC7144
C8F8CF48B739DF9B3C9210EACBB0636882BDD824124D0473EDAC9DCB6B366370
BA0D94882CB888BC6EE9E1172E84955B590C7CCCE5297031157184E1F24B8530
4F54925F494D827794773692C8AC0DD5462F796B961547897E7872E31F12A397
0976CEB7DDB3BAC4DDA491E2336382C5C7045535E44A62BAA595BA96D760CE68
694390AFD127A5086F524B5189BAEDCD9E573A2B023352069DD4CBC8FDBF291E
80AE407030D8A0AEA211A77BC4B7ADEF3F2D60B1AFA7A210F2585261A484B2C4
B8B5C38ECC1BA79C3424E56D4A0071790393BFCD8EB9786D465B4A49473A8EB5
CC4FD77D7C4A1A158226AF3FBCB81FE294BA973BEE103D4273815032AEDFF3CC
A3213B52DA492B818402D602A9644C80800DD42D0090715A76DBF57784BCD075
E2276AAFA901628CC5654A8072E1250A760DB31D8A93291DB20805A99571F6B6
E7B41DE67E0107A3D2AF5AB447C5A5D876942803F76857D2C7755E0DA1179966
2C61BF17C1AEACA6F16A5C09006486D2556472E7DEBAF86FB0330FA440463993
A45973935C91CECE91972C1086C9A33D07B9C4B889F3E306A734BC2E400716B6
4B0C83A0646A4031EF6BA303B5E47F691C2A8699E0D111D9EAC97A51B3328CE8
F6F8B03D46DFE3D9C2D6FCF0AB443F6E69C007EE761A6BEFD891834C03BEE558
330DA51C6F72AD03F99E12BDCF1AA5A0FEA464ED04E8C7CF7643E89D5BE37C06
C71010763CBCFB5549ECCCAD46169772EBC07CC034F83EEACD892D6F66BE3CE2
6AF94AF268C65094495C7220A9E98ADD759AEA19E00192ED717537F7027DB398
27253A933E67914F206445DD18BF3C69D2737C65E467E6509C87174926B44FEE
FE58A20890BA9E433529A1EC25D383E1EE624DDF02A81BBCE7963FEBC4BB4E10
CEE8039BB28B750E876E5B62CD35A5CA39882C6B0E2211811609CCCE96440E35
D4BC50E74F451CD6DF225B07D723DC008818336B5047857682DDE5E9BFDEBCF5
8DAD1BD8C209AAB55A3410DD21E3EDD1958A2224473C9E8A4E32931E4E5A0A12
CAA6B97511F2E5ACBDBB43356A15ACD45660016B380CE26B9807513FDD9BD16A
E417B2244BA942EF6E95B907FF9D9E2E4D489FAC50C404CA14AE2F074713343E
3E29CC183335ACF0540BA936F7574C38E5790F93C0BCF86AAEBC2707848BC890
291F4B0285FB83C5EA4825225DCC23DF406C1996BC7E8DD54B614365B6E3A861
D64128CD54C1BC6E30E64FC294A5B1C1C5BB7A3EDC4C4DDD4BC9E96C8F1D0F91
929A1D45F816F8A8869044947CE709E5F572701A3C8168A000D741AB7552E3E5
95E00168BB085F6CD5BDB2158CE07717E98215C37D3EB3C59F64FF76CEAA77D6
59E6179AFBDC82C3CB0428BDA6E539CA9C87B9837C9D25D99E4454BDAEBA242F
0E55AD5C5266CBE3728B6F6E51C6266F2157E1919634AAE8B6EB70CD8AD21900
3814459F0F0AC2525DA402976E900EF1B94B3C0566800D4EE6585B31D75E1E46
43A1B6990B30C62071EF0634548E8041D20129E5C06469D73E708BCCCC03EA0A
23E3E67D7AC8C5A90D47F7DA125579AC4DAB72ED163B00ED3E874EC152E3A4F8
18C3B0F34CAD095BBC12A60345623667C89B016A6D8FBDE06E3EEA3C2EA172AA
BB37E70496A61F9A1167F80F7B38364CF6C04902CBC298EC1F34E11015506394
FC1B1350787F4537DB88904A586C0C0AC02A1324ED78152D514150E9EF83FA45
C008DBEDD2808DB54CF9EBF7863B4BDA7B29B8F1D86F8EC12DC90B5340D7538F
B72443FCE434163479FD60F969647ABFC84016D55A0DEF4C5AD395BDC369254D
E01C7B42EC149530E0A6BD4B0FB89A8959A0E13A259D3CB47377A99EBA1D3CA9
BFB1063B0609ABBFD78FC3C4F945092B97D62FA133F827735203744732E3F981
7015D9D0C5CF0E4CC19D5574DC1FEEC463C38772064FF7F3CF134D75D196832A
211FA36382F9079F90D1EBB5A97CFF90F3AA69CCEA3DC9DE6541527A9B52F8ED
233FCEA1264EDB1316B9F9C951618E318D1623B2131794604DA5047690477A85
9103CB5CEC8C386AEF3A87A3AF742352FEFADB83DB6C6177C9CFCC1A683AA3B3
BABDA1DDA80E382E6F58CC96E895CABC822A520D6F9C1CB2EB08486BF3EFD0C0
26A07106C98514F10AF4DE6C3B1D8C36ED3C2D08382EF8F0841AB8D7DAAB55E1
F317983F27EE740B4A108352C80397D050F0A2418FA74941DD8BE4FE8E436CEF
385F61A3ECE62FD42B5EA2E6926DD520389AF363A8D67761C0F2A1DD706A20F9
AEAA0596846339DF5006D56BEBE3BF809850C177FF59177C6B64B177C97BD159
1EDFF18C9C66A976AB9F3DD28A41208CBD9CCAB0A1898556189B7697A9E47480
4EB33FB6AA126236573D7A1C347F55648DEB157823DE860AB45205F5B3FA8A0D
0886AB8EC4134346FC239A04A31F23E90FA0685AFE94758DAC330214E1E1AAE2
8E1F26A25722A6F6DDB768507DA2CF9AB31CFF42FE6B4F048CB3474F086F382F
10C950B3DF19AD8F3EF8E546DD41B512718463C1D510072E97ACDDE84F87E7A0
84F212AF803F2FB7FB3A3FF074115EAF05E3C20CF999DBE8BF9DF213896740C2
29B18A9BF270BCA1DC271572F40689072A533009B501249A21C1D49A8C780CD0
6EB44056E9AEE33B5F3008EEF55634DEF095D3FC3082F8CE1BA6B916B884A2E6
15B3D5859FBE06922B232B0AC83BFAF1724F216460D95E9FA506F76E27FA7978
71B9A82A7C63CA9BAE1A9B31BE82236C7C384C1D40E95E37676AFEC9F2DE4BA2
E2353AF1E333AFCCEA52A593DDBBA89A6045A9720E2464C6958033AE0406D28C
B7B7F400E8EA7703F10907D61BE2164BF79359D1B292A0DF97B4548B76B14E97
2ABAB31B7C647B86EA41EDCCACF1BAA41E8DACAB3F519B317583094C31D96C46
DA75F5FB1507ECD2353D88AF88C3174C325D1BA549101079D6A38589A258D699
E6BFEF23CA685047D8BE0726CB5D54ABA5531343BC4AB9E331D0A01CA5640B70
E641C01EE8CE7305761322D36A96588978454EB80264780C08A94D675FC3A5E9
1ADE8C41C8DBB861A5F80CAB3A5537AF14033BFA27E3E7E29AFF0FD6F9A13903
47AD4A83514A162481D6B9B76F3695B0B465A8585AEE6B666391AF8B33B47EC4
BEEDE4E59652E4C7F50215253E567DFE2EACC4DDB2F28B26B534C88F3D4D22E7
02CD92AE58681C7B701505D88F58C22A12432CB1FD297008A7EC0E0FB463BC90
B90A84060920FFE85C041E338B9C127E4B1E0B5AA0AC40A17A1D6E8CC7B29EC6
18CA2986F81259FB76AB1957F94CC63C614E7BAF20D77D0053F1D94FDE4D3475
8503D858C464F3D84206002D9FF129CA0A23C0112734EA50A82A3E1CF6203512
05AFFE1EAB195E947D18B66318468148EE8FFFDCB5E03A31F2EA80DF2EA35C18
0B6848B371324D591D1FA1D73009ACA5E85BEAA6DC682C2BE5F05BAB96F90855
6F02CF9EDF9FFF779F4C0859E29006D85160D6A99DDC8E058E3FAC59AC5F429C
0268201F5886E381DA2FB3D81AE4F13A6164D29450A2B056A708E236CCE812F8
30C9EB2C48EF9B1D4EAB0AC5F00FCEA69C116A73A371375FA8CC621CD50860AD
7B4DA6E2456913E4CD9B1C830FB8C8BABC8053A4F1CAD49D2FF5573283A8D9B4
04C04D2376E98C2F07DFE69683CB50B107CCC7C7EC63CFACFA3B95EA26D5B858
AB35313F292328DB09A74020326349F4F52DE53AA9D2F1F3C78FF7AC4DA62989
DB373F4DB903D16938F3D6E34BD70088115BE17055DF855E6158AA307582DEED
E2E5476B68B436B0027178821F48402FB7D7DC57CD092B374BCD5F0A0F6A7525
5E7F727BD3C814E17A3A8475BA6685C0DB4A38933A4D0B8502A34B1C6839758E
AB6FBBCF197EA977B02A30B879C290301225439C1CD17E83707ACF063B06E4BA
E4638263CAE24EDA66C9C1C9B3ABCE28B6E0B9EB9C83FE340EBE8F03A388E385
FE61712FF47DEFB7424D672452A43CD7661BB2E7DE18296EE1DFFF50620AB8D1
B02C1A98DD5095F0BE6FF3058F61DA3D0815D229ABF0F18DA4AABE9E1A5F9822
5AE4D2320B4AABCD7E9EF0A47D3AE67C167DBEF68142A16968F0E3FFB5228198
A1BC0A90200EF05B57120BB58A477E4C4E85AAA0DF5388A3E79F70758E368612
802512A43F4580EFC7731BD3EFAEE420731A4B90A4F95F1E3F3B0CFD54A5A477
C4C36814852D3486E63805C5A75D06F2197C4A23B4CC53763DCC149EAA0DE347
F66413CC9D289E50E79E6D366C3CBEB735E3BC43D6DDBCE846217D82023F6B53
E76007F6F08731634F37A9E7C7CF1B93B006F3AC07FED1652493DB86DC97B70D
F6AE8B509D9652FFD7F2132EC45E33136AB9611838F29421E75DADFFFE696C08
C2D3CA63159A0300C7F03BDC406CF07CAD341473C522C683034C370C2628CF65
9DD34EA8DD889C1089AFBC623F91A309F7B963650DE7CD1F78CF8B566551A6F3
DF1537146EDFB62C0A61382E8052B810418114F1D6165E1CB47A15E459D056EC
205D4B0B2FACE83066E6EF68B23D7DE5CEE30B32C70773B2F0ABF4C6D22C48F0
08A13B1114AC1193B994E844FA71C191326CB87014526128238CEDDCA78E8314
EDC6B44B38419ACD096EC8B824073D327F74F81E717C0691A2DEA4316D524A8E
171FAB3A449E4ADE299E893DD48AA419750D78DC8FF13A5A6B6FDB9A14DD8DA7
6050011415D3DFC86495805F7577A7FE67C22EDB42939C4A75DB0DBD01D4C439
C72171B0F1851CFD7055E9ABA4FA6157046177B2AA27AA75650661A7B4AB8FF9
1A72861376537BA2848F6E1DEC66314E22404C3E6E1A750EF9E60E890CF427C0
D9999023275AF5D30C951844B94A006DCEC644FE7347C0DB72FAFBBE837B1EDA
C16AD7DAC09AE065B36B2DAA71B22ADE121026B426109EB1CC015C6B23A35BA3
7BF4193CFAFFEE56A92EBAA39B4DE68E19101904A34D1C11106954C59C552748
F4BF13E2B804EBE0B4D6882F3093F5E85631B99351BAC161EA2B123B0269F5C5
E0242A3329AABBC166AFF6E1131905DBFC3E6E44726E81B17E524095E51909FA
21A965428B0FC127B397E19D911BBF5B906E95D61B5348789BE20A87A3BA2C0A
958D3DB889C98FC44AC55C1C199DFC2D37E82518C48E34F967F9E979A03529E0
273E0882C018EC8D23811D47A6AD2E9AB8736B9EB0E742B9E93E14B766CA88C7
A0126D6A7C4E73997AD9E2996046854A2D9D6E151EE943E301D9F0A0B5849440
5F2DCB31FCA2EB9C1D255197A377177966FC4197C6E07A96C507EC817E0EDA39
A780033108BB23DC1C93A5009DA5115C8C5DF990CB7281F9E9BE835A0AA3E578
7A8C558FFECAA849088143F1AFBC0E85D15EB6A459A08E5A80529B43E9F27F41
1DA3EAD2EF737CC0BB754D86D02C6B14C7C6AEA0F49A0202699E4F027D1DEF81
FAD1742F0367B325194DC4051FA9BFBA9827BD3732482D403D230DB5B8EC5796
C2F8A1524C8ECAF12C867472DEA88F7CB4F7FF1D292CFD08A3A0E9BD5684C0DD
C72835A46F4CA8FA0A2A98C9BE7CB762BC519E0381CCCD92B8606041ED5E2E0A
9F28026E18F1F0B049E76D6828EC85869E46924CCBB0AA25A8F897A5D340C634
A9D4F85C08D619F21D7FDD45D01D5669460244D419A5F7B4C4AA2E1F10943FA7
8254E0D8B6473F9C48A7A73C05F89C28469F243841C32EE816891D8DFFCF8B81
5EC475ED100D1D82FDCBEA468D63CFE51F1A1610F693543BDB4D474A840B4884
74EAE77412E93E9FB35B2909540B293844AA1AF3A022D4B4D8BC29CFBC517B51
09CC428AC71A76D2AF49CC82355D942A7CCAB32DC10AEC6FD15F1A21A0D3E8D9
4989A5D54FB7236008E5A4603689CCE33C388F5C051F926FCC5121C41557E6A2
5F9071F97A6A0F57BF6F0A5A276C2BCCCA9ED6E17F265E13307B783789BCD5C3
AABC8C11CF4D87C860A3635EDBFDD92EDBF2E8E5702A00B47FC82F5F25F7B1B2
D3D6ECBC921186B9906D6FE6BF97BC58A1CCA5F7AB87D5D8BE93D32FC011EB0C
24F7F4243FFEEEF59E6818E5507A855F91830603F1B94B3C0566800D4EE6585B
31D75FC4DF3F4DC632CF1CDA60BEA3D4E10D3318C10A7F53F0FD64B08D85E00D
6183D68AFA5078DE44A4F8B4C7491E58E324B166BB569AAAD622CEEBD235DAAE
E75F7CB4982A80FAB985C145C3D259FA1FBEA0F6A00C43DB67D8796851DF5DD2
C5E63744B1BD592D403D46B6CC4EF2FAB76AA8EF1CBAE9775E4E0DB35B304C75
D03239CF41E482B3A922A0EAC162397972976FB069377831EBC8ADB196A95435
8ED14EAE024D00ECA783F8CB9499D35C0C487406E9D1F33C1F531B0D8E13C804
EC33CCCA0D723AFCEB294E49F4B99D4749CEA9B2DEDF98939FA168FD62E9FE73
B2432A0B02168A6009918EBCCBBDA71D6EE8665C5E5A6636A9C7D1287DB8D742
D31C510349103A3D4F22C9A1A842B189F760F7E4F93E92B75F39AFBDFBD03026
506C2D9F88A25DD0F44E3EEE7F7E72E14CD00FBB194C1333C822A634F5E49964
9DD7C0A3348F576B3DE874E4CE7B48D0CF0D1CEC905153E9E8FD50054C4A77D7
6002E6418B3B309EADCF98163A601B9B59A4516C6C28BC3BB0DA47041CEFADD0
A40561D166C5D055E5E3C9B4639126B3468CE4AB11C078B561E60158F417A9DC
6E4420FC9820CCC2FBBAB8A3F4F48079FC8AA22BB75B05774BDF8E25C9DF38E0
95B789C571D4821E9C70F247D147F92BE1BCD66C924FD42E603DF5A96B75DD6A
A349720167FC7767739B2771CA30A58D55F0E27A7F4F0973C77760FD5A727A73
262CD910B6AA2427F76AEC7B66210072F5705285F702CAC2FEC87D98092CD9C3
02CB13A49F1701D24A4B780D475231DC70A906C321FFF0B0FDF48A94C2EE1671
ED6F1ED82B10C375592CB3356EAB836DAC4802A5BCBCC9C385E66162755D196B
775C4AB62166F2980C5E88C168BFEC75BD7242ACD6ED9EB5AEAF2F8ABBB041B5
DE896F7F3E42DF86C94C8455D111E0F5AA4EAF9537010E99526E88572A7E034E
189D292756DF706311FC88CFA19617C5B20F6866CCDBEF218EB7750A2C8CE1E0
4B07D5B38FC3526705D02D9BB7E61897F93662D3C124A5AF0600052B85A00297
8C084447969478504A44F089AC6F6A93C6FCDDECD49EA04D85A2B9A83C199D0A
DD6E6C3D90F4B659CDB303737E0E2D65EAB0E48C62DE0885B8D074A7642D5C53
7E98F732F5AB4BE54CF4EADEB37115CAD57F2631D9F4CD2358F9C9F5D1AD203A
934884BAA5E87138A15720CC812CA3EC4BBBB4940F9AA92FFFA79A6386557757
157B6B0E01E0F3862D618A0D14C368D758D62626129A81E7ECBAC9BCD49F5B59
5C359AA32CE755D9DF7B56F50D1D40DA2BB78E3E1A16626EBE12124FDFD1B397
D40D424BF338B19E557E7569F71565A822C4F78EA0D70AF5622677AABE0D00EB
2CFDDAD29E180007273CDCC3EF0B66A09C6731F73BE1F8FF2BAB87A742F92DDD
085C17CA9C88D6E4973E0BB25C6CA4081CEDE9F8B4EB9CCC5D4B4E86225942D2
4BFDFDB5137808A5679355542890EE54BAC37AF9DA8025266DC8C132C0D76EF7
C273DB1BE1C3478AC46317E5A5E680269D19302A9052A1F49A767DFCD4B4BA66
A5E2DFC2A6B3B719D7BE4841EC9202C3D02C9A2CF71D52FB4FFE6B1D8BF5472F
99C79D62BD5E2952106F7BB0CDE6DC59A64B91D36B454BC1EAF916C1C8A77C3E
1F216F33D02958474AA95A6AA539008360064151888B6B3294B093BF80D73823
96A87410F9061F27026CCE185EA9A09065D2EFB1688FF82EFCDA6DCD57BA1304
C739E0E1150588CDAF72A3BB0782E6D422D116AE5C87794B5DE77B1B49A53344
8CC36A27C2DE64FEBF951C45C40418FB7DCBF59F902D2B00C852AEDABD7BB24C
A5B39325A5C2EFC67A8E11C2AD130239AD890FB6C54D1B9C0A11218ECFF1BF4E
51673CC9FD277C3B943EA2BF0BC58C201ED0599BDBB0279D4B853E9F604C63ED
B2C7C8AD6FA5CA4357AA1364C22AFCE01871E15B74F4C1AF570F0CAEDE5879DB
063AD9C9ED6F317E89107CCA24E7AB711C219F825146B1FCD1169347D0B6D7DD
87F3CBA1D6D1CA6653B63734B7199AAE350B36BEBACFBD52BF42D21792EE0B53
2DF8AB037DC83BC04FB720B78044F1B2F70D28EDB9E311AF214FB287F82781EF
960B98C928E8B4BEE1778CF379CD837A51673D693F43E94D40B17961A5123E09
DB6E36BD5E64FCDEC89BDAF8196AD7BC26880379ED24A2D475DC65E70FCC2FB6
3E5358E76E9C83E48613CA64D5C7A0D919E5D5B94484CC6157F6D9601921195F
9BDB9D5EF408A20396CE98A1DFE50626542959AE74405A3F95FF200965E81019
EDD094CBC2E181882EEACA2FF5DBA5FFD869627D1D6C1DF38B484F41FD3A3583
1042F062239355331A811E33C850E3B83E6F0C074447C10588AE7685181BA431
45700CF26AA7B44A653D5F232B2A0C6D4711FF53E8597391410763D8964B3B03
541656E171293D97999CB3B7B245A70F534C52C4286AA53B4ACF78B1B59E316B
F346C8CFC828D7E9134344743E7444988EABB06F0AB2B018005D7474132B771F
F8083A67390D8406C7855FABDFBE2E76184D7DDE4E34D76040FDBE3EED6726A2
D9EB50D090DF4C365C633E5ABCC67075267B8669EEE734D88CE4C0C8AACAA5B1
E8B2978530B79A1B92A6F6192D6927E203A8DB1AF98E82CE8A7ACCE506EA267C
F7480EC1E166338E5906C80231D16C2FCD09433E88EDFEF887054E422D597149
9D861491DB162D3C20654A2DAE7245765AE40BA6084EF4465261A245BBC4CE58
7FA07303FEFC995932C2447784893650179446455DB83D5FDDBEC3CF52DACDC9
F9DCB827801D1D10E800C44F595501BC40B3EFD172AACC3E22194248248848F9
ECAD9BFD1E1B0ADD74DCC3486643B0437CE018B299AEE670E74756753B1978E9
04151EBC5D2956A298B61588362321345F8124EB95E5B70B72493C4A68D8F274
9DC98A03FC3C5E77E44D5D5FC01D01BF0EBA96E1ACF7BCFAAA9D250F5D92A0CB
D6BC61900AD7F92B56E9B79A5A404012B073CE8340669CD0034890E0C8E7507D
C3E265D5D412AA451603454E51A193FA8111903427D71D31DA0BA7B7899678AC
32DAB03C7712AEC6E2FF63CCF17F25F7F660549A527CDEF1F6C3374193EA1E0F
C3D56290A534E08AC100763D3DB5FD2C86EF0A92373ED88E222062336FD40BA7
692CA92919241444EC866A1E5B1C85215B6FBDE763730E01AAF61D2CBE6D38EF
96006D0990BA561FAA97C607E416DA90DA64D30E9DA4FB9992C7A41EF46B003B
BAC54DE965D201931CC5F5E4E18415348135AA75FA958B6E3BDFDFBB18770EAF
2E45A137861A7BA2B3817AD9DD0DDFF92B4384D28C0FF025FFBB2BC0AF36DFE6
5CAFA2F9B31FA1CAF676E4FF32117337010597BE4F579A9FDA9719F3D4BEF74C
AC6BAE6965BD202D254D76D4323E712AB244A5AC743A8E7CB76918694AF8AADB
16453DD40A9FD8894C90D7F0C5D0B1F422270AED09A803E97C60339B37118B69
3290B7CA47C5685DB0CDD98CA9B72D8156C1ADC92AB7B6633E3149D49D99E327
3A38913B5EDF1B0B6A7D02C87E05CA0CB8C619C6FEDC4F56B8E2113C480693DE
168B3E20B0E85AFE7BD8178D7504FB6A73CDBA6EDAF8DA39983B93A4E85B5CE7
886E9E8399BAE74FBA09A3BF7B14BDD6B860A70D93FFA4417E95E0663757A52F
CDFAB778F657CE771362E7426E66DA877A938CD1B5A35E922855152DDA3AAB74
B03E575BC52719B3FDBA78F29172F34F845CF0707DE384CCEF1459617470567D
F8EFB5BF98674403F0A3991EE5964F2AE26BC0E1C83616CD8840AC07730DFA23
FB4E4CE0AF8322E56951451A5B8B8E7DE384D516E19467052C97AC698544756E
8572D88A0696855CACD5418E032A7E4594DD4F1DF4CE33A9A3D7785E5BFC8FFD
9B85FAECCE9F4262E9D2CB3AA72444BE9452296FE53CDE74FB3661DCD4602D20
59FDF75DD1C5AFAA6819547579CEB7D603C35616796671AF91B872815CE50F1C
96DECEB7350D7CF7CF905FDADC2DADDE4670087F3F7EFE29CD905C810E418D37
C90BAEE70F7C2D77E14F48FE965988A27AE930F87FD5255782473C28D5160F84
360D27F34A3EFA843880B4C92CBAAE4A5B05E27B7C817A1DF16002AE104B3365
C0ECEFC0DD793F1F645C265FFC1DE2F81F6DA33DD374E704C60686CD6C22CFA6
33F8F6C13AC165936420424E7710DB3EFA7551317E57E2919720E5AE5227CFAA
90795EC923E0BD082BDFAB9C888601365ED21E79DF27B7644AE65E47B5AA66DC
5110AB8C82E5AE6BFC97603B3B8C52157D9304CDBA6BBD6A5F82C415E0575642
25F4659C148BD7575845EAE37DA8829F72DE9C1E3C359308C9E2251D626E1E1A
1711D5DAC656AF7F94C46587D0543968E5A2430F22B78CB205F09C6250EC21B1
7B1E9131EC26FA053B87C19F4FA01E89CA84612007B32B84451D7C8B5F96C846
08D82C8342352C002DD7659D6AF09596C1F712831AE57F71DA567EA2B3406B18
5AD4352ADEA67AB017A4549E42D0699FB84A7DACD212685E62079363AAADECFB
641A133DAC36FEE619E56B8A94C9CFAD241E16B0DDD4D64DC51DDB056FD2891B
672D27D37A96A3A9A36847A6F3E901B00331314C7FB2321C23C7D386A3089229
CBB96B95C8A8C906A71CCBF2EC0EC2BB2F8F856A91BC1DF01400DE9D32034655
A70BDD126BF0344747F565EADB55BE51E752839848
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFRM2074
%!FontType1-1.0: SFRM2074 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm2074, tcrm2074, larm2074, lbrm2074, lcrm2074, rxrm2074.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFRM2074 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-170 -318 1322 952}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA27F17EF728D907CD5850828C1C55C5AD4037669
198CEE3AC1734B07F3433998208DD3A27CE29A6720CEE5EF66E55493DBE448ED
4F99940D9162F2E9FFEC633D5497757C2125CE0A30E7CBDC12033414C4EC1A70
B47FAC9EED41587D88B6A027A3E1E8C9B08309E7ECCAD00C560447BEFDB76F5E
7FB24430C5DB1832A3F063230C193C642D3150C44564B544B77B86FAEDB809B4
E2BBEB234B2C495F5532CB1E888FF631030541DA9012A2365330BEF9B4BFF21A
F8D983748419860DE37858A729EABDF1C517F2CE123529BC3A7A39957A3E8585
E40B5E3102A03D8CC9139157B3C8C0A40C8CFECA9DA7BC8323F7A029EFABC472
6D8540FADC75A1E92854DD0D67C0E775AF45F9CBE54E37E5D4736BD3D86067AB
D271667F64FCC73AE886F161E980733A74048ACCB5E35F6C71DFE41E625BA9C8
6BB79D74B02B06A31B67D93D7EBE78B38E3F7399BD0AACC49517D670CABF25AC
FC2610D973E6566CDF5170D42C834B26AB883D301F001C5FBF2026865D2A4F8E
2631831EE06E782623FCC0EF350D463C3CC4F17115E5078CEE62260330FF9ED7
076F3CDE0FE4DD8490F95DEE035D5332EDA53218CDB17AA0809463E556B6D824
D1651A993262616D4220761FA13A93409D79F84AD9CC63442261D4E39F08AFC2
A004F2CC9B8E6D3744EB642EBDCF1E0317F1A49C88B375F5193B6B7283508756
DCD539A79668034F42CD5690F15787AC7580612E3E67F97A8E2229862CA5A59A
541E9572ACB1484FBC1CB7C9957127809C0B331B7D04FED3E0DAD613891BD142
5DED09B4A97DD3D6B597A627918E80A3DD3354026164713E00F4262663EA20AA
9476B3ECA0C85C9BCA9EA7CD06BAA10F3D97B7ED56C310348DD73C1D3BE9CF16
CAF6AD6988F4912AD08CC1566CD2A5905074F4033583C3A27BD792835EBFBF62
75B5157F95828B17EE78FBF826D360DA7926D8AB1E2F847F4D2C262FAF1BB671
E55A162D797B148B8946C5D60680790EA9B56459BEE6955D3E4A1D9180012433
6EAB31789982D5661489C5D8F1E782A3ACD5F34209414E329D0CE1F467B74DAC
6AD6BC184C2882FDE2F6F34F0AA747F7A0381A7551DC366F76F8182C36B3F149
249081482694D17BC8E93DAE37CCC890ED18531946F5E38D81CE68D97D3CD6C5
C0FC37CAB195372FAE48F276679DB81993ED79791CCD7325032E30DCE678C874
5A6B72A8E34FEF7DE05883049B8C2E0701514C0E4FA3C5F0785D8BDEC5B6F85E
28F5ADEFCF3DE605BCDD8692C061C2BA0AEFF55BB315C6B061EC7AFF7A7C4754
B35F3671361E6BFEB0F026C428F5A3B4EC2F3767461C3744A1FBCB429DBE1FFF
5E4E8B0C7028CDBE88C89F6D3B1CA8E2A8BC13AD0FAD9BFD35391483A59E3233
79610AA13B5C767E8C106ABBFDA82A73389849F31D2DCDA032E577E29C1F9E13
A006EC8497EE756EEF7857B9C29E6FB89942D01A8502B03739981C60BED64BBD
D3CC93C34CDBA6BB2FB5321780897348E1F196173F1329E1F01CC608E168652A
119EC26C07A384477ABE21A54E284D328926E00054B156921AAE022A4EB1FDD7
B49FA36947816955434B09E71C7F2B51F705E19C87F668AEBDE9BEF3127BB0A8
20B6D21E4C29664A425CEF4C93BC2C94AB7B1D1934894DF0C0EF520AE595D599
918C073E1838FF3ADC09117DE46343604A3CCB024E32D290F9BF17B605599B8A
A26D985BBEE502CE3B68DF402B97B4CD0F6F88FBF9D9FD452593794ADA22C0A8
365ADEB440266A3ECAF38851F5DC373FF002F852D5D348F7CB95F2CFFAB57B37
F0DC0B73C6CE231015D9350A21DB3A067EAF0818C09BE1E3E60686D0B4122D31
3D0DB956239486A22788A1779F56A0902A7EBF4F8EC88A57C2DE56615B62AEF4
154AA985454E2578A3AACE4B0EB3639202FAEACBB5C8C949F05872EED28AA762
88D82C4449FC82D56089E4C49D555E725DDBC0E99664036AAE2561C356C00DB4
6CB828BA39482E44A975C46BAC1F7A2F40F03384B33BC05A3C7393F16646F6A1
48F3D78B0056DED9C4CE026ADB5FBD9FEFC0F4782E29288AB0A45B26124BDCC6
70ADE9FBA2B307CBECBFD04F73C8C840F9E5BC086DC5D6C0E5F9D7B9284F2CF4
309F8DC5C0A6577A87AA484CB2F8D01C4CD2B524B40A3AB641E6F25F1C6545E7
830F04B7974D3E6419A763AE4E48E9DD4F9CBA6D04CCFF117FF1A8C1CCA6CD2F
C6A0BB92E119F67756347572F1A95A1EEFAE51183BDBBCEDA32B65C0F89453A9
45F3D9529FDE42E218AB2F57484CAE972312E7B5AC0F12E3936362A5D8A42E6B
8BAE9EA9D8BE9CEABA2ABE88BF68071DCAC8B8DF983FCE91203D3E793CCA76AA
3AE79E930331BB6CA784A00AD72D7B0BBE6995ABA0F82B0BEE96E8239F92DE26
47ED61904A7ED4D48EBC63FFC96DFCBC8601D4C997B6C42ED14887237A31C95D
68460E9D23B3ECFFF53F54FBD95B0E230A3F482D3C35939AD546C489FB8D0F8C
F29131E2538F58048FA273CC314B1034088DF5CA45DA10A42813BC950155D03C
0A04730A8E7331A54E43615E7720073B54F03E6CC333ED47C5A18EA258D699E6
BFEF23CA685047D8BE0DDA9F312A907E2A75DCD807228D7AB16D85A56C619306
C9DB8EED4E05E21ABCA8988953BCB8D34DB761FAB386C8099A92AFB930045F07
CD60FAA8B62F0E5DDFB3EBDFF259C641D160F82C924D3BAE8E7147CC85ED699F
25FB652CB9EB1A015AB69FA0EDD01061E252E8E2F8CFA34D66E77A86C0C43891
DB79739CCAFD4ECE7F00B17FFA336F406CC91C048711EF040ED36292B11D3652
6A253B4A8488E28072C26B985E89DED01E8C8BF213466DE9FD154412953539B0
CAB93A462E6A34DC95ADB8437B955E06F03D1EBEF2C076AB6238E138F79E02DF
55DD190619E0BD113AF7F6999985D8BC795EF75B613BEA94BA0F163CA8048C3E
1C5F8082B6CA3602A26BEE6235BE8502FA9E4B6E6F50966B57108F14794C5F9E
DC04D387A9BF8738B6AB64E46950E002DD1EF770BA4778296D06CD41A94A3269
EC5DB4A9580916DE799F5F0EDB5CEE75B087251284B1453E2FD2F2C26F896025
6F4E2CF47E1461DB12A5A5B7750621915370C04334189EB06A1907C8EF7DCF58
E7054AFD0A6A63C1F2FD830262FBD403566B9CEA8711F9CE5938EF40E4F9B1D8
9F3531AF104D0769F8659F4DBD2325B000A6ADE08BCBE39CBD2B709EC00EC7CC
B3B0E0A6BE49BCF608988975AC2DE05285485625B19D8263392771B239E8901F
1553A8769C8EBCB995C6AFEB42972561BC4407A5EE24F336B2F30C51017D8DC3
F9731053FA14056973D78B4B0CB143AD0342C66EF6FBE2F8CC49B1E0B60DCCBA
6F56FF9135CC8D7625FBFFBC82DF8363E464122D7FBACA70F73B3E3ABAD67708
C11F159E368FB62F312B74FA6EE40CEF625588742BD9D8ACB7A8160566BFEAA1
4798980BD38BE35C9C0B9336DB8C2BF75491933A1C59C2D96526A41CB146DC00
92FA072996E1CACAE3C922AA636F3E477AAD37CD2D4D0373DE5007A991FEF259
0DF49711BFE79C1AF04066406C524A9B3ABACB54134C2367BF0166566E456099
191E5310AFE9B0F144C466CC6C0C0151D97D9B5892BE04D37F086E0D8AE6F89E
9455860BFA4FF86001CA4EA354E74DBBE94CAC3E85EFDEEFB818DD50433CD02A
64751BBAF49818BE6E5E07F3903E14A647CAA484F977310B052BA7E61C9E6303
F5A05AC92CA48A1F6C837FEA14D6BEAD2A9B22FB6BEF2419CF316ECEEF86323A
8C2B85B6508639FC3EAE25F959A93824DED4203A60F8B73656C41285469A9D40
80F6F02F35EB9FEE265DBB5A06B4ED05A68D9800E61810BC8C8A942A86BB7BC9
9A9A412208BBAB3A2702D1F680589E8330A9DAE214BDB6F1782CFC4A772D8F4C
1DFEF82379E88F8292959BF18F27DCAA9639E44A9A76B9FD5B535DC1CBCF567D
E3BE7B338D8927F2AACB7E04FED3E0DAD611394466DD2684B2737A6A325BF051
784EBBFBF4CB6DC1BCFF81CF033F3A8A826BEFA86E33020B1E36510ED4C08D8B
C4FB8CF818CAACE213151FC81DC7C1CBC21DF351097CCE3EC1FB9A0E66AE0B7D
B5DD62758A3E5DF15576B36E92DFD79694BE2F9A98E6FBC6A3F897FFE5F9C9C7
E31FB75C3E973F69E892F8411E326A7FD92ED772AA7F5977208DA969854E9E39
74FA104191188036F0ABBEF5F22E5B13387FBB4DC2822D61D9FD8AF7C4E32CA2
F60CE7A8EDD72F37D55A4BA4FB7DB9C59F8C2DB86EC69BE41CBF1AF913FD8D3E
7ED6BB621B3CAF2AD9D980FDEA57608790B99FC25EF27A4B9DE53AD6D5252317
9FD087D81902B12D1B449D3D8AD0FB57C47546850474B126D19A9992FA11CE98
7CCD07789B52E1643116E662CAC5F8B14B95260B235295A24E0019B4DB886DA3
10F17C1BEF165C6BFEF7F6C2176D55FC8F79C315821A6BE4738D638A4585F435
7916C6CFD3E6CE9709E41461EF79FFE6850055376943FCA3E066212115CEFBAB
B533D9440DB8DC2924945826A2014C48E0C1127DF0A2C22BF3937535927725EC
BCEF72D69515D92BCFCD524F72B13AA894419ED36676220272D54B7AE213D3DE
8924475F94D55DA454D0EB8521016DBD708EA65CF99CCD9C17F6D8445A402F40
4AB967DD658DAD62AF2A244A3D8CE3A0DBDA155FA928CDADF613405FD339E02B
5043A4F1D6DD0F02DC5120E7034E1FD6D3FE7809E70578BD97E1D02402D63104
1D648A7E11FD2C2864AA1184B499C7B6158E55A2386D63D8E34F92051E03B60A
8DB836201C2F964441E6A54DF89654C583F647672F681A2531095E3ED4F25E00
2316940BF9780D74ABBBAB05E14F6AD82E4E4E4FCA5A7C48FAB40932108ED69C
DA2F20BF5C8B3C541258C31C5159E068C96E35F4BA28952C06D0DE629DB59D66
705B8604FBA739DCC06DCF93470525FDB76FE51C6A106B9026CFCBE2828950D7
CFA8E4267E2E2BE0AA2CBED013C722B233136F9989303481B529E3E5DBA9EE69
0057725918DBC5EAA17E79A2B388D4E4F12506BF9AD9C6FB6B97270E30E951F3
C607E6EDB6407FC4A23A7FDB6B9551371E5C9B0171A0065877E4FC0E664FA67D
9830819D2B39AFA579F91F534B15A83436B61DA81A9B82FE1D0286F38F5E3971
5665D7F908F106A73BB7AC9015087BE28F05ED17AE4CB9B98A404BE2B515F1F3
750B8A5DAE18655A9FFA76749CB3C970D193CD5E50B859586D459054790D28EC
9634E9A1548CA1F3AEAA0596846339DF5006D56BEBE3BC70D88F3EB84C32883A
8035B81C6191E2BC73903601C5C677E9E56130640181908253D42DCFEFD3A3B1
108DA35E4841DD385D4CEF44CBA6AE14CF63A363C9B90560D4FC5E64F32674EE
CC90EF93E87768C83FCADF3F16B31C6C557011A433917F71FE4ECD635446E613
A117AEA1851F21A6E4A0ECF381E69FDC75ACBEFBA9FA5372C195AE429D7CCB50
6FB45C2B8B4688D271061170A1A5CF41E55BF96EAA93E85EE5FBBB30C4539A8F
3D27B259B15FEC9D89747869E186B8EAC1CC1133A07C5006ED4CC2966D1E6DF7
7D4A4C282E75CC226A8A960CD9F225AE1908F8605EBCBD50A5B55EB9CE614A4A
57FD12E9F0B1D25B15BF5749C378E9BD1E90918329C519E99A2E452CA72A11D4
7061C1EE74FF00C022D6DAA547F7EDFBA5C3EC49D94E6CE3A9BD96C896EA124F
DD1D4A9AF4E20CD5C0C814658BA297E2B645E3AD8CEC06549E93F622877ABDD9
EFC3CFFCFC13A1628B63E1075F98F9F20B901936014F57BD2707948AA9B1255E
E18A915AAD59F20357BDEA11DDD2557B6850A4D4FAF353D77A494737C74B645A
477ECD37E69FF21953142B939B7E03D8885379F971BDB4953216877CF541BCB6
8CCB468A97584157C43B6E5A0AA57249851AF436A2A2784558510FDF7FC059FD
F17FC241CEDB7A58643D1C64E6DEEA7CB4E1592BF9D58DD293CE90771DBEF3A4
DA04A63F5BD47C7B26378CF68FE3EE6075C8A819E7C9E51DA0909BCA6BFA0D32
9043D7770D33F39899603DEB72620AE45F1C046E7B342ADB17008837891D3495
19C7DE277885849652B5C580C25C2AB4DBC95582B1F0FD65B83220A099BA54B1
05D0E5A9C73164C0B29DD6428FA00C476BE9B256ED3D434667F08A63EF31580B
C11763854C4AA81969255AB55CCB81CEBED5F2103319968B96989AD187879B0D
BF3F94B92176A3C3EDF2AC2B228BF98B9D86513B0A36050F3ECA0A3B389CE27B
A981EC04264BBC2834002916EBCE5F4EE4D6D61D1FF7D0163B774DECCE286F7D
17B7270D6E71730EC8ECC634BB80A6425EBDA57BD97F81EBEBEC38244E368428
5DDA86CBE125075D5C4B4D9AC223B4AA42ED70CF8D01E0FAA239302D33A5A672
B4B3BE25BA7A759E3465299229E1D20584C7FE400CC9AEA29E5FF9221B42D397
AEFDF5A5C5DC3E4EF04BFE5A9F1C75028E287466804D6AA8E57911161C1392E7
DAE55528267D5EBE38D100CC7434A5CA181F14238FB896D5153BD35F75F4543F
5038928EAE408AC4144433FA11FD83CD1620B34865B11C8E2CE1F2555F194929
FFA6D67DB288E99AD0A0948837937B26281DD04FD6E8F38DDCF804353D5A124C
2F21D3C0579D2F9C046C526C01951772BAC6FDCE70E48465DE4ADFB2C258B6D6
478399CF0851B1F6C4ACB2902AD3C45E86FA6B84F272CA3E85CD4C89443A083B
4EC77EDFCDC61E9D100F43CCD791D1E9D491196566867ACC2D4D503E70F9F335
5F744268597CB6AB749676BC04F01A86646EEAD71F1CC916D9D0B6886496EB26
5AB1B30E1EB781F490F64CB49A89040D76132F9B151BEF44C897A0FAF3A9A8AF
AB2DE0E7CEE1D3F7881DEA5E23CD0041ACD0F63080D213BCA6EB7FB6ADABB828
E33E3547481E6F36564272310D63BE9390488A272D1E12FEA1EDCEFD6C8A84C1
2B7971F1CBBE38766F055199459798B70C92939BE9B8264B66F25512A2315151
639B4C7F93CF5D33774721D232F1323F8ADF8B7C28796CF3B43FFF4ECC07C7D5
4F0B771A9068CFFA9922353E5270D5FA6AF779C69F84CE85BA5F0AEC70B39B88
81EB54E6105A54B6D96C4343AB2CA195E39457EF9983A6E5DD3F09FC4026FA1B
3E93DE947ACA2D5396BD982447922072126C498CB0B38D8B737B9C528E4F5670
871E4B60DF761FAFB4E31B4E6C689BB54227FD7BC1F8363902D6FE738984EAE2
94DA8C737FE572C15136F4274D33E5B615CB847551945069066223E92CBD1B1B
943C1AA99370C24B1427E1545F2ED526444E8468ED6AF03CA440A9B0A017F399
9A43A593CBBF7A16F17D74E82596E15D7C3D781959DAB1F20D320C6739F74385
67598FCB74E357AD910B42262349D33B4123F279BEBCAAA4FA7A54B4EACDDE60
108A892671B11DD33CC102F70F1D2E3082EE513702649578495B941BD639BCBF
681DBB8629179F79B7C8C829545A65BB9DA912293B004E276F31CEAC75F7A956
32AB0854848E0DCB2272D32FF4B0A6B2D3D7E841D248A52171592A38E008117C
71EC058859496CBB3AC9B22F9F8EA97DD67D898F8AD0E58EDA3E3D9FD637C98B
A46A6161F9AEFC3AC3659C56C59A0D58EA90EB13B8823E3FEC60FCC123EAEB13
1B17067B364E0F77D36C33F2F176B2A93ABC55B54D75DEEE51C641DC926E5811
ADA0F8765E184D7383D7D28A781E3817431ED0A0ECC2707BEB48F8EF0FDA6C9C
F628FFE1AF092F50035966E10AC426971884A2540043B1C4EE64CEDC59EF2DC6
CF1CF7D3A9713A524118FE0FCAEAEBEA6BA2632F509D28E9CCDD9A56E20DB763
20D487DF73D73878ABF61030B5A9733F63A70D01CE53EF4923EB983EE27728E6
44FCD294D7C0D70280A7042968A144019E8B23321909E34176F3E042860C6AFF
44BB54EC2BB2FD0841A2985E68BFCAF73D5DCFDAC08164E59C7904B58BC9B5A2
26E5184AC1733E106138C21F43FCCFFC795515FAD3F91AB8B4FC858550693F4C
709D34D5963E2086DD70F922144CE6093AC5929C9CEE82C58D08150933220E3F
1B9DADDD653B0A7796D3225D5F4E700EC9086DA48BFCC7D504CD6B3B0FB9FDFC
3D1161E656372AF4CE5A64637782D0321D07A21BB1D5FA6F27F7636477ABF95E
7E78AFD1B7373AF534CB8E4EED0114257DE8620719786111754111044E6A2831
94DEE75BE53F9C3DEA66C031976FF13247C32FC671AF4B2C8200707DBAC241CE
D8259A3F52B9A6EA32FCD1180E9F303D7B74883B24B4EAA482D1A8510092BD01
240F732E191973700B71D5B94E3B36DBBFA790DEE60A53285FAEA57E5A59175E
550DEDC0FC1B728F76EFCE91B2FEC245FB9657162992D857B49743CF44025351
940A9B4C146E164A72E13B7D2ED3646C0C5EE499A8D210044D0E9B57845F3F2E
8B96D28E4294EC0991B31A4C9ACB64C813097E1FC68F6DAC81C30C13581074A1
CDAB3CDED3B6BD0E3687052DB8BDC05443DC799904A29EAEF8DDFBC7E90A5281
7C0B8E2742E42C132FA6E083BDDB9F2EE13E374EA10E683F4D544EF671B66937
04248B341918880657FA09342C7441E266107DC63F07429EDEBFC353ACEED85F
6555D54240AC6A90130CAD43D0B767BEFC65B87C505491E55967512C4EE1692C
12AFF15151D4E724345A9B30B333F1161168565E02E3A0C1AE79A217A315FA7B
7962AAD6802CF2A740674AB560ED0E258DE2ACB8E3A59B004DF95B04A221533C
6BD0BE3335376435B76F32993AC4E9DC13B9B2FDF0C501C5962A82D830B53A27
A4D686B8861527D7189B2FC4C450809B2734FB81855292A77C43438AFE060691
81AEB9DBC6F45C8A2EB583451E0D4BCF321B86D262AC80738AB6CDEA6227815A
984A730659C96FDF210287BE3900C8F6161618E2AAB51A9609808E57CB966AB4
0297908EF7044A56E227B55EC84C02CB611A56897CC7C51905C32653E66A7851
18F318ABFA5423693F95B763670B84052E94FCD7968C23DB9712C9143242A8F3
E97D7C90F070504ED2B4B6DA468475CE4A11679D4B85933DB25DBE28D1601309
523028105B797EE8AFF23CEBC4F5F994D0139D37EEA1CBB2E19F6671F34CC1A2
0C1DF7794D747A0902232E5FB20E744372B05287C3764AE337131CBCE2EA64C3
B05B1B3AC68A0B8A898D8226DB42B2C54E6F4259B3179FBFA7AFF9A9E498A272
328926E00054B156921AAE005E18DB53718C621751A782DA56A87801DF84EB3E
BE790F85FC879B2B91DCC5B8AC9651CAE3E3603BFBFA8E3BF736363D15A7BA03
5C38B6007B192FC595AA0C6DC537C07C5DAD8D01980777BF866F3442616A4C53
706E27D0C42AFE93E08C6B3EF2D6224166354C8A8F314D35D77CB022D606E1C4
049429343B495A115818CBC5B448D5AA92EFE855A4F1CAD49D2FF5573283A8D9
B404C04D25D3DB35A2FE796037704F65A2DF7F72CCDDADCABE128184C7AB1FCD
67C6CFB9A225F02F2FAD975C89DEAB698713943E2688FCAF847140AF8FB5606B
66927E37AC81F9D59FEAC8F4D48F9516944D8A6334F85FAFB7D785A7D5DB986A
59AA60664D2B3CFF2DA15A1B5F7ED680C722C70477DF10EC1F059BF55742477D
C54FBE1C3CEED5B30A8AD85E4CD10E861C9236A4685A43A1B22079BB37CB2EF0
822E4FFE07F1F6EB2D82A7C16029200963BC50BAAF7CEA88D373B314E400065F
04A06FB720B88BF5483E74C30C6B87C58D3D796E447F8E3A192BAB648D74B078
EFEB4C588660CD3B2D9D702E3896DC3CC354E708DDF8CCAFCB4AA3578D7BD8E6
C12A001317DEF46107FE2D309083486AC369F2DC64A119DAE8BA2E7F8C04BFED
6580B8A23FB658BC4DD658AC86113A33878C65BADFD1795E92C56C121F02BD0B
E007732BE95CF90A66CDE5C562AB7C95E4BE6111D8CB4E6DA6FDB781939E5697
7D8DD960068E5A6EC32E2CB72C320900EE3D1629E91BBA2B50098EFB88AA3C4F
9AA552DFEDCE7D01CDCA12C03675C9CE2095621535347A8B3359046652ADA97A
DEB19F17F9A8731CD220AC7953CB1E9AB9817A3868C713473AC27BF0BF83015C
799D255B3BE60FB79254B9AE526E1D5BE5A664EF360A3D590C4D137BE43F0015
2BBF102C48F625D6358108A6A74CAA42C12E533638E2E1CD704B916F3E746658
7CA3C838C10F7E276A7DFFDAFF10B57EA8BF45D7F5C8845E486FC5DD66C76635
FA0754F938E1AAEB0DBB2669B00C9F97C9194EB7E2353556FDCBDAEE8189F5F3
5FF3B4DE76602A73BB5C654F303AD4AB0FF2A0AE157E6EDF81836350A756EB07
A8849732004430DCF204F22FE67E36A15C655E209563C87F86643947A9AF3551
4E18C253956BAD4CDFA6A221A4CC5148811A493D0CF18D7AD008E8F025D34BEA
74B5D1DBE2887ED29AA811A99569DE12EDB3B8D2F736CA92E716E7CAFB06E634
3A534BE6119637D98E59EFCE084193B603D86D6603BF30AD1E7C3889E1384514
78CFED56DCDF2082A65678DCCB806CAD9422D1D31A0093168DA2C7E1D6968662
EB318CE4E5A9C725CEC203FF79A3167B66A3EFE446180225D07AB38129FB0E80
CCE2C72377D784015FFC7F433C7A2AE38E06217F5028E16515AF4A069A7764B0
0730B8EAF03B44127F2BB59760FF70D17A8A87AA569ECDED4FC2FCED4A5C3129
25CFDA7A56DC4786B275CA8708BB67935A5D7822A441EFCEB8C69302EB724659
BF62CC4954DAE44C1EA7709E87E3121C125C3CF551D3687ED7A1292AC2257750
F1AD5D17D5E4BC036720D26F42D8B0A7B272F7577C465ADE1CEE6CCB5DE49646
FAF5F8353123993A5AFD319BA7603D8C342DE973040996F97BAA741E636F8E0C
F03A3CF16B41967D0CF623D1B004C3B49BB0E92F5584709EBFDB724E74EA87B5
C3C9FE3AE4FDA58FDF2ED77443D09C940B8F228B60DF50E9F4D89AD4D7E69C4B
762B0764996B1FBDFB4EB06ECA4726E1C4C68FA6C5DC990072B5634FD6704ACF
0D20AB5C9DB4E39F5FFA41F72434D6D55209315BD98259662BF580181A3AA887
8D0DDA6B9732B464D7AFBBF6A004114E617A2D44952BEB4BB4C1E5F44FAE71AB
B6AB74C46883526F3F36262B7779CB810AD6CAA2FBB3EEC0F93EDC684352BC69
37EFE46540876F4113515C5A3759FB3AEE8DB0987268C6B87653F8AFCCE73F6E
93F593CDBC5380318EF617791F7831062241349382A6DB75D06918C64544A5D2
B38A6559C0239995845B6B58259081532A4DD656BA7445A6450898B076816FF8
C78ECE023EF48635B0AFD2EF99B25DBA60AF53C5EDE241242312C594156E6065
F533B9610828D2F4A9398F6213358FB8D88D842E16D70F279B134833E80735C1
807CDACD90E1C9F70E476AA9810BE05A87C29DA51B81F4A6A6874DC1EFA0BD70
4CA608A6797BEA0E39539ECDC50BDD1711D5663F56FC4EE3A8DDBEF5FA0F46AB
15141F4434619A059B84AB589578E74F2D4690786F52C056A5B4DD2D4F7F0304
41E3CA834431DD4CC729D71296283D9BFDBEAF1AF63BF137736D9E995145A4FE
EEB56FA63A0C5FAE7CD20C00BFB3C243844964D2F9ED847EB17F13DD0518936F
7753897D5BEC6755011C33292F8C7B9777073FDE5A4DBE09D7C6BF5C531DF6C0
1974F860CC3A9528D6A519A9952BE5383EBD1B266B9C6BB9C32626D253C57AF9
A4ABF161CE9F4C2606AACCBEA42026EF3EFE27915225F71E8F7E23C37D1C2F93
04B7FC733B363B221AFA60B60070F09372FC551A63ED427463917BE1B060A929
4EC900CE1E1A856861E0CE9443A564CBE3FE17BFABFB6A0809C4A416FA6A8CBF
B8804DACAAFEE975C2D2D0853CF192BF2A47F96B195AC3BCABCFE72E2475BD6B
192C04175A057F54C7A8CFFD360B5A41551DDD76D3C148E8F8C2BC097DDF50EE
212EAA5924BC7DBA8BC4211F4C3FA26BBD0405BE092929EA05BB75E680695663
C31C9401ADF637C2446C1579DEA372BA4AAA6FECE770216FAE6DC747682659CE
1EDA2E84C5C81869CDCF71C38E6B454F99EC32E1DBF00B4C911F43D4A8A64AF5
4E3DA09C64FA994264D4D4522EBFEF140FDA42139C6C9C7DD6999BA4308245B1
A3EDA3E5B289819F101527799AA91804CC8DB99C7A729D539D84DACF91027BCF
D591C5237A270BE3C997FB89920F3AF6BF18FC6AFDFB784A4B57B6299303FEFD
1FCEEFCCDB460C81E90B7A0EE05A7539D97A5FB214C4C7F2957B9672DDFFEA17
ED16E4E8FD34AC6C44ECE4AD6995C7AE9E1FC1B6456CE1B67C284ED451933886
416B6A93E05F3B54BC892A5E41556AA4B9DE6532D67522310EAA3BE8417C422A
DBD242DD63968CB6AB2826DE33DA00E734757078A7602706FB49AB5C00220D57
EC8FEDB70493A425AF4E31FE1B2014B9D070A25CBF046693AB11E4C2B930F52C
3956795BE1FDF8B4B525912549A01B7A009FF1EA94966E4FF7336573288B0107
B9085C626A706127317CF55DD773259477FC7ABB0D6E265AC19F9D67979F9138
F2D2A896AA0981C9F365655FC24DB654610FAA959B1383EBE391827FD0355746
CAB77386246ECB5C7F05524003545EA2F447654F3676631A0345CC85899E8C6C
F1AAE0273E8E64636558C1920D34FD64FD71BFA6EDE7E80010A5C4C054071D26
3C9C16
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFBX2488
%!FontType1-1.0: SFBX2488 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecbx2488, tcbx2488, labx2488, lbbx2488, lcbx2488, rxbx2488.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Bold Extended) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Bold) def
end readonly def
/FontName /SFBX2488 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-205 -316 1564 922}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA30E93C19889DE21E60D1FDB2BFE19ABFEF06059
8A659CCB607015182EC681AF73ADDE4533A86C8A88DDFD99E33AB4637931057E
AC7D9DF42B614C752A4175AB95C7E0AB2A036E2E0B49EA8205ECFC2290E6E927
E0CDC62A1742FC8E59EA1532BF2721235ECE5FBE40A9DE5411F785DD21009E4F
1E0974563ADC9CF62D37819E39ED65120FB9C870C1823C3F96198B4A88435968
73AD99EF27B2E0BD2FEAC130296DEC42786C23651F4199AF1251DF159B7DCBE2
4E2A7B6A7765F10DB0707FC84D49B021D432A4B6DDF145E8C9604BCD081997D8
5FE2A113308C11753DDB0301F572C3790B7FDBE0DA142487D27CBBB1228B7FF4
5990EFE9A1AD38B9FCBAACC2C3FE78B05D3C597476DD1BD6BE76B78BD875A91D
E61C79D2049588978FFEE57606CE37B4CC639447FBDA179E5D657AE76C1350A9
3E4EFC7D003366F550F2399536AD7722B1C17AC3C973B097153F3F1FF6DF7CF9
8AF85C0631FEBB48E1C783A623F53F382BD88C41ED9A1F44FA77F70816BD99FD
28A71AF42CFB86401E2D85B555E493A4D4923D3E6DBA45893785426343E1E646
925DCCD302343D6ADEE9FDB3D9C91835C7F94F8904D69AA567B8E7538C486958
DE83E2EA48EB8BE7F57664E0011ABC707B5A54E833D8DB9266AD753ACF844536
CF63146D84D930F5D8F7A409CF367D69590ABA77601F2E8C22C6A79A2DB1FEB2
8568C5637E1E91BDF2EF0FEA3FE2F37A709564274E37B455E86D8B0C4597CB41
884C0AF02F597C8D4B0C88F326DBE0EECCFE9F09F993CB7462632EB6A8AEC59A
3F41E294D7347DA871E2B5399574ED5F87C668A7D5F20D67339765E539AFBE1D
488E5BEABB9327D8B0187CC87BF8DB9AE77AA6458C2FB8A3CA9CF5CE758C036C
5ED6740D79C03800693DF0FD0C4873C7773771BDD7D8134E7A8F2A67A66FC827
06705826819B52AAAD0B3D9586319FECF8BC689973815A3AA97B5692E964AAFE
F97D79AC910C6EC8950E99433037931943FED17A1E3AB5F5AB0FF96297D52AA1
5DB4381C7EB591FC6D332619A2CAC913B1337BE62034552666D6A7FD4F91EB43
E2AA79E0E516A9016738E38F34C9BF4A27C680A3E8112B67C5D283A316228629
C941EDACC38EFAE4126DC52CC757EEC498FB0DE0D1A395E7BA2F0925C667F3DE
B249E79E79C5755890D5A3D10E4716AF17BB14422C329AE0BA42C9EEF888D3C6
DB49B71ED83A216241DA1211F42E4327DA0FBA34901D53F6E6B5B55E65BD79BD
C69C348FC2524EED6E4A6C35CCB6AFFEFDCE8C18E42E05C376C8D56281F6F7F3
B4657562ECFA247153812D465D0DFEF3B82108456EAE0FF8E22A15B60790BC0E
D7D1C565BD5A2DFAB27BFFAF5770DCC8A33C8645359114E9D71C32B13902C43F
52ADECA5CE3DE6B2E2BA1BA849DAE119E0C4A26369448FAC91D930CBFDBDE00D
B899E344D699C2FD288FDAB3E6A84840206504E661BE6D41EC37F32F16F4E2CA
734380757049AA7B8524CDC15E7A6185B329C8F686D75A9D8F3D48F1C25CC713
1F5E3D67F1E40330D662435CF302E03489954A2BBFCAE08D8229B2D93C5A400C
2CDB4241177353670633FE7A3E0156A5DD95C2C1DE2684115E92B4019222FE50
8BA4BAFE39A5A2B5ECB604725409441D769AF83045591EDF98D15D746AD9D57D
8BB11D01FACE7CBA94041CEAFEBDE6D1D60558389731756044BD4149B388CEC2
1C76608177CD51634BA21A6C4726516B03B6867286EED3003DFF85B65AA64D0A
0F1FF41447CFEDDFEB24C2A5FB67502C05B884A151C05113E4DE238C2E292602
DBFF74A8EDC509992BB69A6A8B12EC64C77C15E7EBBFD886BCF391AEA28E1CA5
C44272B7BA365964A1271E8F4BC3E0A6FFD4378703652A6AA45487EDC424FCDB
6CBA9E00A76705E81705E612F96A32A8F9350EB34E79BE368D7EE03517240270
FC5B54417DB4B3BE25BD81E0C4792B026C25EDB6B4F9F0BEB9F757FD2E3A3BCF
AF16270609F10267CD6E227C6C0B6D71BF6B9721DDE2FA03948E8D6D27820FEE
FBE23328E6C0D35AE05A523311E5B6EE262F03198E0B8F82D796E0870FA38042
BF9AD232D663BE4CEC99589CB70941A1BC17C4151BBA9910455BEFEEF3C9F795
D5695958AD9EBF63D76FC6F84AE523A10B01EBA34E1CE1CEF3D5F6B40F57F3C8
5743260BDD241E10AD2617005A2CEE9627DD4DCA3BB78B7DC14DE8A6EDBF727B
DCC88440674CA5960FB48FFDD3A7D8C74987A7F140E0A0A26F95B798E25FABBD
89A2C17EB7A3AE81F799FEB3130321B658D01D4F691D128061C674E87FB07BE7
B67BC9C461BB0E2F6D9483EA956455F62EE57D13B6485B96819F17175679FD90
54DF1C605092F60F1C373B05B911B89D67CFDCBE86161B4BD1FD82E5FF4FC5F1
99827EC49370893222868A242034EB1D5B55C9225BC5ECBFE098DA8008401C6C
03A9DBD97DC4971A485BB922F9CB20F6D3D1C9F40D9E991753E4850AD8308B4B
5BF03944AA5506DE6A20A1EFF00F316B9337EC2889DBFA423356B0D93BE40A72
92789867D1C64F9C1F18FCB04FC879A6461BF85A440B9864E74CAC82C6F9B862
736D867D927772803D9C50A1ED8249B91D2C8DDE8808DC922FB772A36CB09FCB
96470F81292E4437C8ADAFFCF365B4485E96A9C9C4E50BC74E4E542DB1915577
6D311C47FF72D385A5F23302DABB2D6127CE2F4EED77BA4069ED1BCD83B56391
99A68B3D7575BD954666765F81B282635610ADE5DB5F0A6A1A916167307D4016
20C503DEA5D79632DA32FE2A6EBCC9D94E0787D5F083F990F2162DFD355D4C34
FCE76F7960EA4FE44E368B0822DFFCD57DB107E0D5E728CA78145EAA2B396686
DD5FC5386098A7CC2A6AE8A7778C1D27AC5EC62364DA6E0C5ECC9B3B85C0C672
D65ADA70104826CC10B15F69D1F139689335EAB32E5BFA7BFD90209DEA860D77
F7ADBDBF3D8D348873FD52F8C48F9601372F5D0E95D7FDF91A111734FD20D280
8840C00A026BD1B23D75690578661B1E9E62B48838A442E796E1104D031A837F
F15A6CD3401A04093C37D119B7777F3F729F352BE940B4B329FB463D8E696CE7
BCD92563CBCA6C2C6B50905C922ACCC30FEC7B1820C42A1078409AD56FE7119D
B5E7737DF4D0CAF7AA3D1C010A40A2D67FA2AE0B2C9F9D2011B5B83876B8DC19
F1B02F9F23433255B6F8AF17DBBF27066BF3214E1B06294C66DCC4D12B83677F
886644AF9E79DE4347ABB15EC3C23600BC5A557FFBB7F3E75689AECBA26D6AA3
4CF8BB86F4B93CDCB0023E98BCA1954246490A01F560120437FDDF454E7C7956
5507AB1C2EF74DFA2A3CDD84DA84200884D5F63C4253C69BC1212CCE4DECA894
C6AC618011E948916F6A9356A285C62D2D3E0E5E776B6A4EE93F10A25B6CC281
9FF6F26221A016066AFD35FA973198BA54FCD94646F6BFD96E5F3353893B819C
F769EC2C322580AFFD41A9EE233A726B2315FA4BAC8A9ACEF50FAE0EB699C330
6C52D5C7E67FC8E6E3573DB6FB5CFDE38FE2E9BF8207894A24EEDC4F35968EC6
B6036E9D65A26EEB2A08F0000765FEC6495933C20BA435EF6A458C976DA92D7C
19D24B905549CECBDF7BDFC6FA4F7B74BEE20210A0FE7B0C2F5FA4150713F6FF
5A943CEC7C4B8805F37335669160CADB900DC43E618C06E4E83D61F68D73A373
4B8EC9D803D0D9676062563712167DA00C6CECC8759003780009677DC944FE3E
3C35D16612B3EACE32EFBAB707C50FF6708F4AB5B05C531CBCF1D1DC101A75E7
B55F34AAB89FE4BB8470C253483DE7EB353611BED8E37D7BE8E857688514794C
5F9EDC04D387A9BF8738B6AB670B3EB9A3E85B312B331EA44FA926093CEAE64E
4D8E58EC3D281ACDB7645ECC5F4CE6A04140CA516D7793BD1F976840A4D7AF01
6449FD58506FFBC9507DDD77014C2920F71012BFEED7585F55B995DCC55499B6
46AD565CF7FE85966D6F8C3EED0AC734005F7CA45C483BDE5670997B72CBA3AC
1C1F7625B600BAA5D77705218DDD134AAD7C32A332D3BEC24D3A8B2ED7401F24
29C9661A9AB602EEB99A28941BAFE16CAEEC0DE8C53851903C4122E9FEB527C8
4AC1DE8DF646DCBDCD3033763D93EF23CAC1C44ACA65EFDAE7A15DA273DCCD84
2275C8FBB6003E4166DC27459483ED6A04D1DAEE7D239604B5D1DCDBD3BA0304
8A200E359C0C635B437AEC88D81FF347EBA6C417DF5F8C2BC3A5CAAD652F44D4
32004DA354352C5F6503160BDCF924E38905EC11852227A06BDC84ABC8F799B6
38CF6C497D0D1E75DA0DD648A764B9DDC33F19C7EFCB31A980B6A05B63D75B86
33225FC05F132544B831255B96FBB30E83372BE711DA7B17E5A874BF14E532D8
88A7904C72FC1ABC392D62B3240677F64889D700B15F5E18C430D828A7C16A81
002AE7A15CB4353D94C752CC52FEFC1238F36B24B5F5BCB5DCBBD3211FF07D69
E21FB4794954043098CB4DE8AC3CC9FCB3772DFF8130652B71CA5ADD2266A3E3
3FF41FFA11EFC866594DC34C88198806820C640EACA609E4C5EE59F5934BE6E2
D0D45246935E2DFDC56C87343972D071B660741B4094ED90D38FC4C93BD51468
208072BD861CA3EA8185BCF9FA4892D3050E94603C1C42DE0C535B229630AB9A
215C8FC1470D926D6E7D4C105DB759E6AB82D300511B05C15FC42AC1EEB4EB41
3944D0775BAEF808D2FEA2BEF33383AEDBEE076C3D5C68F7783E4092B409383C
CFCB416BF435E7274DFCC80D58B99A15CD40590B9B68B378E88E66FE3EA0DD53
827939541BCFDDB01997CD5DF4AF124740AE853231A58BEE28AE0207200A0CA8
5F553B69EA1DAB2827A6B65957CD2CEE8EB4510782749971A800C03E0409D8C5
6211C6D2880423B437527AFD3B8AD3FE05A8DFD048A6FB52403D4C642F210E02
A3AE9284B599C63F2C36EB602C9656760F2DA467C6325B8C959BE75432396878
00B071E8288F1AF5732A5FC9579E3D1E967CF4711285D38B3AEFB1083D837140
AF8FB5606B66927E37AC81F9D77E461C6511F9FF2CD09DBFE40ADB929E04919C
95D57BCF0A2667F5D3D0DC69628214BAD6EC0B5AACBF5E14D7202282F119071E
6C4F7C4C0001735EC02EBAE844A143C63491A0BA2F10874A306A94C0AF48A292
01593045978BDF715A0647DB52992DE617DE4BC0004259E1D4BD53E263A88783
78F1C62A848011C8C079A3EB39A63B93F359409B9D2BFBEBF88AAFA6E681A7A7
987EC1FFAEBA3D18DA336C39F09225CCD8B85C5DB458FEEE8BEE21A7784A6B13
422B5EF70FB8DAD131F0F6038F07FC10D735BA9AA1317F148C15F4AF867E4292
F7ABC48A9F9FFED6FB35F504F1EA911595464747883CBB183FEF6DE22619D0D5
E959FA0B553B3535E17C8887DEE96EB9B4FD20E4F550C55621D03FAEE368A160
6E7C5BFE5FA418CDB5998A9FF519339A07AD9F1B487D67B89C20DD38D71B7AD8
4A001FFA908C9158FB4DB6DA9143D4422F29DBF36979804DDF61F36C5BD8BA61
B92E35F1F782778CB029CABD1D3E0053747046ED2FD3B8D257373A3F45BD25A5
D100A123A95ADE38E1160368778A557ED09C2D369B74532E6ACF671DE0A0DD0F
D3856029CF661A65599B46B798F75ACBFDEE0097F82C032F7B71782EC9664CC9
2595CF6457CF08F33D1780D6366F4B8D1FD520C8FEAE3B21B790709FE9A19ADF
6BFA5526F6D8AD95971585ADE72D806EA35079B648CB4193904F609C2FFFA828
A43AE0EB5B07B48DE067F29A643656837FD042FF53D2453BED9574E1A120A09B
3E8973D747BBB7C389C9D5F0083D522B9B84A6479C6819C90D6918118720DECD
373E9632DDC32A116396E2A7FE57C02F92CB971160685193845F6AD316123620
8ACA6C88585D746C0BD2F8664253B09D56764E690C790C0FB5FA652C6CB6D67E
A840AE96BAF641E2469EB036A248DFFBC68DFB6CC9550F530ECEF0FE9E9A05CB
50300FC4F2D6A7C53C15C4145C4F68D392DF1D68478EA93DD150735524FBB355
183066983F1FBC52B6634E8EA3C0579D9536A29293C513AEEA52D3993D6DA86B
8DD207C10202637F5F390506DFA91E59D21FC5F4D5016AAF1EC28B781D42934D
97EB6FD416180CCA3182A1AC285BA404191251E6650A6823BF8235C7146C46A5
DD890534331EF694E7568C1EC621A6DD5371DE9A17C93C1493975ECB1F4D1BB0
92A16569B0835C0A3FB1CAD0893106502256B8FBA503E9492741F45BC90AA548
8F44F571531B0E96542F6F89E913D021172A8E3293F92739ACA880762566AC99
50B866E8CC5EE30FEF149E35637257BFB4D97BD9929CC4D58B29EF3FA42BFDDE
098D69AC022876725CA929E9427C185ABE396DAAB6357A1A7B66CF6FF78A4B21
FD7F5958DD7851D6336EB49D654B456E636D325E79F6F5BCDDF55F0712FEFDB9
65955A3AC5F7C0753E39AE54AD926DE16BE14837C8E010C89024D95EC449154C
53C4403A91FA09AD6FBEA9505AE5B78C031C9119C83F809B9A721F8351D54CA8
491AFD467B4557357A5191BE5CA1D916A19EC19623C0FA613B236459B55B0365
B6CEFF8E0F11508584BAA0510BE406066F0245D786FE17DD515FE0CB61A4A575
AEB7D5BFB60E7697D41ED3A847160EB87FE3614C536E9D79D26E799F1D26CDA5
6B940E651D090AE0FE1E618E4BFB44561128E0AB55B741637462A2B111D2ED33
DFB65E79B96931F045DA2DEE53F301BA889B2ABD919C5BE1C04B91266178B2AD
C607D752495F20DFBE60B8899D997CCDE74826BB97485FEE2F178EB199DDA2E7
5496C16E498B6FF324C0FA310C9B3D60F656B561B93730132CB709EA0A1054B2
A560A5BD31249CA1D662D1A896926C7C49C6438A48267435901C7E8272CB34B8
D8734E6574C83CE619CEBAA0367ADBB8FBD0049909230ACD622DDA627133EC6C
C0A8516E4DC86EAF6586D371B1AE3D44CAC4008F498CDE2290BCC435C4D792FA
E793421A5A45C29872C8CDF6F0FC69B0F51A459C739E6B6A7E15FD01219849B6
497FA6DF9C8EE095B8695FD0435E3D66D8ED27FA13C6A2715BBD86FE60139743
6DF6CD99E6C494D954449218636C01A0DA635F17CB0308E490F1640E1E4BDF9F
7250D90FBD295196A8FF74FFD2356EBF7641727AFF8DF1AFCF1D98BD5A141D4C
466C114743B853D7F77AF0F59F7AD455093C45B93895FB27C9B1720357FC30AE
252CD70E47A5AEACC54237FDD07089A316348091BAFDA514BC0986AB3B9D72AA
88C6F74BAA162A67A8127BCDC22EA3797DB5A1BD9DB81BC806F4206253C2DCC8
A40E93C1814D8ABB906E8B3217B1B6F7AE010686AF267A3C899BB19AA4AAFB14
01E6CCB19D9090F253F180F55C89355A821C70D9B318C2B02094A90E24E4C47A
EE28242D033D8CF53621656272B2D64975DC69CF280EF29095C409B980D358DB
A51227EA00A1BBC475BA8BC06943D37B24BE29C2C1679F3D3C0EEA04FD6D4CB8
0758EDB8556D0048827140AF8FB5606B66927E37AC81F9D4E27C42F2C78F42D3
E40247E7619B8C69F7BA47B270C4073D8747F3BED6E631D300A32DA3CB7A2718
9824DF510F5722B50C788D7F4E102F3409AF0E16C54BE328F1F84E51E491C64E
0AF729DB9A387C4D23A7A4F543E83FEBB7A566B441D4D0EFEC7D6505E4768B4F
CAE923D009D2B8B4F5A62024FE72EB87CCF204946097D6971616F961E9C9893E
8D7753E0B1BA466C3B8E7D98A8EB4181F21941BA88611DA6204768664BF14767
F037339B53DCC6B1F182556DE91614CCC4AB634C8B36092F79420A3BDA2A1021
4F0A6CBFB1ED239F92DE2647ED61904A7ED4D48EB9D5CB36C34709E5223CEEA0
A86C9C89D9BAD27D764ACD56B6D724F4A403284E859625569EDA1A174ECD0112
ECDCBEC86456F4E3E2DD05B0A64742140716E3D1A202580A24E0E39C67AFC5ED
94692DF12A7CC63B5B7757E0A16BAE50167B1DC5AA95B6DAF079B8696338DED7
88554CA7351753B9E8A4E7898EA970CC7288E1032DF92C9DDE43B62C043D3183
D52109069BDEF56A2536722E95FF1C3999433888A3FFD76EF7C273DB1BE1C470
5E416FB37F78DF6E349BE5593DC6B1BC11033930DD6DD104E18B803AB78AFC74
6DA967FF97F3F7A2A4BE18D5761EADA629C2931415003A9021F3DA02B1A57073
53F509BBF168DCA42CEE0631ABB01C8ED262075F6D35F90CFA34AA413033CE7E
801178FB479077ED48C29F014A51A5F3C55327ECCF5BA5355C776E2E75BB1F82
B42FC8A95F789A603A1ACC69E996737C23FC740605CCC9187171289055E53B24
FEED2888C0FCDCEFFE3151643A2EF56BB692F6094A8A71F70C8DA8C76B769CFD
71F3B73213FB0E63790DCCB77E809E2FE040F07021D7F914209AE12DC5B1D35B
0BC65A886B44D0B6836AAAC07CFAE1F79A4080ABDC6FB84FDC636EE6CEAE5B5A
D0F3BE11A407B503EC5CF8ECA2B28105862123EEFC996C4740E4A9DEE1596B6E
5C78B0699250AD3E136F1FDEAA34823394454DF98A13F16FDE736A8004F9EFA7
49669C3BB3BA9385F5977EF91EFA95258B6F35D0B70585F95A552C4318EF0BFB
01B0A773652ED3AA65CA9A528A932AF59C7299AF28999667F5B865621CC5FFB1
FDF088978B90D9940C46EF20FFEBB58FDCF13104AD66885015B6D67AE8B86308
2FDC66486CB43C152610B0C7204F5999679E6B4B810591C8457AC02B4DAD3AD1
2EA9CFC3BFA8702148576276BCEF0DB00846FA13F2E7AF696EF5B8B146317980
4D774C5B97D0130E60971302F53C986B94EDCF4C5878A7B31AA85083B6553F66
4AA7FB021A950FC75C3F0FBEA6C4011F18662539BD1275C7003CEA2AAD91F505
113F17918DCD399C09D0247C1E88859CB02BE8128D8630107499F345E2AAFEA5
8275BC5DCAD93FD818D2D5B9071ACAB3D2F843343F1EA73AE2A08CFF2F4F59F7
5D70571710D8FC3486F54B9E4460809E7A40E279C107369CFB807306BB5E7513
D0156A9C9350C0F66BB492E08D4FEB6F83D2CEC824322A5D9AD29CDB1E64E737
AF47A894E9E942EC5D6B38770C8DA5DA6C2C6D8FDE6FE36B199AA273FE563730
6EAEE39CA3E37FCD954FB6B261C41F445F7742CAB2E88D2158586DDE97A987F7
15808DC253D1562654987C3BD50D619956564DF7746AC013D8B98245CB7924C8
89595242BFCDD1896E3E2CDCAFF64EEF97C9FF727F08F2BFC328DB02CC280D3C
AA87D634BC255F89CAF1DABBA08E6298F006A4F2913A200B22FBAC78768C4EC3
29C561C03D189245ACF30EB64479F2673C9AEFC509BDA8400A5A1F19EC6C599E
253D9868B5F75F00A3AF76306F1EEFB66EB0F194B11C9F8EAAEB1C01FA9C2B9E
0A6B480EBB29CFF35076683AA718EE09AF09D203E5441D2D5CC52E0A96ADD64F
49F46B2D4BD4ED6411ABD75C981CCCABA1EBF44D78755D586BC1BFF58D72226A
9ABE08037B56450F07FE30B28F6DCF8C1900D6497B38B585520C687ED3DD0DFA
5548C0891B14D99644BA13F85B329936F10E6B07A6F8DB91EA57ACE77BF5B24A
44F45F43A20BDB91831CD7DBC455FD33FB4E7F6110695C665F456F9F600BA076
684B2CAF8F33877635AD15264B0F96B2D0E493473D4F22D36BE45455AC0A0B62
46065D3E0B217CBFC1EE153B96BD3F77002F2694C151DE9D68E5FA8B3C8F4CB7
633686130167772FCABCA42B6F41EAFFB351C627F02BD6A72DD939D4C162357C
5D5FC6A13F2754E7DD3BB8C7FD5EBC64404E8C69C4D29579B6B21F8791701050
A1DB9A1BB941231E9AC42E0A23C064543291A490B1CBB2F7C891FD5FDBFFB499
4ECF216FF82C96857610208F39FD775A2397E6D2ECFDB7212FAD24715881787E
D6F633DD7BC5B61358A1EDCF0CDF39CA406FDF46DBBA605CD8195A16765A2EDB
99C4EA62A0B19CE443E4372321B6F692850AC62C48E1367FA202F6CE5D54ABA5
531343BC4AB9E331D0A01D58D35788FA6F01BF27B5A8590223348E5A9F2E1DCD
5B03C5D1BFA746AE8F304FB73A0292AD1A4AAE908B49EF25EF48E7E56CA7A0B9
4452DE5094942EFBFB0995DF003B757A1D5046199F3D5A6770348B73332A47C5
38847BFD3B95EA262945710FE2D708B726A7FDA2284643AC878A542DEBA73263
0023D22A4D4A643821692E2C7FE44C832B9BF24D8CB87D678E5195A01CC142FC
81D1F4CA3362A1B0D86C00A49816C19375BA41440C7EB666C8CB334D0824C5E8
3AD1B8F73F38321D43197297F1792E47F312DCADE1D98BBA56CF9BBD35E7FBBD
5A32BA13F01AD5ABE43232D46C7142AA126E34882206C9671003FDEB27E9876B
16F44C81D5C2470207BC6B0BB9D2BC965832803E347A3E9F093BC0C0888E046E
85CACE4898BC9404D7B6FAABBD811B96E542C3FC6E8D2172916AF4B382E5B7C4
A24522EE41ADBB96EB357CCE1C5794FAC96F6037D5841BA442BBEF0F94299F5C
9953A8D5C02D475B59AC3E77CB55E9F2B7B36A2CDB5593442E597DEF3773A4EE
F31122582DA62FAFBA32DE771F12D0E27729E4417BCE42B826FD369235C3DBA0
C32A429BDC8AA2528A30CE814C83807C646EF68E3E6E506DE58BA4EB4D1F2A6D
3B427F4487A41D2EC264508546BBCA7634C5C6EE1D6F36DBC0CC230403B4FC36
1D6F27A1E8CAF52701F7AB6C76DC0AA4B57B0B458A60BF921AF287B3755EB614
AC773703C10D2D7DA432A21EAB7C6A1017A36DAF78D2644F55334C50A1EB9370
44B66A2AADB12A22D8FD17DC0BE61AF14964F072447E929EEE0B6B8B9A6608B0
EDAA470FE82008B3EFDEA17EC7C2BAA02E25E15A52995AA62A79DC59BCA3AE55
6AC65ED8BAE17D2632B53F475504F09E2D66B42D52E9C3FE4333B7AF65CD8F96
D26E0E2A6AC10B4CE5D1C4026527F006DFEB90155DD58ABA4E39E1E369201369
B9AFC18ECAAE343741508DECEF2D75B83BFE0488E1F5F74B2A53F64958543FD8
2C7AB4437A3459527E85B459D174E497E3CC565907F2C602BD0F7CA63B4D030F
AAE6CDA44801BC8F611C25276050BFC1834DE084ACFCF03721334B1E70AE960B
372A0537E6BC6FF03FE366B640CBB7034D44CB0E492C69776057424619EF96CC
C6263EA571E4228DFA9B109CE61EB72B40C141386ADADA5241507EA996CA0CED
7378B6D71BA8545243526FA33CAD08ED462014FACC23BF301D1F234B18B43CF9
8AF85478B18C735F19937641A7C293DA9CD5B77D0A481585B5F7E9D8CA683766
23EDB8A7CDA60AC9B374F59DBB6DD51143A004A9F80DC13DDC277B068ACDDECB
23AEB03E4F102D896723E84E145935B008348808C59386DE6BF35937785D98C4
2E46DE5997F4773EFC2776172BBF30BB69B554EACCF5DF70E8BBB6A3F5BF6782
CFB04B54E54C2DF213B204B57C3F3FDCC85C053A4DE003672061D5CF0E24BF83
400BFCCBFF96CBC2042EAFBAE33155528B56C9B9E648A145ACE1412650DD9D4F
847E1FA74B5CCB8807EB7862CA52C62FF4AACF3163A4A1385C6B367EA611C8C2
BAFB0302CB498C79D4CAE7DC7FBA27735C6DB9DF492A8D442138AF59DAADD461
3CBA9492A1353A91AF2DC330F30101B2463B6AF04A75C7A8B6391CE1C902280C
15EF6F3AD01506DDCE1B08C6E938744C6FB0A2DE3908BD266B5FFBD75F532893
D47CB05F11E96F623CA3723B9040BCC7A0CCE6721BA548120AB812C6245DB89C
10ADCB3B79A07E4160678937A4C09BE1CBCCABE548DA3CB724F4846576F89C59
9D26EA1C64608EEDBD9400328FD267BF368036C464E37B977E7ABDB900A6597B
C1526ACD364F19C3CA91B7721EB4E08D246B80DC5EF4BAA09E5EC53EA6E0776E
E32C018DAB4FDE1E93650F93451C1DC0FC8054D04B39DCDA01ABD335080EC7B6
3967043AA42E57B49153D86F87473393D821AEED292C8BD174F5C674343527A0
3AFF0C46B55642563362A898A2E10AEC7FF120302B582DBC20D31F789B9F94CC
6F945ABE0BC706E7A90C2549D2829B933CBD0B7FBA6C0AC5728E04DFD15266BC
42FE0FAAC0F7D58A02A39EDBF1534FE1AC9EAE123EAC49F3EA67B1543B78CD8D
01D3B056367398E77F8CA5F09AC21FC388E1AFA6E6BD665222764A9F5431E7AC
5009553F673B8EE3156228015AA321E0CC95A670A52DE9DFDA054EC15285526D
05849E552B8505C9179AA7C037
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600 (ExPorteLogique.dvi)
@start /Fa 160[61 61 35[61 58[{}3 90.9091 /CMSY10 rf
/Fb 133[42 45 52 30[53 75 2[62 53 4[69 73 8[67 69[{}10
90.9091 /CMMI10 rf /Fc 194[71 11[45 45 6[35 35 40[{}5
90.9091 /CMR10 rf /Fd 155[58 46 58 50 8[78 2[80 72 1[78
2[78 81 8[68 14[52 52 52 52 52 52 7[40 41[{ T1Encoding ReEncodeFont }18
90.9091 /SFBX1095 rf /Fe 11[45 9[40 40 40 7[45 22[61
80[48 1[48 50 35 36 35 48 50 45 50 75 25 1[28 25 50 45
28 40 50 40 50 45 11[68 65 1[67 1[61 70 68 1[56 5[59
61 69 65 1[68 1[43 4[25 6[45 45 45 2[25 30 25 2[35 35
25 10[50 53 27[{ T1Encoding ReEncodeFont }53 90.9091
/SFRM1095 rf /Ff 135[69 5[53 8[37 3[60 1[58 29[86 14[66
66 66 66 66 66 49[{ T1Encoding ReEncodeFont }12 119.552
/SFBX1440 rf /Fg 22[71 112[84 4[63 62 1[89 80 89 1[44
2[44 3[71 2[89 28[108 69[{ T1Encoding ReEncodeFont }12
172.188 /SFRM2074 rf /Fh 135[114 5[87 8[60 3[98 1[96
29[142 10[60 58[{ T1Encoding ReEncodeFont }7 206.559
/SFBX2488 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-364 -246 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -364 -246 a -364 -246 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -364 -246 a -364
-246 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -364 -246 a -364 -246 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -364 -246 a -303 -103
a Fh(Exercice)71 b(:)181 b Fg(Expressions)51 b(b)t(o)t(ol\351ennes)p
-364 10 4489 5 v -364 399 a Ff(Exercice)45 b(1)-223 571
y Fe(\311v)-5 b(aluer)32 b(les)e(expressions)g(b)s(o)s(ol\351ennes)g
(suiv)-5 b(an)m(tes.)p 0 TeXcolorgray -274 715 a Fd(1\))p
0 TeXcolorgray 45 w Fe(T)d(rue)32 b(AND)e(T)-8 b(rue)p
0 TeXcolorgray -274 859 a Fd(2\))p 0 TeXcolorgray 45
w Fe(NOT\(F)g(alse\))32 b(AND)e(F)-8 b(alse)p 0 TeXcolorgray
-274 1004 a Fd(3\))p 0 TeXcolorgray 45 w Fe(T)g(rue)32
b(OR)e(Not\(F)-8 b(alse\))p 0 TeXcolorgray -274 1148
a Fd(4\))p 0 TeXcolorgray 45 w Fe(T)g(rue)32 b(AND)e(F)-8
b(alse)30 b(AND)g(T)-8 b(rue)p 0 TeXcolorgray -274 1292
a Fd(5\))p 0 TeXcolorgray 45 w Fe(NOT\(F)g(alse\))32
b(OR)e(NOT\(T)-8 b(rue\))p 0 TeXcolorgray -274 1436 a
Fd(6\))p 0 TeXcolorgray 45 w Fe(F)g(alse)31 b(AND)f(\(NOT\(T)-8
b(rue\))32 b(OR)e(NOT\(F)-8 b(alse\)\))-364 1713 y Ff(Exercice)45
b(2)p 0 TeXcolorgray -274 1884 a Fd(1\))p 0 TeXcolorgray
45 w Fe(Donner)32 b(la)e(table)h(de)g(v)m(\351rit\351)g(de)f(la)h
(fonction)g(logique)g(NOT)f Fc(\()p Fb(X)38 b Fe(AND)30
b Fb(Y)20 b Fc(\))30 b Fe(qui)g(se)g(note)h Fa(:)p Fc(\()p
Fb(X)d Fa(^)20 b Fb(Y)g Fc(\))p Fe(.)p 0 TeXcolorgray
-274 2029 a Fd(2\))p 0 TeXcolorgray 45 w Fe(R\351aliser)31
b(le)f(circuit)h(logique)g(de)g(cette)g(fonction)g(logique.)p
0 TeXcolorgray -274 2173 a Fd(3\))p 0 TeXcolorgray 45
w Fe(A-t-on)g Fa(:)p Fc(\()p Fb(X)d Fa(^)20 b Fb(Y)g
Fc(\))25 b(=)g Fa(:)p Fb(X)i Fa(^)20 b(:)p Fb(Y)35 b
Fe(?)p 0 TeXcolorgray -274 2317 a Fd(4\))p 0 TeXcolorgray
45 w Fe(\311crire)d(une)f(fonction)g(logique)g(\351quiv)-5
b(alen)m(te)31 b(\340)g Fa(:)p Fc(\()p Fb(X)c Fa(^)20
b Fb(Y)g Fc(\))30 b Fe(utilisan)m(t)i(le)e(OU.)p 0 TeXcolorgray
-274 2461 a Fd(5\))p 0 TeXcolorgray 45 w Fe(R\351aliser)h(le)f(circuit)
h(logique)g(asso)s(ci\351)f(et)h(v)m(\351ri\034er)g(v)m(os)f
(r\351sultats.)p 0 TeXcolorgray -274 2606 a Fd(6\))p
0 TeXcolorgray 45 w Fe(D\351terminer)i(la)f(fonction)g(logique)g
(\351quiv)-5 b(alen)m(te)31 b(\340)g Fa(:)p Fc(\()p Fb(X)c
Fa(_)20 b Fb(Y)g Fc(\))-364 2882 y Ff(Exercice)45 b(3)-223
3054 y Fe(L'ob)5 b(jectif)36 b(est)f(de)h(cr\351er)g(un)f(circuit)h
(logique)g(con)m(tenan)m(t)i(3)d(en)m(tr\351es)h(binaires,)g(des)g(p)s
(ortes)f(logiques)g Fb(N)10 b(O)s(T)j Fe(,)35 b Fb(E)5
b(T)13 b Fe(,)35 b Fb(O)s(U)45 b Fe(et)-364 3167 y(une)31
b(seule)f(une)h(sortie)g(binaire)g(telle)g(que)f(:)p
0 TeXcolorgray -274 3311 a Fd(1\))p 0 TeXcolorgray 45
w Fe(la)h(sortie)g(v)-5 b(aut)30 b Fc(0)h Fe(lorsque)f(les)g(trois)h
(en)m(tr\351es)g(son)m(t)g(\351gales)f(\340)h Fc(0)f
Fe(et)h Fc(1)f Fe(dans)h(tous)f(les)g(autres)h(cas.)p
0 TeXcolorgray -274 3455 a Fd(2\))p 0 TeXcolorgray 45
w Fe(la)g(sortie)g(v)-5 b(aut)30 b Fc(1)h Fe(si)e(et)i(seulemen)m(t)h
(si)e(les)g(trois)g(en)m(tr\351es)i(son)m(t)f(\351gales)f(\340)h
Fc(1)p Fe(.)p 0 TeXcolorgray -274 3599 a Fd(3\))p 0 TeXcolorgray
45 w Fe(la)g(sortie)g(v)-5 b(aut)30 b Fc(1)h Fe(si)e(au)i(moins)g(deux)
f(en)m(tr\351es)i(son)m(t)e(\351gales)h(\340)f Fc(1)h
Fe(\(sinon)g(la)f(sortie)h(v)-5 b(aut)30 b Fc(0)p Fe(\).)-364
3876 y Ff(Exercice)45 b(4)p 0 TeXcolorgray -274 4048
a Fd(1\))p 0 TeXcolorgray 45 w Fe(Cr\351er)32 b(un)e(circuit)h(logique)
g(a)m(v)m(ec)h(2)e(en)m(tr\351es)h(binaires,)h(la)e(p)s(orte)h(logique)
f Fd(X)m(OR)h Fe(et)f(une)h(seule)f(sortie)h(binaire.)p
0 TeXcolorgray -274 4192 a Fd(2\))p 0 TeXcolorgray 45
w Fe(Dresser)g(la)f(table)h(de)g(v)m(\351rit\351)g(de)f(cette)h
(fonction)g(logique.)g(En)g(quoi)g(est-elle)g(di\033\351ren)m(te)g(de)g
(la)f(fonction)h(logique)g Fd(OU)15 b Fe(?)p 0 TeXcolorgray
-274 4336 a Fd(3\))p 0 TeXcolorgray 45 w Fe(Cr\351er)27
b(un)f(circuit)h(logique)f(a)m(v)m(ec)h(2)f(en)m(tr\351es)h(binaires,)f
(les)g(p)s(ortes)f(logiques)h Fd(NOT)p Fe(,)h Fd(ET)p
Fe(,)f Fd(OU)f Fe(et)h(une)g(seule)g(sortie)g(binaire)-137
4449 y(qui)31 b(se)f(comp)s(orte)h(comme)g(la)g(p)s(ort)f(logique)h
Fd(X)m(OR)p Fe(.)-364 4725 y Ff(Exercice)45 b(5)p 0 TeXcolorgray
-274 4897 a Fd(1\))p 0 TeXcolorgray 45 w Fe(Cr\351er)32
b(un)e(circuit)h(logique)g(a)m(v)m(ec)h(2)e(en)m(tr\351es)h(binaires,)h
(la)e(p)s(orte)h(logique)f Fd(X)m(OR)h Fe(et)f(une)h(seule)f(sortie)h
(binaire.)p 0 TeXcolorgray -274 5041 a Fd(2\))p 0 TeXcolorgray
45 w Fe(Dresser)g(la)f(table)h(de)g(v)m(\351rit\351)g(de)f(cette)h
(fonction)g(logique.)g(En)g(quoi)g(est-elle)g(di\033\351ren)m(te)g(de)g
(la)f(fonction)h(logique)g Fd(OU)15 b Fe(?)p 0 TeXcolorgray
-274 5186 a Fd(3\))p 0 TeXcolorgray 45 w Fe(Cr\351er)27
b(un)f(circuit)h(logique)f(a)m(v)m(ec)h(2)f(en)m(tr\351es)h(binaires,)f
(les)g(p)s(ortes)f(logiques)h Fd(NOT)p Fe(,)h Fd(ET)p
Fe(,)f Fd(OU)f Fe(et)h(une)g(seule)g(sortie)g(binaire)-137
5298 y(qui)31 b(se)f(comp)s(orte)h(comme)g(la)g(p)s(orte)f(logique)h
Fd(X)m(OR)p Fe(.)p 0 TeXcolorgray 1858 6310 a(1)p 0 TeXcolorgray
eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -364 -154 a Ff(Exercice)45 b(6)p 0 TeXcolorgray
-274 17 a Fd(1\))p 0 TeXcolorgray 0 TeXcolorgray 109
w(a\))p 0 TeXcolorgray 46 w Fe(Dresser)31 b(la)f(table)h(de)g(v)m
(\351rit\351)g(de)f(la)h(fonction)g(logique)g Fc(\()p
Fb(x)20 b Fa(_)g Fb(y)s Fc(\))g Fa(_)g Fb(z)t Fe(.)p
0 TeXcolorgray -80 161 a Fd(b\))p 0 TeXcolorgray 45 w
Fe(Construire)32 b(un)f(circuit)g(a)m(v)m(ec)g(les)f(p)s(ortes)h
(logiques)f(OU)g(et)h(v)m(\351ri\034er)g(v)m(otre)g(table.)p
0 TeXcolorgray -69 306 a Fd(c\))p 0 TeXcolorgray 46 w
Fe(Le)g(r\364le)g(des)f(paren)m(th\350ses)i(est-il)e(imp)s(ortan)m(t)15
b(?)p 0 TeXcolorgray -274 450 a Fd(2\))p 0 TeXcolorgray
0 TeXcolorgray 109 w(a\))p 0 TeXcolorgray 46 w Fe(Dresser)31
b(la)f(table)h(de)g(v)m(\351rit\351)g(de)f(la)h(fonction)g(logique)g
Fc(\()p Fb(x)20 b Fa(^)g Fb(y)s Fc(\))g Fa(^)g Fb(z)t
Fe(.)p 0 TeXcolorgray -80 594 a Fd(b\))p 0 TeXcolorgray
45 w Fe(Construire)32 b(un)f(circuit)g(a)m(v)m(ec)g(les)f(p)s(ortes)h
(logiques)f(ET)h(et)f(v)m(\351ri\034er)i(v)m(otre)f(table.)p
0 TeXcolorgray -69 738 a Fd(c\))p 0 TeXcolorgray 46 w
Fe(Le)g(r\364le)g(des)f(paren)m(th\350ses)i(est-il)e(imp)s(ortan)m(t)15
b(?)p 0 TeXcolorgray -274 883 a Fd(3\))p 0 TeXcolorgray
0 TeXcolorgray 109 w(a\))p 0 TeXcolorgray 46 w Fe(Dresser)31
b(la)f(table)h(de)g(v)m(\351rit\351)g(de)f(la)h(fonction)g(logique)g
Fb(x)20 b Fa(^)g Fc(\()p Fb(y)j Fa(_)d Fb(z)t Fc(\))p
Fe(.)p 0 TeXcolorgray -80 1027 a Fd(b\))p 0 TeXcolorgray
45 w Fe(Construire)32 b(un)f(circuit)g(a)m(v)m(ec)g(les)f(p)s(ortes)h
(logiques)f(OU)g(et)h(ET)g(et)f(v)m(\351ri\034er)i(v)m(otre)f(table.)p
0 TeXcolorgray -69 1171 a Fd(c\))p 0 TeXcolorgray 46
w Fe(P)m(armi)h(les)f(fonctions)f(logiques)h(prop)s(os\351es,)f
(laquelle)h(donne)g(la)g(m\352me)g(table)g(de)f(v)m(\351rit\351)i(que)e
Fb(x)20 b Fa(^)g Fc(\()p Fb(y)j Fa(_)d Fb(z)t Fc(\))15
b Fe(?)113 1300 y Fd(a\))31 b Fc(\()p Fb(x)21 b Fa(_)f
Fb(y)s Fc(\))g Fa(^)g Fc(\()p Fb(x)g Fa(_)g Fb(z)t Fc(\))990
b Fd(b\))p Fc(\()p Fb(x)21 b Fa(^)f Fb(y)s Fc(\))g Fa(_)g
Fc(\()p Fb(x)h Fa(^)e Fb(z)t Fc(\))p 0 TeXcolorgray -80
1444 a Fd(d\))p 0 TeXcolorgray 45 w Fe(R\351aliser)31
b(le)f(circuit)h(et)g(v)m(\351ri\034er)g(les)f(tables)h(de)g(v)m
(\351rit\351.)p 0 TeXcolorgray 1858 6310 a(2)p 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
